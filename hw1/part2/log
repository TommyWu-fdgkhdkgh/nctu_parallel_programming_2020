if [ ! -d "./assembly" ]; then mkdir "./assembly"; fi
/home/tommy/llvm/llvm_install/bin/clang++ -I./common -O3 -std=c++17 -Wall -mllvm -debug -S -Rpass=loop-vectorize -Rpass-missed=loop-vectorize -Rpass-analysis=loop-vectorize -c test2.cpp -o assembly/test2.vec.s
Args: clang (LLVM option parsing) -debug -pgo-warn-misexpect 
test2.cpp:21:13: warning: unknown pragma ignored [-Wunknown-pragmas]
    #pragma loop distribute(enable)
            ^
Args: clang 
	discovered a new reachable node %entry

Features:+sse2,+cx8,+fxsr,+mmx,+sse,+sse2,+x87
CPU:x86-64

Subtarget features: SSELevel 2, 3DNowLevel 1, 64bit 1
G_ADD (opcode 35): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SUB (opcode 36): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MUL (opcode 37): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIV (opcode 38): 1 type index, 0 imm indices
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_UDIV (opcode 39): 1 type index, 0 imm indices
.. opcode 39 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_SREM (opcode 40): 1 type index, 0 imm indices
.. opcode 40 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_UREM (opcode 41): 1 type index, 0 imm indices
.. opcode 41 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_AND (opcode 42): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_OR (opcode 43): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_XOR (opcode 44): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 45): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PHI (opcode 46): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 47): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 48): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 49): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 50): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT (opcode 51): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 52): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 53): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 54): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 55): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 56): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_INTTOPTR (opcode 57): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_BITCAST (opcode 58): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 59): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 60): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READCYCLECOUNTER (opcode 61): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LOAD (opcode 62): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 63): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 64): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_LOAD (opcode 65): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_SEXTLOAD (opcode 66): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_ZEXTLOAD (opcode 67): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STORE (opcode 68): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_STORE (opcode 69): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 70): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 71): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 72): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 73): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 74): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 75): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 76): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 77): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 78): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 79): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 80): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 81): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 82): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FADD (opcode 83): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FSUB (opcode 84): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FENCE (opcode 85): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 86): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 87): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 88): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 89): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 90): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 91): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 92): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 93): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VASTART (opcode 94): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VAARG (opcode 95): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT (opcode 96): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT_INREG (opcode 97): 1 type index, 1 imm index
.. type index coverage check SKIPPED: user-defined predicate detected
.. imm index coverage check SKIPPED: user-defined predicate detected
G_ZEXT (opcode 98): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHL (opcode 99): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_LSHR (opcode 100): 2 type indices, 0 imm indices
.. opcode 100 is aliased to 99
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_ASHR (opcode 101): 2 type indices, 0 imm indices
.. opcode 101 is aliased to 99
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_ICMP (opcode 102): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCMP (opcode 103): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_SELECT (opcode 104): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDO (opcode 105): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDE (opcode 106): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBO (opcode 107): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBE (opcode 108): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDO (opcode 109): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDE (opcode 110): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 111): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 112): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULO (opcode 113): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULO (opcode 114): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULH (opcode 115): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULH (opcode 116): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FADD (opcode 117): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSUB (opcode 118): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMUL (opcode 119): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMA (opcode 120): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAD (opcode 121): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FDIV (opcode 122): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREM (opcode 123): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOW (opcode 124): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP (opcode 125): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 126): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG (opcode 127): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 128): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 129): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEG (opcode 130): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 131): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 132): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 133): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_FPTOUI (opcode 134): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 135): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_UITOFP (opcode 136): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FABS (opcode 137): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 138): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 139): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM (opcode 140): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM (opcode 141): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM_IEEE (opcode 142): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM_IEEE (opcode 143): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINIMUM (opcode 144): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXIMUM (opcode 145): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_ADD (opcode 146): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_MASK (opcode 147): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMIN (opcode 148): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMAX (opcode 149): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMIN (opcode 150): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMAX (opcode 151): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BR (opcode 152): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRJT (opcode 153): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 154): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 155): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 156): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 157): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 158): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 159): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 160): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 161): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 162): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITREVERSE (opcode 163): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 164): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOS (opcode 165): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSIN (opcode 166): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 167): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 168): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRINT (opcode 169): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 170): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 171): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 172): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 173): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_DYN_STACKALLOC (opcode 174): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READ_REGISTER (opcode 175): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_WRITE_REGISTER (opcode 176): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
	discovered a new reachable node %entry
SROA function: __cxx_global_var_init
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.end
	discovered a new reachable node %for.inc23
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.end25
Looking to fold if.end into for.inc
Killing Trivial BB: 

if.end:                                           ; preds = %if.then, %for.body11
  br label %for.inc, !dbg !59
Merging: for.end into for.cond.cleanup10
Merging: for.inc23 into for.cond.cleanup10
Merging: for.end25 into for.cond.cleanup
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
SROA function: _Z5test2PfS_S_i
SROA alloca:   %agg.tmp27 = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %agg.tmp27 = alloca %struct.timespec, align 8
  [0,16) slice #0 (splittable)
    used by:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !dbg !43, !tbaa.struct !40
  [0,8) slice #1 (splittable)
    used by:   %37 = load i64, i64* %36, align 8, !dbg !44
  [8,16) slice #2 (splittable)
    used by:   %39 = load i64, i64* %38, align 8, !dbg !44
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %agg.tmp27.sroa.0 = alloca i64
  rewriting [0,8) slice #0
    original:   %37 = load i64, i64* %36, align 8, !dbg !44
          to:   %agg.tmp27.sroa.0.0. = load i64, i64* %agg.tmp27.sroa.0, !dbg !44
  rewriting split [0,16) slice #1 (splittable)
    original:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !dbg !43, !tbaa.struct !40
          to:   store i64 %agg.tmp27.sroa.0.0.copyload, i64* %agg.tmp27.sroa.0, align 8, !dbg !43, !tbaa.struct !40
Rewriting alloca partition [8,16) to:   %agg.tmp27.sroa.2 = alloca i64
  rewriting split [0,16) slice #1 (splittable)
    original:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !dbg !43, !tbaa.struct !40
          to:   store i64 %agg.tmp27.sroa.2.0.copyload, i64* %agg.tmp27.sroa.2, align 8, !dbg !43, !tbaa.struct !40
  rewriting [8,16) slice #2
    original:   %39 = load i64, i64* %38, align 8, !dbg !44
          to:   %agg.tmp27.sroa.2.8.load = load i64, i64* %agg.tmp27.sroa.2, !dbg !44
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %39 = load i64, i64* %38, align 8, !dbg !44
Deleting dead instruction:   %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %35, i32 0, i32 1, !dbg !44
Deleting dead instruction:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false), !dbg !43, !tbaa.struct !40
Deleting dead instruction:   %29 = bitcast %struct.timespec* %time2 to i8*, !dbg !43
Deleting dead instruction:   %28 = bitcast %struct.timespec* %agg.tmp27 to i8*, !dbg !43
Deleting dead instruction:   %35 = load i64, i64* %34, align 8, !dbg !44
Deleting dead instruction:   %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %33, i32 0, i32 0, !dbg !44
Deleting dead instruction:   %33 = bitcast %struct.timespec* %agg.tmp27 to { i64, i64 }*, !dbg !44
Deleting dead instruction:   %agg.tmp27 = alloca %struct.timespec, align 8
SROA alloca:   %agg.tmp = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %agg.tmp = alloca %struct.timespec, align 8
  [0,16) slice #0 (splittable)
    used by:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !39, !tbaa.struct !40
  [0,8) slice #1 (splittable)
    used by:   %30 = load i64, i64* %29, align 8, !dbg !44
  [8,16) slice #2 (splittable)
    used by:   %32 = load i64, i64* %31, align 8, !dbg !44
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %agg.tmp.sroa.0 = alloca i64
  rewriting [0,8) slice #0
    original:   %30 = load i64, i64* %29, align 8, !dbg !44
          to:   %agg.tmp.sroa.0.0. = load i64, i64* %agg.tmp.sroa.0, !dbg !44
  rewriting split [0,16) slice #1 (splittable)
    original:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !39, !tbaa.struct !40
          to:   store i64 %agg.tmp.sroa.0.0.copyload, i64* %agg.tmp.sroa.0, align 8, !dbg !39, !tbaa.struct !40
Rewriting alloca partition [8,16) to:   %agg.tmp.sroa.2 = alloca i64
  rewriting split [0,16) slice #1 (splittable)
    original:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !39, !tbaa.struct !40
          to:   store i64 %agg.tmp.sroa.2.0.copyload, i64* %agg.tmp.sroa.2, align 8, !dbg !39, !tbaa.struct !40
  rewriting [8,16) slice #2
    original:   %32 = load i64, i64* %31, align 8, !dbg !44
          to:   %agg.tmp.sroa.2.8.load = load i64, i64* %agg.tmp.sroa.2, !dbg !44
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %32 = load i64, i64* %31, align 8, !dbg !44
Deleting dead instruction:   %31 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %28, i32 0, i32 1, !dbg !44
Deleting dead instruction:   call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false), !dbg !39, !tbaa.struct !40
Deleting dead instruction:   %27 = bitcast %struct.timespec* %time1 to i8*, !dbg !39
Deleting dead instruction:   %26 = bitcast %struct.timespec* %agg.tmp to i8*, !dbg !39
Deleting dead instruction:   %28 = load i64, i64* %27, align 8, !dbg !44
Deleting dead instruction:   %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0, !dbg !44
Deleting dead instruction:   %26 = bitcast %struct.timespec* %agg.tmp to { i64, i64 }*, !dbg !44
Deleting dead instruction:   %agg.tmp = alloca %struct.timespec, align 8
SROA alloca:   %elapsedf = alloca double, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %elapsedf = alloca double, align 8
  [0,8) slice #0
    used by:   store double %call28, double* %elapsedf, align 8, !dbg !45, !tbaa !46
  [0,8) slice #1
    used by:   %26 = load double, double* %elapsedf, align 8, !dbg !49, !tbaa !46
  [0,8) slice #2 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #3, !dbg !38
  [0,8) slice #3 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #3, !dbg !57
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %elapsedf = alloca double, align 8
  rewriting [0,8) slice #0
    original:   store double %call28, double* %elapsedf, align 8, !dbg !45, !tbaa !46
          to:   store double %call28, double* %elapsedf, align 8, !dbg !45, !tbaa !46
  rewriting [0,8) slice #1
    original:   %26 = load double, double* %elapsedf, align 8, !dbg !49, !tbaa !46
          to:   %elapsedf.0. = load double, double* %elapsedf, align 8, !dbg !49, !tbaa !46
  rewriting [0,8) slice #2 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #3, !dbg !38
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %elapsedf.0..sroa_cast), !dbg !38
  rewriting [0,8) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #3, !dbg !57
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %elapsedf.0..sroa_cast38), !dbg !57
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %28) #3, !dbg !57
Deleting dead instruction:   %28 = bitcast double* %elapsedf to i8*, !dbg !57
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %25) #3, !dbg !38
Deleting dead instruction:   %25 = bitcast double* %elapsedf to i8*, !dbg !38
Deleting dead instruction:   %25 = load double, double* %elapsedf, align 8, !dbg !49, !tbaa !46
Deleting dead instruction:   store double %call28, double* %elapsedf, align 8, !dbg !45, !tbaa !46
SROA alloca:   %time2 = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %time2 = alloca %struct.timespec, align 8
  [0,16) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %19) #3, !dbg !36
  [0,16) slice #1 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %26) #3, !dbg !57
  [0,8) slice #2 (splittable)
    used by:   store i64 %22, i64* %21, align 8, !dbg !37
  [0,8) slice #3 (splittable)
    used by:   %agg.tmp27.sroa.0.0.copyload = load i64, i64* %agg.tmp27.sroa.0.0..sroa_idx, align 8, !dbg !43, !tbaa.struct !40
  [8,16) slice #4 (splittable)
    used by:   store i64 %24, i64* %23, align 8, !dbg !37
  [8,16) slice #5 (splittable)
    used by:   %agg.tmp27.sroa.2.0.copyload = load i64, i64* %agg.tmp27.sroa.2.0..sroa_idx36, align 8, !dbg !43, !tbaa.struct !40
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %time2.sroa.0 = alloca i64
  rewriting [0,8) slice #0
    original:   store i64 %22, i64* %21, align 8, !dbg !37
          to:   store i64 %22, i64* %time2.sroa.0, !dbg !37
  rewriting [0,8) slice #1
    original:   %agg.tmp27.sroa.0.0.copyload = load i64, i64* %agg.tmp27.sroa.0.0..sroa_idx, align 8, !dbg !43, !tbaa.struct !40
          to:   %time2.sroa.0.0.agg.tmp27.sroa.0.0.copyload = load i64, i64* %time2.sroa.0, !dbg !43, !tbaa.struct !40
  rewriting split [0,16) slice #2 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %19) #3, !dbg !36
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %time2.sroa.0.0..sroa_cast), !dbg !36
  rewriting split [0,16) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %26) #3, !dbg !57
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %time2.sroa.0.0..sroa_cast39), !dbg !57
Rewriting alloca partition [8,16) to:   %time2.sroa.4 = alloca i64
  rewriting split [0,16) slice #2 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %19) #3, !dbg !36
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %time2.sroa.4.0..sroa_cast), !dbg !36
  rewriting split [0,16) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %26) #3, !dbg !57
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %time2.sroa.4.0..sroa_cast40), !dbg !57
  rewriting [8,16) slice #4
    original:   store i64 %24, i64* %23, align 8, !dbg !37
          to:   store i64 %24, i64* %time2.sroa.4, !dbg !37
  rewriting [8,16) slice #5
    original:   %agg.tmp27.sroa.2.0.copyload = load i64, i64* %agg.tmp27.sroa.2.0..sroa_idx36, align 8, !dbg !43, !tbaa.struct !40
          to:   %time2.sroa.4.8.load = load i64, i64* %time2.sroa.4, !dbg !43
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %agg.tmp27.sroa.2.0.copyload = load i64, i64* %agg.tmp27.sroa.2.0..sroa_idx36, align 8, !dbg !43, !tbaa.struct !40
Deleting dead instruction:   %agg.tmp27.sroa.2.0..sroa_idx36 = getelementptr inbounds %struct.timespec, %struct.timespec* %time2, i64 0, i32 1, !dbg !43
Deleting dead instruction:   store i64 %24, i64* %23, align 8, !dbg !37
Deleting dead instruction:   %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %20, i32 0, i32 1, !dbg !37
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %25) #3, !dbg !57
Deleting dead instruction:   %25 = bitcast %struct.timespec* %time2 to i8*, !dbg !57
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %19) #3, !dbg !36
Deleting dead instruction:   %19 = bitcast %struct.timespec* %time2 to i8*, !dbg !36
Deleting dead instruction:   %agg.tmp27.sroa.0.0.copyload = load i64, i64* %agg.tmp27.sroa.0.0..sroa_idx, align 8, !dbg !43, !tbaa.struct !40
Deleting dead instruction:   %agg.tmp27.sroa.0.0..sroa_idx = getelementptr inbounds %struct.timespec, %struct.timespec* %time2, i64 0, i32 0, !dbg !43
Deleting dead instruction:   store i64 %21, i64* %20, align 8, !dbg !37
Deleting dead instruction:   %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %19, i32 0, i32 0, !dbg !37
Deleting dead instruction:   %19 = bitcast %struct.timespec* %time2 to { i64, i64 }*, !dbg !37
Deleting dead instruction:   %time2 = alloca %struct.timespec, align 8
SROA alloca:   %j = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %j = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #3, !dbg !58
  [0,4) slice #1 (splittable)
    used by:   store i32 0, i32* %j, align 4, !dbg !59, !tbaa !12
  [0,4) slice #2 (splittable)
    used by:   %24 = load i32, i32* %j, align 4, !dbg !60, !tbaa !12
  [0,4) slice #3 (splittable)
    used by:   %29 = load i32, i32* %j, align 4, !dbg !68, !tbaa !12
  [0,4) slice #4 (splittable)
    used by:   %32 = load i32, i32* %j, align 4, !dbg !72, !tbaa !12
  [0,4) slice #5 (splittable)
    used by:   %34 = load i32, i32* %j, align 4, !dbg !75, !tbaa !12
  [0,4) slice #6 (splittable)
    used by:   %37 = load i32, i32* %j, align 4, !dbg !77, !tbaa !12
  [0,4) slice #7 (splittable)
    used by:   %40 = load i32, i32* %j, align 4, !dbg !80, !tbaa !12
  [0,4) slice #8 (splittable)
    used by:   %43 = load i32, i32* %j, align 4, !dbg !82, !tbaa !12
  [0,4) slice #9 (splittable)
    used by:   %44 = load i32, i32* %j, align 4, !dbg !84, !tbaa !12
  [0,4) slice #10 (splittable)
    used by:   store i32 %inc, i32* %j, align 4, !dbg !84, !tbaa !12
  [0,4) slice #11 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #3, !dbg !63
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %j = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #3, !dbg !58
          to:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %j.0..sroa_cast), !dbg !58
  rewriting [0,4) slice #1 (splittable)
    original:   store i32 0, i32* %j, align 4, !dbg !59, !tbaa !12
          to:   store i32 0, i32* %j, align 4, !dbg !59, !tbaa !12
  rewriting [0,4) slice #2 (splittable)
    original:   %24 = load i32, i32* %j, align 4, !dbg !60, !tbaa !12
          to:   %j.0.load = load i32, i32* %j, align 4, !dbg !60
  rewriting [0,4) slice #3 (splittable)
    original:   %29 = load i32, i32* %j, align 4, !dbg !68, !tbaa !12
          to:   %j.0.load41 = load i32, i32* %j, align 4, !dbg !68
  rewriting [0,4) slice #4 (splittable)
    original:   %32 = load i32, i32* %j, align 4, !dbg !72, !tbaa !12
          to:   %j.0.load42 = load i32, i32* %j, align 4, !dbg !72
  rewriting [0,4) slice #5 (splittable)
    original:   %34 = load i32, i32* %j, align 4, !dbg !75, !tbaa !12
          to:   %j.0.load43 = load i32, i32* %j, align 4, !dbg !75
  rewriting [0,4) slice #6 (splittable)
    original:   %37 = load i32, i32* %j, align 4, !dbg !77, !tbaa !12
          to:   %j.0.load44 = load i32, i32* %j, align 4, !dbg !77
  rewriting [0,4) slice #7 (splittable)
    original:   %40 = load i32, i32* %j, align 4, !dbg !80, !tbaa !12
          to:   %j.0.load45 = load i32, i32* %j, align 4, !dbg !80
  rewriting [0,4) slice #8 (splittable)
    original:   %43 = load i32, i32* %j, align 4, !dbg !82, !tbaa !12
          to:   %j.0.load46 = load i32, i32* %j, align 4, !dbg !82
  rewriting [0,4) slice #9 (splittable)
    original:   %44 = load i32, i32* %j, align 4, !dbg !84, !tbaa !12
          to:   %j.0.load47 = load i32, i32* %j, align 4, !dbg !84
  rewriting [0,4) slice #10 (splittable)
    original:   store i32 %inc, i32* %j, align 4, !dbg !84, !tbaa !12
          to:   store i32 %inc, i32* %j, align 4, !dbg !84, !tbaa !12
  rewriting [0,4) slice #11 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #3, !dbg !63
          to:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %j.0..sroa_cast48), !dbg !63
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %26) #3, !dbg !63
Deleting dead instruction:   %26 = bitcast i32* %j to i8*, !dbg !63
Deleting dead instruction:   store i32 %inc, i32* %j, align 4, !dbg !84, !tbaa !12
Deleting dead instruction:   %43 = load i32, i32* %j, align 4, !dbg !84, !tbaa !12
Deleting dead instruction:   %42 = load i32, i32* %j, align 4, !dbg !82, !tbaa !12
Deleting dead instruction:   %39 = load i32, i32* %j, align 4, !dbg !80, !tbaa !12
Deleting dead instruction:   %36 = load i32, i32* %j, align 4, !dbg !77, !tbaa !12
Deleting dead instruction:   %33 = load i32, i32* %j, align 4, !dbg !75, !tbaa !12
Deleting dead instruction:   %31 = load i32, i32* %j, align 4, !dbg !72, !tbaa !12
Deleting dead instruction:   %28 = load i32, i32* %j, align 4, !dbg !68, !tbaa !12
Deleting dead instruction:   %24 = load i32, i32* %j, align 4, !dbg !60, !tbaa !12
Deleting dead instruction:   store i32 0, i32* %j, align 4, !dbg !59, !tbaa !12
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %23) #3, !dbg !58
Deleting dead instruction:   %23 = bitcast i32* %j to i8*, !dbg !58
SROA alloca:   %cleanup.dest.slot = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %cleanup.dest.slot = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   store i32 2, i32* %cleanup.dest.slot, align 4
  [0,4) slice #1 (splittable)
    used by:   store i32 5, i32* %cleanup.dest.slot, align 4
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %cleanup.dest.slot = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   store i32 2, i32* %cleanup.dest.slot, align 4
          to:   store i32 2, i32* %cleanup.dest.slot, align 4
  rewriting [0,4) slice #1 (splittable)
    original:   store i32 5, i32* %cleanup.dest.slot, align 4
          to:   store i32 5, i32* %cleanup.dest.slot, align 4
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   store i32 5, i32* %cleanup.dest.slot, align 4
Deleting dead instruction:   store i32 2, i32* %cleanup.dest.slot, align 4
SROA alloca:   %i = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %i = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !31
  [0,4) slice #1 (splittable)
    used by:   store i32 0, i32* %i, align 4, !dbg !32, !tbaa !12
  [0,4) slice #2 (splittable)
    used by:   %17 = load i32, i32* %i, align 4, !dbg !33, !tbaa !12
  [0,4) slice #3 (splittable)
    used by:   %24 = load i32, i32* %i, align 4, !dbg !64, !tbaa !12
  [0,4) slice #4 (splittable)
    used by:   store i32 %inc24, i32* %i, align 4, !dbg !64, !tbaa !12
  [0,4) slice #5 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #3, !dbg !35
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %i = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !31
          to:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %i.0..sroa_cast), !dbg !31
  rewriting [0,4) slice #1 (splittable)
    original:   store i32 0, i32* %i, align 4, !dbg !32, !tbaa !12
          to:   store i32 0, i32* %i, align 4, !dbg !32, !tbaa !12
  rewriting [0,4) slice #2 (splittable)
    original:   %17 = load i32, i32* %i, align 4, !dbg !33, !tbaa !12
          to:   %i.0.load = load i32, i32* %i, align 4, !dbg !33
  rewriting [0,4) slice #3 (splittable)
    original:   %24 = load i32, i32* %i, align 4, !dbg !64, !tbaa !12
          to:   %i.0.load49 = load i32, i32* %i, align 4, !dbg !64
  rewriting [0,4) slice #4 (splittable)
    original:   store i32 %inc24, i32* %i, align 4, !dbg !64, !tbaa !12
          to:   store i32 %inc24, i32* %i, align 4, !dbg !64, !tbaa !12
  rewriting [0,4) slice #5 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #3, !dbg !35
          to:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %i.0..sroa_cast50), !dbg !35
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %18) #3, !dbg !35
Deleting dead instruction:   %18 = bitcast i32* %i to i8*, !dbg !35
Deleting dead instruction:   store i32 %inc24, i32* %i, align 4, !dbg !64, !tbaa !12
Deleting dead instruction:   %23 = load i32, i32* %i, align 4, !dbg !64, !tbaa !12
Deleting dead instruction:   %17 = load i32, i32* %i, align 4, !dbg !33, !tbaa !12
Deleting dead instruction:   store i32 0, i32* %i, align 4, !dbg !32, !tbaa !12
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %16) #3, !dbg !31
Deleting dead instruction:   %16 = bitcast i32* %i to i8*, !dbg !31
SROA alloca:   %time1 = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %time1 = alloca %struct.timespec, align 8
  [0,16) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %10) #3, !dbg !29
  [0,16) slice #1 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %19) #3, !dbg !57
  [0,8) slice #2 (splittable)
    used by:   store i64 %13, i64* %12, align 8, !dbg !30
  [0,8) slice #3 (splittable)
    used by:   %agg.tmp.sroa.0.0.copyload = load i64, i64* %agg.tmp.sroa.0.0..sroa_idx, align 8, !dbg !39, !tbaa.struct !40
  [8,16) slice #4 (splittable)
    used by:   store i64 %15, i64* %14, align 8, !dbg !30
  [8,16) slice #5 (splittable)
    used by:   %agg.tmp.sroa.2.0.copyload = load i64, i64* %agg.tmp.sroa.2.0..sroa_idx37, align 8, !dbg !39, !tbaa.struct !40
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %time1.sroa.0 = alloca i64
  rewriting [0,8) slice #0
    original:   store i64 %13, i64* %12, align 8, !dbg !30
          to:   store i64 %13, i64* %time1.sroa.0, !dbg !30
  rewriting [0,8) slice #1
    original:   %agg.tmp.sroa.0.0.copyload = load i64, i64* %agg.tmp.sroa.0.0..sroa_idx, align 8, !dbg !39, !tbaa.struct !40
          to:   %time1.sroa.0.0.agg.tmp.sroa.0.0.copyload = load i64, i64* %time1.sroa.0, !dbg !39, !tbaa.struct !40
  rewriting split [0,16) slice #2 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %10) #3, !dbg !29
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %time1.sroa.0.0..sroa_cast), !dbg !29
  rewriting split [0,16) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %19) #3, !dbg !57
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %time1.sroa.0.0..sroa_cast51), !dbg !57
Rewriting alloca partition [8,16) to:   %time1.sroa.4 = alloca i64
  rewriting split [0,16) slice #2 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %10) #3, !dbg !29
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %time1.sroa.4.0..sroa_cast), !dbg !29
  rewriting split [0,16) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %19) #3, !dbg !57
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %time1.sroa.4.0..sroa_cast52), !dbg !57
  rewriting [8,16) slice #4
    original:   store i64 %15, i64* %14, align 8, !dbg !30
          to:   store i64 %15, i64* %time1.sroa.4, !dbg !30
  rewriting [8,16) slice #5
    original:   %agg.tmp.sroa.2.0.copyload = load i64, i64* %agg.tmp.sroa.2.0..sroa_idx37, align 8, !dbg !39, !tbaa.struct !40
          to:   %time1.sroa.4.8.load = load i64, i64* %time1.sroa.4, !dbg !39
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %agg.tmp.sroa.2.0.copyload = load i64, i64* %agg.tmp.sroa.2.0..sroa_idx37, align 8, !dbg !39, !tbaa.struct !40
Deleting dead instruction:   %agg.tmp.sroa.2.0..sroa_idx37 = getelementptr inbounds %struct.timespec, %struct.timespec* %time1, i64 0, i32 1, !dbg !39
Deleting dead instruction:   store i64 %15, i64* %14, align 8, !dbg !30
Deleting dead instruction:   %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !30
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 16, i8* %18) #3, !dbg !57
Deleting dead instruction:   %18 = bitcast %struct.timespec* %time1 to i8*, !dbg !57
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 16, i8* %10) #3, !dbg !29
Deleting dead instruction:   %10 = bitcast %struct.timespec* %time1 to i8*, !dbg !29
Deleting dead instruction:   %agg.tmp.sroa.0.0.copyload = load i64, i64* %agg.tmp.sroa.0.0..sroa_idx, align 8, !dbg !39, !tbaa.struct !40
Deleting dead instruction:   %agg.tmp.sroa.0.0..sroa_idx = getelementptr inbounds %struct.timespec, %struct.timespec* %time1, i64 0, i32 0, !dbg !39
Deleting dead instruction:   store i64 %12, i64* %11, align 8, !dbg !30
Deleting dead instruction:   %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0, !dbg !30
Deleting dead instruction:   %10 = bitcast %struct.timespec* %time1 to { i64, i64 }*, !dbg !30
Deleting dead instruction:   %time1 = alloca %struct.timespec, align 8
SROA alloca:   %N.addr = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %N.addr = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   store i32 %N, i32* %N.addr, align 4, !tbaa !12
  [0,4) slice #1 (splittable)
    used by:   %0 = load i32, i32* %N.addr, align 4, !dbg !14, !tbaa !12
  [0,4) slice #2 (splittable)
    used by:   %15 = load i32, i32* %N.addr, align 4, !dbg !61, !tbaa !12
  [0,4) slice #3 (splittable)
    used by:   %14 = load i32, i32* %N.addr, align 4, !dbg !52, !tbaa !12
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %N.addr = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   store i32 %N, i32* %N.addr, align 4, !tbaa !12
          to:   store i32 %N, i32* %N.addr, align 4, !tbaa !12
  rewriting [0,4) slice #1 (splittable)
    original:   %0 = load i32, i32* %N.addr, align 4, !dbg !14, !tbaa !12
          to:   %N.addr.0.load = load i32, i32* %N.addr, align 4, !dbg !14
  rewriting [0,4) slice #2 (splittable)
    original:   %15 = load i32, i32* %N.addr, align 4, !dbg !61, !tbaa !12
          to:   %N.addr.0.load53 = load i32, i32* %N.addr, align 4, !dbg !61
  rewriting [0,4) slice #3 (splittable)
    original:   %14 = load i32, i32* %N.addr, align 4, !dbg !52, !tbaa !12
          to:   %N.addr.0.load54 = load i32, i32* %N.addr, align 4, !dbg !52
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %14 = load i32, i32* %N.addr, align 4, !dbg !52, !tbaa !12
Deleting dead instruction:   %14 = load i32, i32* %N.addr, align 4, !dbg !61, !tbaa !12
Deleting dead instruction:   %0 = load i32, i32* %N.addr, align 4, !dbg !14, !tbaa !12
Deleting dead instruction:   store i32 %N, i32* %N.addr, align 4, !tbaa !12
SROA alloca:   %c.addr = alloca float*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %c.addr = alloca float*, align 8
  [0,8) slice #0
    used by:   store float* %c, float** %c.addr, align 8, !tbaa !8
  [0,8) slice #1
    used by:   %6 = load float*, float** %c.addr, align 8, !dbg !25, !tbaa !8
  [0,8) slice #2
    used by:   store float* %8, float** %c.addr, align 8, !dbg !28, !tbaa !8
  [0,8) slice #3
    used by:   %15 = load float*, float** %c.addr, align 8, !dbg !71, !tbaa !8
  [0,8) slice #4
    used by:   %22 = load float*, float** %c.addr, align 8, !dbg !81, !tbaa !8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %c.addr = alloca float*, align 8
  rewriting [0,8) slice #0
    original:   store float* %c, float** %c.addr, align 8, !tbaa !8
          to:   store float* %c, float** %c.addr, align 8, !tbaa !8
  rewriting [0,8) slice #1
    original:   %6 = load float*, float** %c.addr, align 8, !dbg !25, !tbaa !8
          to:   %c.addr.0. = load float*, float** %c.addr, align 8, !dbg !25, !tbaa !8
  rewriting [0,8) slice #2
    original:   store float* %8, float** %c.addr, align 8, !dbg !28, !tbaa !8
          to:   store float* %8, float** %c.addr, align 8, !dbg !28, !tbaa !8
  rewriting [0,8) slice #3
    original:   %15 = load float*, float** %c.addr, align 8, !dbg !71, !tbaa !8
          to:   %c.addr.0.55 = load float*, float** %c.addr, align 8, !dbg !71, !tbaa !8
  rewriting [0,8) slice #4
    original:   %22 = load float*, float** %c.addr, align 8, !dbg !81, !tbaa !8
          to:   %c.addr.0.56 = load float*, float** %c.addr, align 8, !dbg !81, !tbaa !8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %22 = load float*, float** %c.addr, align 8, !dbg !81, !tbaa !8
Deleting dead instruction:   %15 = load float*, float** %c.addr, align 8, !dbg !71, !tbaa !8
Deleting dead instruction:   store float* %8, float** %c.addr, align 8, !dbg !28, !tbaa !8
Deleting dead instruction:   %6 = load float*, float** %c.addr, align 8, !dbg !25, !tbaa !8
Deleting dead instruction:   store float* %c, float** %c.addr, align 8, !tbaa !8
SROA alloca:   %b.addr = alloca float*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %b.addr = alloca float*, align 8
  [0,8) slice #0
    used by:   store float* %b, float** %b.addr, align 8, !tbaa !8
  [0,8) slice #1
    used by:   %3 = load float*, float** %b.addr, align 8, !dbg !21, !tbaa !8
  [0,8) slice #2
    used by:   store float* %5, float** %b.addr, align 8, !dbg !24, !tbaa !8
  [0,8) slice #3
    used by:   %14 = load float*, float** %b.addr, align 8, !dbg !74, !tbaa !8
  [0,8) slice #4
    used by:   %18 = load float*, float** %b.addr, align 8, !dbg !79, !tbaa !8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %b.addr = alloca float*, align 8
  rewriting [0,8) slice #0
    original:   store float* %b, float** %b.addr, align 8, !tbaa !8
          to:   store float* %b, float** %b.addr, align 8, !tbaa !8
  rewriting [0,8) slice #1
    original:   %3 = load float*, float** %b.addr, align 8, !dbg !21, !tbaa !8
          to:   %b.addr.0. = load float*, float** %b.addr, align 8, !dbg !21, !tbaa !8
  rewriting [0,8) slice #2
    original:   store float* %5, float** %b.addr, align 8, !dbg !24, !tbaa !8
          to:   store float* %5, float** %b.addr, align 8, !dbg !24, !tbaa !8
  rewriting [0,8) slice #3
    original:   %14 = load float*, float** %b.addr, align 8, !dbg !74, !tbaa !8
          to:   %b.addr.0.57 = load float*, float** %b.addr, align 8, !dbg !74, !tbaa !8
  rewriting [0,8) slice #4
    original:   %18 = load float*, float** %b.addr, align 8, !dbg !79, !tbaa !8
          to:   %b.addr.0.58 = load float*, float** %b.addr, align 8, !dbg !79, !tbaa !8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %18 = load float*, float** %b.addr, align 8, !dbg !79, !tbaa !8
Deleting dead instruction:   %14 = load float*, float** %b.addr, align 8, !dbg !74, !tbaa !8
Deleting dead instruction:   store float* %5, float** %b.addr, align 8, !dbg !24, !tbaa !8
Deleting dead instruction:   %3 = load float*, float** %b.addr, align 8, !dbg !21, !tbaa !8
Deleting dead instruction:   store float* %b, float** %b.addr, align 8, !tbaa !8
SROA alloca:   %a.addr = alloca float*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %a.addr = alloca float*, align 8
  [0,8) slice #0
    used by:   store float* %a, float** %a.addr, align 8, !tbaa !8
  [0,8) slice #1
    used by:   %0 = load float*, float** %a.addr, align 8, !dbg !17, !tbaa !8
  [0,8) slice #2
    used by:   store float* %2, float** %a.addr, align 8, !dbg !20, !tbaa !8
  [0,8) slice #3
    used by:   %11 = load float*, float** %a.addr, align 8, !dbg !67, !tbaa !8
  [0,8) slice #4
    used by:   %14 = load float*, float** %a.addr, align 8, !dbg !76, !tbaa !8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %a.addr = alloca float*, align 8
  rewriting [0,8) slice #0
    original:   store float* %a, float** %a.addr, align 8, !tbaa !8
          to:   store float* %a, float** %a.addr, align 8, !tbaa !8
  rewriting [0,8) slice #1
    original:   %0 = load float*, float** %a.addr, align 8, !dbg !17, !tbaa !8
          to:   %a.addr.0. = load float*, float** %a.addr, align 8, !dbg !17, !tbaa !8
  rewriting [0,8) slice #2
    original:   store float* %2, float** %a.addr, align 8, !dbg !20, !tbaa !8
          to:   store float* %2, float** %a.addr, align 8, !dbg !20, !tbaa !8
  rewriting [0,8) slice #3
    original:   %11 = load float*, float** %a.addr, align 8, !dbg !67, !tbaa !8
          to:   %a.addr.0.59 = load float*, float** %a.addr, align 8, !dbg !67, !tbaa !8
  rewriting [0,8) slice #4
    original:   %14 = load float*, float** %a.addr, align 8, !dbg !76, !tbaa !8
          to:   %a.addr.0.60 = load float*, float** %a.addr, align 8, !dbg !76, !tbaa !8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %14 = load float*, float** %a.addr, align 8, !dbg !76, !tbaa !8
Deleting dead instruction:   %11 = load float*, float** %a.addr, align 8, !dbg !67, !tbaa !8
Deleting dead instruction:   store float* %2, float** %a.addr, align 8, !dbg !20, !tbaa !8
Deleting dead instruction:   %0 = load float*, float** %a.addr, align 8, !dbg !17, !tbaa !8
Deleting dead instruction:   store float* %a, float** %a.addr, align 8, !tbaa !8
Promoting allocas with mem2reg...
EarlyCSE considering assumption:   call void @llvm.assume(i1 %cmp), !dbg !9
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond), !dbg !11
EarlyCSE Simplify:   %1 = bitcast i8* %0 to float*, !dbg !12  to: float* %a
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond3), !dbg !13
EarlyCSE Simplify:   %2 = bitcast i8* %1 to float*, !dbg !14  to: float* %b
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond6), !dbg !15
EarlyCSE Simplify:   %3 = bitcast i8* %2 to float*, !dbg !16  to: float* %c
EarlyCSE CVP: Add conditional value for 'cmp7' as i1 true in for.body
EarlyCSE CVP: Add conditional value for 'cmp9' as i1 true in for.body11
EarlyCSE CSE:   %idxprom12 = sext i32 %j.0 to i64, !dbg !42  to:   %idxprom = sext i32 %j.0 to i64, !dbg !37
EarlyCSE CSE:   %idxprom14 = sext i32 %j.0 to i64, !dbg !44  to:   %idxprom = sext i32 %j.0 to i64, !dbg !37
EarlyCSE CSE:   %idxprom16 = sext i32 %j.0 to i64, !dbg !45  to:   %idxprom = sext i32 %j.0 to i64, !dbg !37
EarlyCSE CSE:   %arrayidx17 = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !45  to:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37
EarlyCSE CVP: Add conditional value for 'cmp18' as i1 true in if.then
EarlyCSE CSE:   %idxprom19 = sext i32 %j.0 to i64, !dbg !47  to:   %idxprom = sext i32 %j.0 to i64, !dbg !37
EarlyCSE CSE:   %arrayidx20 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !47  to:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44
EarlyCSE CSE LOAD:   %10 = load float, float* %arrayidx15, align 4, !dbg !47, !tbaa !38  to:   %8 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38
EarlyCSE CSE:   %idxprom21 = sext i32 %j.0 to i64, !dbg !47  to:   %idxprom = sext i32 %j.0 to i64, !dbg !37
EarlyCSE CSE:   %arrayidx22 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !47  to:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42
EarlyCSE CVP: Add conditional value for 'cmp9' as i1 false in for.cond.cleanup10
EarlyCSE CVP: Add conditional value for 'cmp7' as i1 false in for.cond.cleanup
	discovered a new reachable node %entry
	discovered a new reachable node %cond.true
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
Looking to fold cond.true into cond.end
Killing Trivial BB: 

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !16
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
SROA function: _ZL7gettimev
SROA alloca:   %r = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %r = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3, !dbg !9
  [0,4) slice #1 (splittable)
    used by:   store i32 %call, i32* %r, align 4, !dbg !11, !tbaa !12
  [0,4) slice #2 (splittable)
    used by:   %1 = load i32, i32* %r, align 4, !dbg !16, !tbaa !12
  [0,4) slice #3 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %2) #3, !dbg !17
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %r = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3, !dbg !9
          to:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %r.0..sroa_cast), !dbg !9
  rewriting [0,4) slice #1 (splittable)
    original:   store i32 %call, i32* %r, align 4, !dbg !11, !tbaa !12
          to:   store i32 %call, i32* %r, align 4, !dbg !11, !tbaa !12
  rewriting [0,4) slice #2 (splittable)
    original:   %1 = load i32, i32* %r, align 4, !dbg !16, !tbaa !12
          to:   %r.0.load = load i32, i32* %r, align 4, !dbg !16
  rewriting [0,4) slice #3 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %2) #3, !dbg !17
          to:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %r.0..sroa_cast1), !dbg !17
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 4, i8* %2) #3, !dbg !17
Deleting dead instruction:   %2 = bitcast i32* %r to i8*, !dbg !17
Deleting dead instruction:   %1 = load i32, i32* %r, align 4, !dbg !16, !tbaa !12
Deleting dead instruction:   store i32 %call, i32* %r, align 4, !dbg !11, !tbaa !12
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 4, i8* %0) #3, !dbg !9
Deleting dead instruction:   %0 = bitcast i32* %r to i8*, !dbg !9
SROA alloca:   %retval = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
    original:   %1 = load { i64, i64 }, { i64, i64 }* %0, align 8, !dbg !17
          to:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !17
          to:   %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !17
Can't analyze slices for alloca:   %retval = alloca %struct.timespec, align 8
  A pointer to this alloca escaped by:
    %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #3, !dbg !10
Promoting allocas with mem2reg...
EarlyCSE CVP: Add conditional value for 'cmp' as i1 true in cond.end
EarlyCSE CVP: Add conditional value for 'cmp' as i1 false in cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZL5tdiff8timespecS_
SROA alloca:   %end = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %end = alloca %struct.timespec, align 8
  [0,8) slice #0 (splittable)
    used by:   store i64 %end.coerce0, i64* %4, align 8
  [0,8) slice #1 (splittable)
    used by:   %6 = load i64, i64* %tv_sec, align 8, !dbg !9, !tbaa !10
  [8,16) slice #2 (splittable)
    used by:   store i64 %end.coerce1, i64* %5, align 8
  [8,16) slice #3 (splittable)
    used by:   %8 = load i64, i64* %tv_nsec, align 8, !dbg !18, !tbaa !19
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %end.sroa.0 = alloca i64
  rewriting [0,8) slice #0 (splittable)
    original:   store i64 %end.coerce0, i64* %4, align 8
          to:   store i64 %end.coerce0, i64* %end.sroa.0
  rewriting [0,8) slice #1 (splittable)
    original:   %6 = load i64, i64* %tv_sec, align 8, !dbg !9, !tbaa !10
          to:   %end.sroa.0.0.load = load i64, i64* %end.sroa.0, !dbg !9
Rewriting alloca partition [8,16) to:   %end.sroa.2 = alloca i64
  rewriting [8,16) slice #2 (splittable)
    original:   store i64 %end.coerce1, i64* %5, align 8
          to:   store i64 %end.coerce1, i64* %end.sroa.2
  rewriting [8,16) slice #3 (splittable)
    original:   %8 = load i64, i64* %tv_nsec, align 8, !dbg !18, !tbaa !19
          to:   %end.sroa.2.8.load = load i64, i64* %end.sroa.2, !dbg !18
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %8 = load i64, i64* %tv_nsec, align 8, !dbg !18, !tbaa !19
Deleting dead instruction:   %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %end, i32 0, i32 1, !dbg !18
Deleting dead instruction:   store i64 %end.coerce1, i64* %5, align 8
Deleting dead instruction:   %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
Deleting dead instruction:   %5 = load i64, i64* %tv_sec, align 8, !dbg !9, !tbaa !10
Deleting dead instruction:   %tv_sec = getelementptr inbounds %struct.timespec, %struct.timespec* %end, i32 0, i32 0, !dbg !9
Deleting dead instruction:   store i64 %end.coerce0, i64* %4, align 8
Deleting dead instruction:   %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
Deleting dead instruction:   %3 = bitcast %struct.timespec* %end to { i64, i64 }*
Deleting dead instruction:   %end = alloca %struct.timespec, align 8
SROA alloca:   %start = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %start = alloca %struct.timespec, align 8
  [0,8) slice #0 (splittable)
    used by:   store i64 %start.coerce0, i64* %1, align 8
  [0,8) slice #1 (splittable)
    used by:   %3 = load i64, i64* %tv_sec1, align 8, !dbg !10, !tbaa !11
  [8,16) slice #2 (splittable)
    used by:   store i64 %start.coerce1, i64* %2, align 8
  [8,16) slice #3 (splittable)
    used by:   %4 = load i64, i64* %tv_nsec2, align 8, !dbg !19, !tbaa !20
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %start.sroa.0 = alloca i64
  rewriting [0,8) slice #0 (splittable)
    original:   store i64 %start.coerce0, i64* %1, align 8
          to:   store i64 %start.coerce0, i64* %start.sroa.0
  rewriting [0,8) slice #1 (splittable)
    original:   %3 = load i64, i64* %tv_sec1, align 8, !dbg !10, !tbaa !11
          to:   %start.sroa.0.0.load = load i64, i64* %start.sroa.0, !dbg !10
Rewriting alloca partition [8,16) to:   %start.sroa.2 = alloca i64
  rewriting [8,16) slice #2 (splittable)
    original:   store i64 %start.coerce1, i64* %2, align 8
          to:   store i64 %start.coerce1, i64* %start.sroa.2
  rewriting [8,16) slice #3 (splittable)
    original:   %4 = load i64, i64* %tv_nsec2, align 8, !dbg !19, !tbaa !20
          to:   %start.sroa.2.8.load = load i64, i64* %start.sroa.2, !dbg !19
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %4 = load i64, i64* %tv_nsec2, align 8, !dbg !19, !tbaa !20
Deleting dead instruction:   %tv_nsec2 = getelementptr inbounds %struct.timespec, %struct.timespec* %start, i32 0, i32 1, !dbg !19
Deleting dead instruction:   store i64 %start.coerce1, i64* %2, align 8
Deleting dead instruction:   %2 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1
Deleting dead instruction:   %2 = load i64, i64* %tv_sec1, align 8, !dbg !10, !tbaa !11
Deleting dead instruction:   %tv_sec1 = getelementptr inbounds %struct.timespec, %struct.timespec* %start, i32 0, i32 0, !dbg !10
Deleting dead instruction:   store i64 %start.coerce0, i64* %1, align 8
Deleting dead instruction:   %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0
Deleting dead instruction:   %0 = bitcast %struct.timespec* %start to { i64, i64 }*
Deleting dead instruction:   %start = alloca %struct.timespec, align 8
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
SROA function: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
SROA alloca:   %__s.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__s.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
  [0,8) slice #2
    used by:   %6 = load i8*, i8** %__s.addr, align 8, !dbg !20, !tbaa !9
  [0,8) slice #3
    used by:   %7 = load i8*, i8** %__s.addr, align 8, !dbg !21, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__s.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
          to:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
          to:   %__s.addr.0. = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
  rewriting [0,8) slice #2
    original:   %6 = load i8*, i8** %__s.addr, align 8, !dbg !20, !tbaa !9
          to:   %__s.addr.0.2 = load i8*, i8** %__s.addr, align 8, !dbg !20, !tbaa !9
  rewriting [0,8) slice #3
    original:   %7 = load i8*, i8** %__s.addr, align 8, !dbg !21, !tbaa !9
          to:   %__s.addr.0.3 = load i8*, i8** %__s.addr, align 8, !dbg !21, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %7 = load i8*, i8** %__s.addr, align 8, !dbg !21, !tbaa !9
Deleting dead instruction:   %6 = load i8*, i8** %__s.addr, align 8, !dbg !20, !tbaa !9
Deleting dead instruction:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
Deleting dead instruction:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
SROA alloca:   %__out.addr = alloca %"class.std::basic_ostream"*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__out.addr = alloca %"class.std::basic_ostream"*, align 8
  [0,8) slice #0
    used by:   store %"class.std::basic_ostream"* %__out, %"class.std::basic_ostream"** %__out.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %0 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !14, !tbaa !9
  [0,8) slice #2
    used by:   %5 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !24, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__out.addr = alloca %"class.std::basic_ostream"*, align 8
  rewriting [0,8) slice #0
    original:   store %"class.std::basic_ostream"* %__out, %"class.std::basic_ostream"** %__out.addr, align 8, !tbaa !9
          to:   store %"class.std::basic_ostream"* %__out, %"class.std::basic_ostream"** %__out.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %0 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !14, !tbaa !9
          to:   %__out.addr.0. = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !14, !tbaa !9
  rewriting [0,8) slice #2
    original:   %5 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !24, !tbaa !9
          to:   %__out.addr.0.4 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !24, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %5 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !24, !tbaa !9
Deleting dead instruction:   %0 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %__out.addr, align 8, !dbg !14, !tbaa !9
Deleting dead instruction:   store %"class.std::basic_ostream"* %__out, %"class.std::basic_ostream"** %__out.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
EarlyCSE CVP: Add conditional value for 'tobool' as i1 true in if.else
EarlyCSE CVP: Add conditional value for 'tobool' as i1 false in if.then
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZNSolsEd
SROA alloca:   %__f.addr = alloca double, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__f.addr = alloca double, align 8
  [0,8) slice #0
    used by:   store double %__f, double* %__f.addr, align 8, !tbaa !13
  [0,8) slice #1
    used by:   %0 = load double, double* %__f.addr, align 8, !dbg !15, !tbaa !13
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__f.addr = alloca double, align 8
  rewriting [0,8) slice #0
    original:   store double %__f, double* %__f.addr, align 8, !tbaa !13
          to:   store double %__f, double* %__f.addr, align 8, !tbaa !13
  rewriting [0,8) slice #1
    original:   %0 = load double, double* %__f.addr, align 8, !dbg !15, !tbaa !13
          to:   %__f.addr.0. = load double, double* %__f.addr, align 8, !dbg !15, !tbaa !13
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load double, double* %__f.addr, align 8, !dbg !15, !tbaa !13
Deleting dead instruction:   store double %__f, double* %__f.addr, align 8, !tbaa !13
SROA alloca:   %this.addr = alloca %"class.std::basic_ostream"*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %this.addr = alloca %"class.std::basic_ostream"*, align 8
  [0,8) slice #0
    used by:   store %"class.std::basic_ostream"* %this, %"class.std::basic_ostream"** %this.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %this1 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %this.addr, align 8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %this.addr = alloca %"class.std::basic_ostream"*, align 8
  rewriting [0,8) slice #0
    original:   store %"class.std::basic_ostream"* %this, %"class.std::basic_ostream"** %this.addr, align 8, !tbaa !9
          to:   store %"class.std::basic_ostream"* %this, %"class.std::basic_ostream"** %this.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %this1 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %this.addr, align 8
          to:   %this.addr.0.this1 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %this.addr, align 8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %this1 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %this.addr, align 8
Deleting dead instruction:   store %"class.std::basic_ostream"* %this, %"class.std::basic_ostream"** %this.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
SROA alloca:   %__state.addr = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %__state.addr = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   store i32 %__state, i32* %__state.addr, align 4, !tbaa !13
  [0,4) slice #1 (splittable)
    used by:   %0 = load i32, i32* %__state.addr, align 4, !dbg !16, !tbaa !13
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %__state.addr = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   store i32 %__state, i32* %__state.addr, align 4, !tbaa !13
          to:   store i32 %__state, i32* %__state.addr, align 4, !tbaa !13
  rewriting [0,4) slice #1 (splittable)
    original:   %0 = load i32, i32* %__state.addr, align 4, !dbg !16, !tbaa !13
          to:   %__state.addr.0.load = load i32, i32* %__state.addr, align 4, !dbg !16
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load i32, i32* %__state.addr, align 4, !dbg !16, !tbaa !13
Deleting dead instruction:   store i32 %__state, i32* %__state.addr, align 4, !tbaa !13
SROA alloca:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  [0,8) slice #0
    used by:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  rewriting [0,8) slice #0
    original:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
          to:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
          to:   %this.addr.0.this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
Deleting dead instruction:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %return
	discovered a new reachable node %if.end
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %return
	discovered a new reachable node %if.end
SROA function: _ZNSt11char_traitsIcE6lengthEPKc
SROA alloca:   %__s.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__s.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
  [0,8) slice #2
    used by:   %1 = load i8*, i8** %__s.addr, align 8, !dbg !15, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__s.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
          to:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
          to:   %__s.addr.0. = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
  rewriting [0,8) slice #2
    original:   %1 = load i8*, i8** %__s.addr, align 8, !dbg !15, !tbaa !9
          to:   %__s.addr.0.3 = load i8*, i8** %__s.addr, align 8, !dbg !15, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %1 = load i8*, i8** %__s.addr, align 8, !dbg !15, !tbaa !9
Deleting dead instruction:   %0 = load i8*, i8** %__s.addr, align 8, !dbg !13, !tbaa !9
Deleting dead instruction:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
SROA alloca:   %retval = alloca i64, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %retval = alloca i64, align 8
  [0,8) slice #0 (splittable)
    used by:   store i64 %call1, i64* %retval, align 8, !dbg !17
  [0,8) slice #1 (splittable)
    used by:   store i64 %call2, i64* %retval, align 8, !dbg !19
  [0,8) slice #2 (splittable)
    used by:   %0 = load i64, i64* %retval, align 8, !dbg !20
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %retval = alloca i64, align 8
  rewriting [0,8) slice #0 (splittable)
    original:   store i64 %call1, i64* %retval, align 8, !dbg !17
          to:   store i64 %call1, i64* %retval, align 8, !dbg !17
  rewriting [0,8) slice #1 (splittable)
    original:   store i64 %call2, i64* %retval, align 8, !dbg !19
          to:   store i64 %call2, i64* %retval, align 8, !dbg !19
  rewriting [0,8) slice #2 (splittable)
    original:   %0 = load i64, i64* %retval, align 8, !dbg !20
          to:   %retval.0.load = load i64, i64* %retval, align 8, !dbg !20
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load i64, i64* %retval, align 8, !dbg !20
Deleting dead instruction:   store i64 %call2, i64* %retval, align 8, !dbg !19
Deleting dead instruction:   store i64 %call1, i64* %retval, align 8, !dbg !17
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZStorSt12_Ios_IostateS_
SROA alloca:   %__b.addr = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %__b.addr = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   store i32 %__b, i32* %__b.addr, align 4, !tbaa !9
  [0,4) slice #1 (splittable)
    used by:   %1 = load i32, i32* %__b.addr, align 4, !dbg !14, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %__b.addr = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   store i32 %__b, i32* %__b.addr, align 4, !tbaa !9
          to:   store i32 %__b, i32* %__b.addr, align 4, !tbaa !9
  rewriting [0,4) slice #1 (splittable)
    original:   %1 = load i32, i32* %__b.addr, align 4, !dbg !14, !tbaa !9
          to:   %__b.addr.0.load = load i32, i32* %__b.addr, align 4, !dbg !14
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %1 = load i32, i32* %__b.addr, align 4, !dbg !14, !tbaa !9
Deleting dead instruction:   store i32 %__b, i32* %__b.addr, align 4, !tbaa !9
SROA alloca:   %__a.addr = alloca i32, align 4
  Rewriting FCA loads and stores...
Slices of alloca:   %__a.addr = alloca i32, align 4
  [0,4) slice #0 (splittable)
    used by:   store i32 %__a, i32* %__a.addr, align 4, !tbaa !9
  [0,4) slice #1 (splittable)
    used by:   %0 = load i32, i32* %__a.addr, align 4, !dbg !13, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,4) to:   %__a.addr = alloca i32, align 4
  rewriting [0,4) slice #0 (splittable)
    original:   store i32 %__a, i32* %__a.addr, align 4, !tbaa !9
          to:   store i32 %__a, i32* %__a.addr, align 4, !tbaa !9
  rewriting [0,4) slice #1 (splittable)
    original:   %0 = load i32, i32* %__a.addr, align 4, !dbg !13, !tbaa !9
          to:   %__a.addr.0.load = load i32, i32* %__a.addr, align 4, !dbg !13
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load i32, i32* %__a.addr, align 4, !dbg !13, !tbaa !9
Deleting dead instruction:   store i32 %__a, i32* %__a.addr, align 4, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
SROA alloca:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  [0,8) slice #0
    used by:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %this.addr = alloca %"class.std::basic_ios"*, align 8
  rewriting [0,8) slice #0
    original:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
          to:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
          to:   %this.addr.0.this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %this1 = load %"class.std::basic_ios"*, %"class.std::basic_ios"** %this.addr, align 8
Deleting dead instruction:   store %"class.std::basic_ios"* %this, %"class.std::basic_ios"** %this.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZStL19__constant_string_pIcEbPKT_
SROA alloca:   %__s.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__s.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__s.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
          to:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   store i8* %__s, i8** %__s.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %while.cond
	discovered a new reachable node %while.body
	discovered a new reachable node %while.end
	discovered a new reachable node %entry
	discovered a new reachable node %while.cond
	discovered a new reachable node %while.body
	discovered a new reachable node %while.end
SROA function: _ZN9__gnu_cxx11char_traitsIcE6lengthEPKc
SROA alloca:   %ref.tmp = alloca i8, align 1
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %ref.tmp = alloca i8, align 1
  A pointer to this alloca escaped by:
    %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !22
SROA alloca:   %__i = alloca i64, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__i = alloca i64, align 8
  [0,8) slice #0 (splittable)
    used by:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3, !dbg !13
  [0,8) slice #1 (splittable)
    used by:   store i64 0, i64* %__i, align 8, !dbg !14, !tbaa !15
  [0,8) slice #2 (splittable)
    used by:   %2 = load i64, i64* %__i, align 8, !dbg !19, !tbaa !15
  [0,8) slice #3 (splittable)
    used by:   %3 = load i64, i64* %__i, align 8, !dbg !24, !tbaa !15
  [0,8) slice #4 (splittable)
    used by:   store i64 %inc, i64* %__i, align 8, !dbg !25, !tbaa !15
  [0,8) slice #5 (splittable)
    used by:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #3, !dbg !28
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__i = alloca i64, align 8
  rewriting [0,8) slice #0 (splittable)
    original:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3, !dbg !13
          to:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %__i.0..sroa_cast), !dbg !13
  rewriting [0,8) slice #1 (splittable)
    original:   store i64 0, i64* %__i, align 8, !dbg !14, !tbaa !15
          to:   store i64 0, i64* %__i, align 8, !dbg !14, !tbaa !15
  rewriting [0,8) slice #2 (splittable)
    original:   %2 = load i64, i64* %__i, align 8, !dbg !19, !tbaa !15
          to:   %__i.0.load = load i64, i64* %__i, align 8, !dbg !19
  rewriting [0,8) slice #3 (splittable)
    original:   %3 = load i64, i64* %__i, align 8, !dbg !24, !tbaa !15
          to:   %__i.0.load1 = load i64, i64* %__i, align 8, !dbg !24
  rewriting [0,8) slice #4 (splittable)
    original:   store i64 %inc, i64* %__i, align 8, !dbg !25, !tbaa !15
          to:   store i64 %inc, i64* %__i, align 8, !dbg !25, !tbaa !15
  rewriting [0,8) slice #5 (splittable)
    original:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #3, !dbg !28
          to:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %__i.0..sroa_cast2), !dbg !28
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   call void @llvm.lifetime.end.p0i8(i64 8, i8* %4) #3, !dbg !28
Deleting dead instruction:   %4 = bitcast i64* %__i to i8*, !dbg !28
Deleting dead instruction:   store i64 %inc, i64* %__i, align 8, !dbg !25, !tbaa !15
Deleting dead instruction:   %3 = load i64, i64* %__i, align 8, !dbg !24, !tbaa !15
Deleting dead instruction:   %2 = load i64, i64* %__i, align 8, !dbg !19, !tbaa !15
Deleting dead instruction:   store i64 0, i64* %__i, align 8, !dbg !14, !tbaa !15
Deleting dead instruction:   call void @llvm.lifetime.start.p0i8(i64 8, i8* %0) #3, !dbg !13
Deleting dead instruction:   %0 = bitcast i64* %__i to i8*, !dbg !13
SROA alloca:   %__p.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__p.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__p, i8** %__p.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %0 = load i8*, i8** %__p.addr, align 8, !dbg !18, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__p.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__p, i8** %__p.addr, align 8, !tbaa !9
          to:   store i8* %__p, i8** %__p.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %0 = load i8*, i8** %__p.addr, align 8, !dbg !18, !tbaa !9
          to:   %__p.addr.0. = load i8*, i8** %__p.addr, align 8, !dbg !18, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load i8*, i8** %__p.addr, align 8, !dbg !18, !tbaa !9
Deleting dead instruction:   store i8* %__p, i8** %__p.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
EarlyCSE CVP: Add conditional value for 'lnot' as i1 true in while.body
EarlyCSE CVP: Add conditional value for 'lnot' as i1 false in while.end
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_
SROA alloca:   %__c2.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__c2.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__c2, i8** %__c2.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %2 = load i8*, i8** %__c2.addr, align 8, !dbg !15, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__c2.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__c2, i8** %__c2.addr, align 8, !tbaa !9
          to:   store i8* %__c2, i8** %__c2.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %2 = load i8*, i8** %__c2.addr, align 8, !dbg !15, !tbaa !9
          to:   %__c2.addr.0. = load i8*, i8** %__c2.addr, align 8, !dbg !15, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %2 = load i8*, i8** %__c2.addr, align 8, !dbg !15, !tbaa !9
Deleting dead instruction:   store i8* %__c2, i8** %__c2.addr, align 8, !tbaa !9
SROA alloca:   %__c1.addr = alloca i8*, align 8
  Rewriting FCA loads and stores...
Slices of alloca:   %__c1.addr = alloca i8*, align 8
  [0,8) slice #0
    used by:   store i8* %__c1, i8** %__c1.addr, align 8, !tbaa !9
  [0,8) slice #1
    used by:   %0 = load i8*, i8** %__c1.addr, align 8, !dbg !13, !tbaa !9
Pre-splitting loads and stores
  Searching for candidate loads and stores
Rewriting alloca partition [0,8) to:   %__c1.addr = alloca i8*, align 8
  rewriting [0,8) slice #0
    original:   store i8* %__c1, i8** %__c1.addr, align 8, !tbaa !9
          to:   store i8* %__c1, i8** %__c1.addr, align 8, !tbaa !9
  rewriting [0,8) slice #1
    original:   %0 = load i8*, i8** %__c1.addr, align 8, !dbg !13, !tbaa !9
          to:   %__c1.addr.0. = load i8*, i8** %__c1.addr, align 8, !dbg !13, !tbaa !9
  Speculating PHIs
  Speculating Selects
Deleting dead instruction:   %0 = load i8*, i8** %__c1.addr, align 8, !dbg !13, !tbaa !9
Deleting dead instruction:   store i8* %__c1, i8** %__c1.addr, align 8, !tbaa !9
Promoting allocas with mem2reg...
	discovered a new reachable node %entry
	discovered a new reachable node %entry
SROA function: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %return
	discovered a new reachable node %if.end
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %while.cond
	discovered a new reachable node %while.body
	discovered a new reachable node %while.end
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
Visiting   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19
Rename Stack is empty
Current DFS numbers are (1,16)
Rename Stack is empty
Current DFS numbers are (2,13)
Rename Stack Top DFS numbers are (2,13)
Current DFS numbers are (14,15)
Visiting   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18
Rename Stack is empty
Current DFS numbers are (1,16)
Rename Stack is empty
Current DFS numbers are (2,13)
Rename Stack Top DFS numbers are (2,13)
Current DFS numbers are (10,11)
Found replacement   %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20 for   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18 in   %inc24 = add nsw i32 %i.0, 1, !dbg !34
Rename Stack Top DFS numbers are (2,13)
Current DFS numbers are (14,15)
Visiting   %cmp9 = icmp slt i32 %j.0, %N, !dbg !32
Rename Stack is empty
Current DFS numbers are (3,12)
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (10,11)
Visiting   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18
Rename Stack is empty
Current DFS numbers are (3,12)
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (4,9)
Found replacement   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33 for   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18 in   %idxprom = sext i32 %j.0 to i64, !dbg !37
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (7,8)
Found replacement   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33 for   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18 in   %inc = add nsw i32 %j.0, 1, !dbg !49
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (10,11)
Visiting i32 %N
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (3,12)
Found replacement   %0 = call i32 @llvm.ssa.copy.93877264093848(i32 %N), !dbg !9 for i32 %N in   %cmp9 = icmp slt i32 %j.0, %N, !dbg !32
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (4,9)
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (10,11)
Rename Stack Top DFS numbers are (10,11)
Current DFS numbers are (14,15)
Found replacement   %0 = call i32 @llvm.ssa.copy.93877264093848(i32 %N), !dbg !9 for i32 %N in   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %N), !dbg !26
Visiting   %cmp18 = fcmp ogt float %9, %10, !dbg !46
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (5,6)
Visiting   %9 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack is empty
Current DFS numbers are (4,9)
Rename Stack Top DFS numbers are (4,9)
Current DFS numbers are (5,6)
Rename Stack Top DFS numbers are (5,6)
Current DFS numbers are (5,6)
Found replacement   %.0 = call float @llvm.ssa.copy.93877264093584(float %9), !dbg !44 for   %9 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38 in   store float %9, float* %arrayidx13, align 4, !dbg !47, !tbaa !38
Visiting   %cmp = icmp eq i32 %N, 1024, !dbg !8
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (0,17)
Found replacement   %1 = call i1 @llvm.ssa.copy.93877264093776(i1 %cmp), !dbg !9 for   %cmp = icmp eq i32 %N, 1024, !dbg !8 in   call void @llvm.assume(i1 %cmp), !dbg !9
Visiting   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (0,17)
Found replacement   %3 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond), !dbg !11 for   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11 in   call void @llvm.assume(i1 %maskcond), !dbg !11
Visiting   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (0,17)
Found replacement   %5 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond3), !dbg !13 for   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13 in   call void @llvm.assume(i1 %maskcond3), !dbg !13
Visiting   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15
Rename Stack is empty
Current DFS numbers are (0,17)
Rename Stack Top DFS numbers are (0,17)
Current DFS numbers are (0,17)
Found replacement   %7 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond6), !dbg !15 for   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15 in   call void @llvm.assume(i1 %maskcond6), !dbg !15
Marking Block Executable: entry
markOverdefined: float* %a
markOverdefined: float* %b
markOverdefined: float* %c
markOverdefined: i32 %N
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
Visiting   %cmp = icmp eq i32 %call, 0, !dbg !10
Rename Stack is empty
Current DFS numbers are (0,5)
Rename Stack is empty
Current DFS numbers are (1,2)
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (3,4)
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
Visiting   %tobool = icmp ne i8* %__s, null, !dbg !9
Rename Stack is empty
Current DFS numbers are (0,7)
Rename Stack is empty
Current DFS numbers are (1,2)
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (5,6)
Visiting i8* %__s
Rename Stack is empty
Current DFS numbers are (0,7)
Rename Stack is empty
Current DFS numbers are (1,2)
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (1,2)
Found replacement   %__s.0 = call i8* @llvm.ssa.copy.93877264231072(i8* %__s), !dbg !10 for i8* %__s in   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !16
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (1,2)
Found replacement   %__s.0 = call i8* @llvm.ssa.copy.93877264231072(i8* %__s), !dbg !10 for i8* %__s in   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s, i64 %call), !dbg !17
Rename Stack Top DFS numbers are (1,2)
Current DFS numbers are (5,6)
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ostream"* %__out
markOverdefined: i8* %__s
	discovered a new reachable node %entry
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ostream"* %this
markOverdefined: double %__f
	discovered a new reachable node %entry
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ios"* %this
markOverdefined: i32 %__state
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %return
	discovered a new reachable node %if.end
Marking Block Executable: entry
markOverdefined: i8* %__s
	discovered a new reachable node %entry
Marking Block Executable: entry
markOverdefined: i32 %__a
markOverdefined: i32 %__b
	discovered a new reachable node %entry
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ios"* %this
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %while.cond
	discovered a new reachable node %while.body
	discovered a new reachable node %while.end
Marking Block Executable: entry
markOverdefined: i8* %__p
	discovered a new reachable node %entry
Marking Block Executable: entry
markOverdefined: i8* %__c1
markOverdefined: i8* %__c2
	discovered a new reachable node %entry
Marking Block Executable: entry

Popped off OI-WL: i8* %__c2
markOverdefined:   %1 = load i8, i8* %__c2, align 1, !dbg !13, !tbaa !10

Popped off OI-WL:   %1 = load i8, i8* %__c2, align 1, !dbg !13, !tbaa !10
markOverdefined:   %conv1 = sext i8 %1 to i32, !dbg !13

Popped off OI-WL:   %conv1 = sext i8 %1 to i32, !dbg !13

Popped off OI-WL: i8* %__c1
markOverdefined:   %0 = load i8, i8* %__c1, align 1, !dbg !9, !tbaa !10

Popped off OI-WL:   %0 = load i8, i8* %__c1, align 1, !dbg !9, !tbaa !10
markOverdefined:   %conv = sext i8 %0 to i32, !dbg !9

Popped off OI-WL:   %conv = sext i8 %0 to i32, !dbg !9
markOverdefined:   %cmp = icmp eq i32 %conv, %conv1, !dbg !14

Popped off OI-WL:   %cmp = icmp eq i32 %conv, %conv1, !dbg !14

Popped off OI-WL: i8* %__p

Popped off OI-WL: %"class.std::basic_ios"* %this
markOverdefined:   %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9

Popped off OI-WL:   %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
markOverdefined:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9

Popped off OI-WL:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9
markOverdefined:   %1 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10

Popped off OI-WL:   %1 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10

Popped off OI-WL: i32 %__b
markOverdefined:   %or = or i32 %__a, %__b, !dbg !9

Popped off OI-WL:   %or = or i32 %__a, %__b, !dbg !9

Popped off OI-WL: i32 %__a

Popped off OI-WL: i8* %__s
Marking Block Executable: entry
markOverdefined: i8* %__s

Popped off OI-WL: i8* %__s

Popped off OI-WL: i32 %__state
markOverdefined:   %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10

Popped off OI-WL:   %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10

Popped off OI-WL: %"class.std::basic_ios"* %this
markOverdefined:   %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9

Popped off OI-WL:   %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9

Popped off OI-WL: double %__f
markOverdefined:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9

Popped off OI-WL:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9

Popped off OI-WL: %"class.std::basic_ostream"* %this

Popped off OI-WL: i8* %__s
markOverdefined:   %__s.0 = call i8* @llvm.ssa.copy.93877264231072(i8* %__s), !dbg !10
markOverdefined:   %tobool = icmp ne i8* %__s, null, !dbg !9

Popped off OI-WL:   %tobool = icmp ne i8* %__s, null, !dbg !9
Marking Block Executable: if.else
Marking Block Executable: if.then

Popped off OI-WL:   %__s.0 = call i8* @llvm.ssa.copy.93877264231072(i8* %__s), !dbg !10
markOverdefined:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s.0, i64 %call), !dbg !17
markOverdefined:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s.0), !dbg !16

Popped off OI-WL:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s.0), !dbg !16

Popped off OI-WL:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s.0, i64 %call), !dbg !17

Popped off OI-WL: %"class.std::basic_ostream"* %__out
markOverdefined:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
markOverdefined:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11

Popped off OI-WL:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
markOverdefined:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11

Popped off OI-WL:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
markOverdefined:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11

Popped off OI-WL:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11

Popped off OI-WL:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
markOverdefined:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12

Popped off OI-WL:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
markOverdefined:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11

Popped off OI-WL:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
markOverdefined:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11

Popped off OI-WL:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
markOverdefined:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11

Popped off OI-WL:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11

Popped off OI-WL: i32 %N
markOverdefined:   %0 = call i32 @llvm.ssa.copy.93877264093848(i32 %N), !dbg !9
markOverdefined:   %cmp = icmp eq i32 %N, 1024, !dbg !8

Popped off OI-WL:   %cmp = icmp eq i32 %N, 1024, !dbg !8
markOverdefined:   %1 = call i1 @llvm.ssa.copy.93877264093776(i1 %cmp), !dbg !9

Popped off OI-WL:   %1 = call i1 @llvm.ssa.copy.93877264093776(i1 %cmp), !dbg !9

Popped off OI-WL:   %0 = call i32 @llvm.ssa.copy.93877264093848(i32 %N), !dbg !9

Popped off OI-WL: float* %c
markOverdefined:   %6 = bitcast float* %c to i8*, !dbg !14

Popped off OI-WL:   %6 = bitcast float* %c to i8*, !dbg !14
markOverdefined:   %ptrint4 = ptrtoint i8* %6 to i64, !dbg !15

Popped off OI-WL:   %ptrint4 = ptrtoint i8* %6 to i64, !dbg !15
markOverdefined:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !15

Popped off OI-WL:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !15
markOverdefined:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15

Popped off OI-WL:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15
markOverdefined:   %7 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond6), !dbg !15

Popped off OI-WL:   %7 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond6), !dbg !15

Popped off OI-WL: float* %b
markOverdefined:   %4 = bitcast float* %b to i8*, !dbg !12

Popped off OI-WL:   %4 = bitcast float* %b to i8*, !dbg !12
markOverdefined:   %ptrint1 = ptrtoint i8* %4 to i64, !dbg !13

Popped off OI-WL:   %ptrint1 = ptrtoint i8* %4 to i64, !dbg !13
markOverdefined:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !13

Popped off OI-WL:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !13
markOverdefined:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13

Popped off OI-WL:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13
markOverdefined:   %5 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond3), !dbg !13

Popped off OI-WL:   %5 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond3), !dbg !13

Popped off OI-WL: float* %a
markOverdefined:   %2 = bitcast float* %a to i8*, !dbg !10

Popped off OI-WL:   %2 = bitcast float* %a to i8*, !dbg !10
markOverdefined:   %ptrint = ptrtoint i8* %2 to i64, !dbg !11

Popped off OI-WL:   %ptrint = ptrtoint i8* %2 to i64, !dbg !11
markOverdefined:   %maskedptr = and i64 %ptrint, 63, !dbg !11

Popped off OI-WL:   %maskedptr = and i64 %ptrint, 63, !dbg !11
markOverdefined:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11

Popped off OI-WL:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11
markOverdefined:   %3 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond), !dbg !11

Popped off OI-WL:   %3 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond), !dbg !11

Popped off BBWL: 
if.then:                                          ; preds = %entry
  %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
  %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
  %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
  %vbase.offset = load i64, i64* %1, align 8, !dbg !11
  %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
  %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* %3, i32 1), !dbg !15
  br label %if.end, !dbg !11

Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %if.then
  ret %"class.std::basic_ostream"* %__out, !dbg !18


Popped off BBWL: 
if.else:                                          ; preds = %entry
  %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s.0), !dbg !16
  %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s.0, i64 %call), !dbg !17
  br label %if.end

Marking Edge Executable: if.else -> if.end

Popped off BBWL: 
entry:
  ret i1 false, !dbg !9

markConstant: i1 false: ; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s) #10 !dbg !113 {
entry:
  ret i1 false, !dbg !114
}


Popped off BBWL: 
entry:
  call void @__cxx_global_var_init(), !dbg !8
  ret void

Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #13, !dbg !9
  ret void, !dbg !9

markOverdefined:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #13, !dbg !9

Popped off BBWL: 
entry:
  %0 = load i8, i8* %__c1, align 1, !dbg !9, !tbaa !10
  %conv = sext i8 %0 to i32, !dbg !9
  %1 = load i8, i8* %__c2, align 1, !dbg !13, !tbaa !10
  %conv1 = sext i8 %1 to i32, !dbg !13
  %cmp = icmp eq i32 %conv, %conv1, !dbg !14
  ret i1 %cmp, !dbg !15


Popped off BBWL: 
entry:
  %ref.tmp = alloca i8, align 1
  br label %while.cond, !dbg !9

SCCP: Don't know how to handle:   %ref.tmp = alloca i8, align 1
markOverdefined:   %ref.tmp = alloca i8, align 1
Marking Block Executable: while.cond

Popped off BBWL: 
while.cond:                                       ; preds = %while.body, %entry
  %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10
  %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ref.tmp) #13, !dbg !12
  store i8 0, i8* %ref.tmp, align 1, !dbg !12, !tbaa !13
  %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !16
  %lnot = xor i1 %call, true, !dbg !17
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ref.tmp) #13, !dbg !17
  br i1 %lnot, label %while.body, label %while.end, !dbg !9

markConstant: i64 0:   %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10
markOverdefined:   %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !11
markOverdefined:   %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !16
markOverdefined:   %lnot = xor i1 %call, true, !dbg !17
Marking Block Executable: while.body
Marking Block Executable: while.end

Popped off BBWL: 
while.end:                                        ; preds = %while.cond
  ret i64 %__i.0, !dbg !21


Popped off BBWL: 
while.body:                                       ; preds = %while.cond
  %inc = add i64 %__i.0, 1, !dbg !18
  br label %while.cond, !dbg !9, !llvm.loop !19

markConstant: i64 1:   %inc = add i64 %__i.0, 1, !dbg !18
Marking Edge Executable: while.body -> while.cond
markOverdefined:   %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10

Popped off BBWL: 
entry:
  %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
  %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9
  %1 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
  ret i32 %1, !dbg !21


Popped off BBWL: 
entry:
  %or = or i32 %__a, %__b, !dbg !9
  ret i32 %or, !dbg !10


Popped off BBWL: 
entry:
  %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9
  br i1 %call, label %if.then, label %if.end, !dbg !9

markConstant: i1 false:   %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %entry
  %call2 = call i64 @strlen(i8* %__s) #13, !dbg !12
  br label %return, !dbg !13

markOverdefined:   %call2 = call i64 @strlen(i8* %__s) #13, !dbg !12
Marking Block Executable: return

Popped off BBWL: 
return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %call1, %if.then ], [ %call2, %if.end ], !dbg !14
  ret i64 %retval.0, !dbg !15

markOverdefined:   %retval.0 = phi i64 [ %call1, %if.then ], [ %call2, %if.end ], !dbg !14

Popped off BBWL: 
entry:
  %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9
  %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %call2), !dbg !11
  ret void, !dbg !12


Popped off BBWL: 
entry:
  %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
  ret %"class.std::basic_ostream"* %call, !dbg !10


Popped off BBWL: 
entry:
  %tobool = icmp ne i8* %__s, null, !dbg !9
  %__s.0 = call i8* @llvm.ssa.copy.93877264231072(i8* %__s), !dbg !10
  br i1 %tobool, label %if.else, label %if.then, !dbg !10


Popped off BBWL: 
entry:
  %cmp = icmp eq i32 %N, 1024, !dbg !8
  %0 = call i32 @llvm.ssa.copy.93877264093848(i32 %N), !dbg !9
  %1 = call i1 @llvm.ssa.copy.93877264093776(i1 %cmp), !dbg !9
  call void @llvm.assume(i1 %1), !dbg !9
  %2 = bitcast float* %a to i8*, !dbg !10
  %ptrint = ptrtoint i8* %2 to i64, !dbg !11
  %maskedptr = and i64 %ptrint, 63, !dbg !11
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11
  %3 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond), !dbg !11
  call void @llvm.assume(i1 %3), !dbg !11
  %4 = bitcast float* %b to i8*, !dbg !12
  %ptrint1 = ptrtoint i8* %4 to i64, !dbg !13
  %maskedptr2 = and i64 %ptrint1, 63, !dbg !13
  %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13
  %5 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond3), !dbg !13
  call void @llvm.assume(i1 %5), !dbg !13
  %6 = bitcast float* %c to i8*, !dbg !14
  %ptrint4 = ptrtoint i8* %6 to i64, !dbg !15
  %maskedptr5 = and i64 %ptrint4, 63, !dbg !15
  %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15
  %7 = call i1 @llvm.ssa.copy.93877264093776(i1 %maskcond6), !dbg !15
  call void @llvm.assume(i1 %7), !dbg !15
  %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16
  %8 = extractvalue { i64, i64 } %call, 0, !dbg !16
  %9 = extractvalue { i64, i64 } %call, 1, !dbg !16
  br label %for.cond, !dbg !17

Marking Block Executable: entry
Marking Block Executable: for.cond

Popped off BBWL: 
for.cond:                                         ; preds = %for.cond.cleanup10, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18
  %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19
  %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20
  br i1 %cmp7, label %for.body, label %for.cond.cleanup, !dbg !20

markConstant: i32 0:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18
markConstant: i1 true:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19
markConstant: i32 0:   %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20
Marking Block Executable: for.body

Popped off BBWL: 
for.body:                                         ; preds = %for.cond
  br label %for.cond8, !dbg !31

Marking Block Executable: for.cond8

Popped off BBWL: 
for.cond8:                                        ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18
  %cmp9 = icmp slt i32 %j.0, %0, !dbg !32
  %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33
  br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !33

markConstant: i32 0:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18
markOverdefined:   %cmp9 = icmp slt i32 %j.0, %0, !dbg !32
markConstant: i32 0:   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33
Marking Block Executable: for.body11
Marking Block Executable: for.cond.cleanup10

Popped off BBWL: 
for.cond.cleanup10:                               ; preds = %for.cond8
  %inc24 = add nsw i32 %i.0.0, 1, !dbg !34
  br label %for.cond, !dbg !20, !llvm.loop !35

markConstant: i32 1:   %inc24 = add nsw i32 %i.0.0, 1, !dbg !34
Marking Edge Executable: for.cond.cleanup10 -> for.cond
markOverdefined:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18

Popped off BBWL: 
for.body11:                                       ; preds = %for.cond8
  %idxprom = sext i32 %j.0.0 to i64, !dbg !37
  %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37
  %12 = load float, float* %arrayidx, align 4, !dbg !37, !tbaa !38
  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42
  store float %12, float* %arrayidx13, align 4, !dbg !43, !tbaa !38
  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44
  %13 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38
  %14 = load float, float* %arrayidx, align 4, !dbg !45, !tbaa !38
  %cmp18 = fcmp ogt float %13, %14, !dbg !46
  %.0 = call float @llvm.ssa.copy.93877264093584(float %13), !dbg !44
  br i1 %cmp18, label %if.then, label %for.inc, !dbg !44

markConstant: i64 0:   %idxprom = sext i32 %j.0.0 to i64, !dbg !37
markOverdefined:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37
markOverdefined:   %12 = load float, float* %arrayidx, align 4, !dbg !37, !tbaa !38
markOverdefined:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42
markOverdefined:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44
markOverdefined:   %13 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38
markOverdefined:   %14 = load float, float* %arrayidx, align 4, !dbg !45, !tbaa !38
markOverdefined:   %cmp18 = fcmp ogt float %13, %14, !dbg !46
markOverdefined:   %.0 = call float @llvm.ssa.copy.93877264093584(float %13), !dbg !44
Marking Block Executable: if.then
Marking Block Executable: for.inc

Popped off BBWL: 
for.inc:                                          ; preds = %for.body11, %if.then
  %inc = add nsw i32 %j.0.0, 1, !dbg !49
  br label %for.cond8, !dbg !33, !llvm.loop !50

markConstant: i32 1:   %inc = add nsw i32 %j.0.0, 1, !dbg !49
Marking Edge Executable: for.inc -> for.cond8
markOverdefined:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18

Popped off BBWL: 
if.then:                                          ; preds = %for.body11
  store float %.0, float* %arrayidx13, align 4, !dbg !47, !tbaa !38
  br label %for.inc, !dbg !48

Marking Edge Executable: if.then -> for.inc

Popped off BBWL: 
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #13, !dbg !9
  %cmp = icmp eq i32 %call, 0, !dbg !10
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !10

SCCP: Don't know how to handle:   %retval = alloca %struct.timespec, align 8
markOverdefined:   %retval = alloca %struct.timespec, align 8
markOverdefined:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #13, !dbg !9
markOverdefined:   %cmp = icmp eq i32 %call, 0, !dbg !10
Marking Block Executable: cond.end
Marking Block Executable: cond.false

Popped off BBWL: 
cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #14, !dbg !10
  unreachable, !dbg !10


Popped off BBWL: 
cond.end:                                         ; preds = %entry
  %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
  %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
  %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11
  %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !11
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
  ret { i64, i64 } %.fca.1.insert, !dbg !11

markOverdefined:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
markOverdefined:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11
markOverdefined:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
markOverdefined:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
markOverdefined:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11
markOverdefined:   %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !11
markOverdefined:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
markOverdefined:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
markOverdefined: Function '_ZL7gettimev'
markOverdefined: Function '_ZL7gettimev'

Popped off OI-WL: ; Function Attrs: inlinehint nounwind uwtable
define internal { i64, i64 } @_ZL7gettimev() #6 !dbg !55 {
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #13, !dbg !57
  %cmp = icmp eq i32 %call, 0, !dbg !58
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !58

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #14, !dbg !58
  unreachable, !dbg !58

cond.end:                                         ; preds = %entry
  %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !59
  %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !59
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !59
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !59
  %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !59
  %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !59
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !59
  ret { i64, i64 } %.fca.1.insert, !dbg !59
}

markOverdefined:   %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16
markOverdefined:   %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16

Popped off OI-WL:   %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16
markOverdefined:   %9 = extractvalue { i64, i64 } %call, 1, !dbg !16
markOverdefined:   %8 = extractvalue { i64, i64 } %call, 0, !dbg !16

Popped off OI-WL:   %8 = extractvalue { i64, i64 } %call, 0, !dbg !16

Popped off OI-WL:   %9 = extractvalue { i64, i64 } %call, 1, !dbg !16

Popped off OI-WL:   %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16

Popped off OI-WL: ; Function Attrs: inlinehint nounwind uwtable
define internal { i64, i64 } @_ZL7gettimev() #6 !dbg !55 {
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #13, !dbg !57
  %cmp = icmp eq i32 %call, 0, !dbg !58
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !58

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #14, !dbg !58
  unreachable, !dbg !58

cond.end:                                         ; preds = %entry
  %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !59
  %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !59
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !59
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !59
  %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !59
  %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !59
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !59
  ret { i64, i64 } %.fca.1.insert, !dbg !59
}


Popped off OI-WL:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off OI-WL:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off OI-WL:   %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !11

Popped off OI-WL:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11

Popped off OI-WL:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11

Popped off OI-WL:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11

Popped off OI-WL:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11

Popped off OI-WL:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11

Popped off OI-WL:   %cmp = icmp eq i32 %call, 0, !dbg !10

Popped off OI-WL:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #13, !dbg !9

Popped off OI-WL:   %retval = alloca %struct.timespec, align 8

Popped off OI-WL:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18
markOverdefined:   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33

Popped off OI-WL:   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33
markOverdefined:   %inc = add nsw i32 %j.0.0, 1, !dbg !49
markOverdefined:   %idxprom = sext i32 %j.0.0 to i64, !dbg !37

Popped off OI-WL:   %idxprom = sext i32 %j.0.0 to i64, !dbg !37

Popped off OI-WL:   %inc = add nsw i32 %j.0.0, 1, !dbg !49

Popped off OI-WL:   %.0 = call float @llvm.ssa.copy.93877264093584(float %13), !dbg !44

Popped off OI-WL:   %cmp18 = fcmp ogt float %13, %14, !dbg !46

Popped off OI-WL:   %14 = load float, float* %arrayidx, align 4, !dbg !45, !tbaa !38

Popped off OI-WL:   %13 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38

Popped off OI-WL:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44

Popped off OI-WL:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42

Popped off OI-WL:   %12 = load float, float* %arrayidx, align 4, !dbg !37, !tbaa !38

Popped off OI-WL:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37

Popped off OI-WL:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18
markOverdefined:   %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20
markOverdefined:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19

Popped off OI-WL:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19
Marking Block Executable: for.cond.cleanup

Popped off OI-WL:   %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20
markOverdefined:   %inc24 = add nsw i32 %i.0.0, 1, !dbg !34

Popped off OI-WL:   %inc24 = add nsw i32 %i.0.0, 1, !dbg !34

Popped off OI-WL:   %cmp9 = icmp slt i32 %j.0, %0, !dbg !32

Popped off OI-WL:   %retval.0 = phi i64 [ %call1, %if.then ], [ %call2, %if.end ], !dbg !14

Popped off OI-WL:   %call2 = call i64 @strlen(i8* %__s) #13, !dbg !12

Popped off OI-WL:   %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10
markOverdefined:   %inc = add i64 %__i.0, 1, !dbg !18

Popped off OI-WL:   %inc = add i64 %__i.0, 1, !dbg !18

Popped off OI-WL:   %lnot = xor i1 %call, true, !dbg !17

Popped off OI-WL:   %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !16

Popped off OI-WL:   %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !11

Popped off OI-WL:   %ref.tmp = alloca i8, align 1

Popped off OI-WL:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #13, !dbg !9

Popped off I-WL:   %inc = add nsw i32 %j.0.0, 1, !dbg !49

Popped off I-WL:   %idxprom = sext i32 %j.0.0 to i64, !dbg !37

Popped off I-WL:   %inc24 = add nsw i32 %i.0.0, 1, !dbg !34

Popped off I-WL:   %j.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %j.0), !dbg !33

Popped off I-WL:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18

Popped off I-WL:   %i.0.0 = call i32 @llvm.ssa.copy.93877264093848(i32 %i.0), !dbg !20

Popped off I-WL:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19

Popped off I-WL:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18

Popped off I-WL:   %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9

Popped off I-WL:   %inc = add i64 %__i.0, 1, !dbg !18

Popped off I-WL:   %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10

Popped off I-WL: ; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s) #10 !dbg !113 {
entry:
  ret i1 false, !dbg !114
}


Popped off BBWL: 
for.cond.cleanup:                                 ; preds = %for.cond
  %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21
  %10 = extractvalue { i64, i64 } %call26, 0, !dbg !21
  %11 = extractvalue { i64, i64 } %call26, 1, !dbg !21
  %call28 = call double @_ZL5tdiff8timespecS_(i64 %8, i64 %9, i64 %10, i64 %11), !dbg !22
  %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !23
  %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !24
  %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !25
  %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %0), !dbg !26
  %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !27
  %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !28
  %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !29
  ret void, !dbg !30

markOverdefined:   %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21
markOverdefined:   %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21
markOverdefined:   %10 = extractvalue { i64, i64 } %call26, 0, !dbg !21
markOverdefined:   %11 = extractvalue { i64, i64 } %call26, 1, !dbg !21
Marking Block Executable: entry
markOverdefined: i64 %start.coerce0
markOverdefined: i64 %start.coerce1
markOverdefined: i64 %end.coerce0
markOverdefined: i64 %end.coerce1
markOverdefined:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !23
markOverdefined:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !24
markOverdefined:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !25
markOverdefined:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %0), !dbg !26
markOverdefined:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !27
markOverdefined:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !28
markOverdefined:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !29

Popped off BBWL: 
entry:
  %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
  %conv = sitofp i64 %sub to double, !dbg !10
  %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
  %conv4 = sitofp i64 %sub3 to double, !dbg !12
  %mul = fmul double 1.000000e-09, %conv4, !dbg !13
  %add = fadd double %conv, %mul, !dbg !14
  ret double %add, !dbg !15

markOverdefined:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
markOverdefined:   %conv = sitofp i64 %sub to double, !dbg !10
markOverdefined:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
markOverdefined:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
markOverdefined:   %mul = fmul double 1.000000e-09, %conv4, !dbg !13
markOverdefined:   %add = fadd double %conv, %mul, !dbg !14
markOverdefined: Function '_ZL5tdiff8timespecS_'

Popped off OI-WL: ; Function Attrs: inlinehint nounwind uwtable
define internal double @_ZL5tdiff8timespecS_(i64 %start.coerce0, i64 %start.coerce1, i64 %end.coerce0, i64 %end.coerce1) #6 !dbg !60 {
entry:
  %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !61
  %conv = sitofp i64 %sub to double, !dbg !62
  %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !63
  %conv4 = sitofp i64 %sub3 to double, !dbg !64
  %mul = fmul double 1.000000e-09, %conv4, !dbg !65
  %add = fadd double %conv, %mul, !dbg !66
  ret double %add, !dbg !67
}

markOverdefined:   %call28 = call double @_ZL5tdiff8timespecS_(i64 %8, i64 %9, i64 %10, i64 %11), !dbg !22

Popped off OI-WL:   %call28 = call double @_ZL5tdiff8timespecS_(i64 %8, i64 %9, i64 %10, i64 %11), !dbg !22

Popped off OI-WL:   %add = fadd double %conv, %mul, !dbg !14

Popped off OI-WL:   %mul = fmul double 1.000000e-09, %conv4, !dbg !13

Popped off OI-WL:   %conv4 = sitofp i64 %sub3 to double, !dbg !12

Popped off OI-WL:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11

Popped off OI-WL:   %conv = sitofp i64 %sub to double, !dbg !10

Popped off OI-WL:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9

Popped off OI-WL:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !29

Popped off OI-WL:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !28

Popped off OI-WL:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !27

Popped off OI-WL:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %0), !dbg !26

Popped off OI-WL:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !25

Popped off OI-WL:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !24

Popped off OI-WL:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !23

Popped off OI-WL: i64 %end.coerce1

Popped off OI-WL: i64 %end.coerce0

Popped off OI-WL: i64 %start.coerce1

Popped off OI-WL: i64 %start.coerce0

Popped off OI-WL:   %11 = extractvalue { i64, i64 } %call26, 1, !dbg !21

Popped off OI-WL:   %10 = extractvalue { i64, i64 } %call26, 0, !dbg !21

Popped off OI-WL:   %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21

Popped off OI-WL:   %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21
RESOLVING UNDEFS
  Constant: i1 false =   %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9
  BasicBlock Dead:
if.then:                                          ; preds = %entry
  %call1 = call i64 @_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !10
  br label %return, !dbg !11
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @__cxx_global_var_init(), !dbg !8
  ret void
Marking Block Executable: entry

Popped off BBWL: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #12, !dbg !9
  ret void, !dbg !9

Popped off BBWL: 
entry:
  %0 = load i8, i8* %__c1, align 1, !dbg !9, !tbaa !10
  %conv = sext i8 %0 to i32, !dbg !9
  %1 = load i8, i8* %__c2, align 1, !dbg !13, !tbaa !10
  %conv1 = sext i8 %1 to i32, !dbg !13
  %cmp = icmp eq i32 %conv, %conv1, !dbg !14
  ret i1 %cmp, !dbg !15

Popped off BBWL: 
entry:
  %ref.tmp = alloca i8, align 1
  br label %while.cond, !dbg !9
Marking Edge Executable: entry -> while.cond
Marking Block Executable: while.cond

Popped off BBWL: 
while.cond:                                       ; preds = %while.body, %entry
  %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10
  %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !11
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ref.tmp) #12, !dbg !12
  store i8 0, i8* %ref.tmp, align 1, !dbg !12, !tbaa !13
  %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !16
  %lnot = xor i1 %call, true, !dbg !17
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ref.tmp) #12, !dbg !17
  br i1 %lnot, label %while.body, label %while.end, !dbg !9
Marking Edge Executable: while.cond -> while.body
Marking Block Executable: while.body
Marking Edge Executable: while.cond -> while.end
Marking Block Executable: while.end

Popped off BBWL: 
while.end:                                        ; preds = %while.cond
  ret i64 %__i.0, !dbg !21

Popped off BBWL: 
while.body:                                       ; preds = %while.cond
  %inc = add i64 %__i.0, 1, !dbg !18
  br label %while.cond, !dbg !9, !llvm.loop !19
Marking Edge Executable: while.body -> while.cond

Popped off BBWL: 
entry:
  %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
  %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9
  %1 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
  ret i32 %1, !dbg !21

Popped off BBWL: 
entry:
  %or = or i32 %__a, %__b, !dbg !9
  ret i32 %or, !dbg !10

Popped off BBWL: 
entry:
  %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9
  br label %if.end, !dbg !9
Marking Block Executable: entry
Marking Edge Executable: entry -> if.end
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %entry
  %call2 = call i64 @strlen(i8* %__s) #12, !dbg !10
  br label %return, !dbg !11
Marking Edge Executable: if.end -> return
Marking Block Executable: return

Popped off BBWL: 
return:                                           ; preds = %if.end
  ret i64 %call2, !dbg !12

Popped off BBWL: 
entry:
  ret i1 undef, !dbg !9

Popped off BBWL: 
entry:
  %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9
  %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %call2), !dbg !11
  ret void, !dbg !12

Popped off BBWL: 
entry:
  %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
  ret %"class.std::basic_ostream"* %call, !dbg !10

Popped off BBWL: 
entry:
  %tobool = icmp ne i8* %__s, null, !dbg !9
  br i1 %tobool, label %if.else, label %if.then, !dbg !10
Marking Edge Executable: entry -> if.else
Marking Block Executable: if.else
Marking Edge Executable: entry -> if.then
Marking Block Executable: if.then

Popped off BBWL: 
if.then:                                          ; preds = %entry
  %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
  %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
  %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
  %vbase.offset = load i64, i64* %1, align 8, !dbg !11
  %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
  %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* %3, i32 1), !dbg !15
  br label %if.end, !dbg !11
Marking Edge Executable: if.then -> if.end
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %if.then
  ret %"class.std::basic_ostream"* %__out, !dbg !18

Popped off BBWL: 
if.else:                                          ; preds = %entry
  %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !16
  %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s, i64 %call), !dbg !17
  br label %if.end
Marking Edge Executable: if.else -> if.end

Popped off BBWL: 
entry:
  %cmp = icmp eq i32 %N, 1024, !dbg !8
  call void @llvm.assume(i1 %cmp), !dbg !9
  %0 = bitcast float* %a to i8*, !dbg !10
  %ptrint = ptrtoint i8* %0 to i64, !dbg !11
  %maskedptr = and i64 %ptrint, 63, !dbg !11
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11
  call void @llvm.assume(i1 %maskcond), !dbg !11
  %1 = bitcast float* %b to i8*, !dbg !12
  %ptrint1 = ptrtoint i8* %1 to i64, !dbg !13
  %maskedptr2 = and i64 %ptrint1, 63, !dbg !13
  %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13
  call void @llvm.assume(i1 %maskcond3), !dbg !13
  %2 = bitcast float* %c to i8*, !dbg !14
  %ptrint4 = ptrtoint i8* %2 to i64, !dbg !15
  %maskedptr5 = and i64 %ptrint4, 63, !dbg !15
  %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15
  call void @llvm.assume(i1 %maskcond6), !dbg !15
  %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16
  %3 = extractvalue { i64, i64 } %call, 0, !dbg !16
  %4 = extractvalue { i64, i64 } %call, 1, !dbg !16
  br label %for.cond, !dbg !17
Marking Block Executable: entry
Marking Edge Executable: entry -> for.cond
Marking Block Executable: for.cond

Popped off BBWL: 
for.cond:                                         ; preds = %for.cond.cleanup10, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18
  %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19
  br i1 %cmp7, label %for.body, label %for.cond.cleanup, !dbg !20
Marking Edge Executable: for.cond -> for.body
Marking Block Executable: for.body
Marking Edge Executable: for.cond -> for.cond.cleanup
Marking Block Executable: for.cond.cleanup

Popped off BBWL: 
for.cond.cleanup:                                 ; preds = %for.cond
  %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21
  %5 = extractvalue { i64, i64 } %call26, 0, !dbg !21
  %6 = extractvalue { i64, i64 } %call26, 1, !dbg !21
  %call28 = call double @_ZL5tdiff8timespecS_(i64 %3, i64 %4, i64 %5, i64 %6), !dbg !22
  %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !23
  %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !24
  %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !25
  %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %N), !dbg !26
  %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !27
  %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !28
  %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !29
  ret void, !dbg !30
Marking Block Executable: entry

Popped off BBWL: 
entry:
  %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
  %conv = sitofp i64 %sub to double, !dbg !10
  %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
  %conv4 = sitofp i64 %sub3 to double, !dbg !12
  %mul = fmul double 1.000000e-09, %conv4, !dbg !13
  %add = fadd double %conv, %mul, !dbg !14
  ret double %add, !dbg !15

Popped off BBWL: 
for.body:                                         ; preds = %for.cond
  br label %for.cond8, !dbg !31
Marking Edge Executable: for.body -> for.cond8
Marking Block Executable: for.cond8

Popped off BBWL: 
for.cond8:                                        ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18
  %cmp9 = icmp slt i32 %j.0, %N, !dbg !32
  br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !33
Marking Edge Executable: for.cond8 -> for.body11
Marking Block Executable: for.body11
Marking Edge Executable: for.cond8 -> for.cond.cleanup10
Marking Block Executable: for.cond.cleanup10

Popped off BBWL: 
for.cond.cleanup10:                               ; preds = %for.cond8
  %inc24 = add nsw i32 %i.0, 1, !dbg !34
  br label %for.cond, !dbg !20, !llvm.loop !35
Marking Edge Executable: for.cond.cleanup10 -> for.cond

Popped off BBWL: 
for.body11:                                       ; preds = %for.cond8
  %idxprom = sext i32 %j.0 to i64, !dbg !37
  %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37
  %7 = load float, float* %arrayidx, align 4, !dbg !37, !tbaa !38
  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42
  store float %7, float* %arrayidx13, align 4, !dbg !43, !tbaa !38
  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44
  %8 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38
  %9 = load float, float* %arrayidx, align 4, !dbg !45, !tbaa !38
  %cmp18 = fcmp ogt float %8, %9, !dbg !46
  br i1 %cmp18, label %if.then, label %for.inc, !dbg !44
Marking Edge Executable: for.body11 -> if.then
Marking Block Executable: if.then
Marking Edge Executable: for.body11 -> for.inc
Marking Block Executable: for.inc

Popped off BBWL: 
for.inc:                                          ; preds = %for.body11, %if.then
  %inc = add nsw i32 %j.0, 1, !dbg !49
  br label %for.cond8, !dbg !33, !llvm.loop !50
Marking Edge Executable: for.inc -> for.cond8

Popped off BBWL: 
if.then:                                          ; preds = %for.body11
  store float %8, float* %arrayidx13, align 4, !dbg !47, !tbaa !38
  br label %for.inc, !dbg !48
Marking Edge Executable: if.then -> for.inc

Popped off BBWL: 
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #12, !dbg !9
  %cmp = icmp eq i32 %call, 0, !dbg !10
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
Marking Edge Executable: entry -> cond.end
Marking Block Executable: cond.end
Marking Edge Executable: entry -> cond.false
Marking Block Executable: cond.false

Popped off BBWL: 
cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #13, !dbg !10
  unreachable, !dbg !10

Popped off BBWL: 
cond.end:                                         ; preds = %entry
  %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
  %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
  %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11
  %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !11
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
  ret { i64, i64 } %.fca.1.insert, !dbg !11

Popped off V-WL: ; Function Attrs: inlinehint nounwind uwtable
define internal { i64, i64 } @_ZL7gettimev() #6 !dbg !55 {
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #12, !dbg !57
  %cmp = icmp eq i32 %call, 0, !dbg !58
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !58

cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #13, !dbg !58
  unreachable, !dbg !58

cond.end:                                         ; preds = %entry
  %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !59
  %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !59
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !59
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !59
  %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !59
  %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !59
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !59
  ret { i64, i64 } %.fca.1.insert, !dbg !59
}


Popped off V-WL:   %call = call { i64, i64 } @_ZL7gettimev(), !dbg !16

Popped off V-WL:   %call26 = call { i64, i64 } @_ZL7gettimev(), !dbg !21

Popped off V-WL:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off V-WL:   %.fca.1.load = load i64, i64* %.fca.1.gep, align 8, !dbg !11

Popped off V-WL:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11

Popped off V-WL:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11

Popped off V-WL:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11

Popped off V-WL:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11

Popped off V-WL:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11

Popped off V-WL:   %cmp = icmp eq i32 %call, 0, !dbg !10

Popped off V-WL:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #12, !dbg !9

Popped off V-WL:   %retval = alloca %struct.timespec, align 8

Popped off V-WL:   %inc = add nsw i32 %j.0, 1, !dbg !49

Popped off V-WL:   %cmp18 = fcmp ogt float %8, %9, !dbg !46

Popped off V-WL:   %9 = load float, float* %arrayidx, align 4, !dbg !45, !tbaa !38

Popped off V-WL:   %8 = load float, float* %arrayidx15, align 4, !dbg !44, !tbaa !38

Popped off V-WL:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !44

Popped off V-WL:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !42

Popped off V-WL:   %7 = load float, float* %arrayidx, align 4, !dbg !37, !tbaa !38

Popped off V-WL:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !37

Popped off V-WL:   %idxprom = sext i32 %j.0 to i64, !dbg !37

Popped off V-WL:   %inc24 = add nsw i32 %i.0, 1, !dbg !34

Popped off V-WL:   %cmp9 = icmp slt i32 %j.0, %N, !dbg !32

Popped off V-WL:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !18

Popped off V-WL: ; Function Attrs: inlinehint nounwind uwtable
define internal double @_ZL5tdiff8timespecS_(i64 %start.coerce0, i64 %start.coerce1, i64 %end.coerce0, i64 %end.coerce1) #6 !dbg !60 {
entry:
  %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !61
  %conv = sitofp i64 %sub to double, !dbg !62
  %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !63
  %conv4 = sitofp i64 %sub3 to double, !dbg !64
  %mul = fmul double 1.000000e-09, %conv4, !dbg !65
  %add = fadd double %conv, %mul, !dbg !66
  ret double %add, !dbg !67
}


Popped off V-WL:   %call28 = call double @_ZL5tdiff8timespecS_(i64 %3, i64 %4, i64 %5, i64 %6), !dbg !22

Popped off V-WL:   %add = fadd double %conv, %mul, !dbg !14

Popped off V-WL:   %mul = fmul double 1.000000e-09, %conv4, !dbg !13

Popped off V-WL:   %conv4 = sitofp i64 %sub3 to double, !dbg !12

Popped off V-WL:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11

Popped off V-WL:   %conv = sitofp i64 %sub to double, !dbg !10

Popped off V-WL:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9

Popped off V-WL:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !29

Popped off V-WL:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !28

Popped off V-WL:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !27

Popped off V-WL:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %N), !dbg !26

Popped off V-WL:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !25

Popped off V-WL:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !24

Popped off V-WL:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !23

Popped off V-WL: i64 %end.coerce1

Popped off V-WL: i64 %start.coerce0

Popped off V-WL: i64 %end.coerce0

Popped off V-WL: i64 %start.coerce1

Popped off V-WL:   %6 = extractvalue { i64, i64 } %call26, 1, !dbg !21

Popped off V-WL:   %5 = extractvalue { i64, i64 } %call26, 0, !dbg !21

Popped off V-WL:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !19

Popped off V-WL:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !18

Popped off V-WL:   %4 = extractvalue { i64, i64 } %call, 1, !dbg !16

Popped off V-WL:   %3 = extractvalue { i64, i64 } %call, 0, !dbg !16

Popped off V-WL:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !15

Popped off V-WL:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !15

Popped off V-WL:   %ptrint4 = ptrtoint i8* %2 to i64, !dbg !15

Popped off V-WL:   %2 = bitcast float* %c to i8*, !dbg !14

Popped off V-WL:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !13

Popped off V-WL:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !13

Popped off V-WL:   %ptrint1 = ptrtoint i8* %1 to i64, !dbg !13

Popped off V-WL:   %1 = bitcast float* %b to i8*, !dbg !12

Popped off V-WL:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11

Popped off V-WL:   %maskedptr = and i64 %ptrint, 63, !dbg !11

Popped off V-WL:   %ptrint = ptrtoint i8* %0 to i64, !dbg !11

Popped off V-WL:   %0 = bitcast float* %a to i8*, !dbg !10

Popped off V-WL:   %cmp = icmp eq i32 %N, 1024, !dbg !8

Popped off V-WL:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s, i64 %call), !dbg !17

Popped off V-WL:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !16

Popped off V-WL:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11

Popped off V-WL:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11

Popped off V-WL:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11

Popped off V-WL:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11

Popped off V-WL:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11

Popped off V-WL:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11

Popped off V-WL:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12

Popped off V-WL:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11

Popped off V-WL:   %tobool = icmp ne i8* %__s, null, !dbg !9

Popped off V-WL:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9

Popped off V-WL:   %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10

Popped off V-WL:   %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9

Popped off V-WL: ; Function Attrs: alwaysinline nounwind uwtable
define internal zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s) #10 !dbg !110 {
entry:
  ret i1 undef, !dbg !111
}


Popped off V-WL:   %call = call zeroext i1 @_ZStL19__constant_string_pIcEbPKT_(i8* %__s), !dbg !9

Popped off V-WL:   %call2 = call i64 @strlen(i8* %__s) #12, !dbg !10

Popped off V-WL: i8* %__s

Popped off V-WL:   %or = or i32 %__a, %__b, !dbg !9

Popped off V-WL:   %1 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10

Popped off V-WL:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9

Popped off V-WL:   %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9

Popped off V-WL:   %inc = add i64 %__i.0, 1, !dbg !18

Popped off V-WL:   %lnot = xor i1 %call, true, !dbg !17

Popped off V-WL:   %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !16

Popped off V-WL:   %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !11

Popped off V-WL:   %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !10

Popped off V-WL:   %ref.tmp = alloca i8, align 1

Popped off V-WL:   %cmp = icmp eq i32 %conv, %conv1, !dbg !14

Popped off V-WL:   %conv1 = sext i8 %1 to i32, !dbg !13

Popped off V-WL:   %1 = load i8, i8* %__c2, align 1, !dbg !13, !tbaa !10

Popped off V-WL:   %conv = sext i8 %0 to i32, !dbg !9

Popped off V-WL:   %0 = load i8, i8* %__c1, align 1, !dbg !9, !tbaa !10

Popped off V-WL:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #12, !dbg !9
	discovered a new reachable node %entry
	discovered a new reachable node %if.end
	discovered a new reachable node %return
---- Branch Probability Info : _ZNSt11char_traitsIcE6lengthEPKc ----

		Looking for trivial roots
Found a new trivial root: %return
Last visited node: %entry
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %return
3: %if.end
4: %entry
Found roots: %return 
	discovered a new reachable node nullptr
	discovered a new reachable node %return
	discovered a new reachable node %if.end
	discovered a new reachable node %entry
Computing probabilities for return
Computing probabilities for if.end
Computing probabilities for entry

block-frequency: _ZNSt11char_traitsIcE6lengthEPKc
=================================================
reverse-post-order-traversal
 - 0: entry
 - 1: if.end
 - 2: return
loop-detection
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483648, succ = if.end
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to if.end
 - node: if.end
  => [ local  ] weight = 2147483648, succ = return
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to return
 - node: return
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
 - if.end: float = 1.0, scaled = 8.0, int = 8
 - return: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZNSt11char_traitsIcE6lengthEPKc
 - entry: float = 1.0, int = 8
 - if.end: float = 1.0, int = 8
 - return: float = 1.0, int = 8

	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8

GLOBAL DEAD: ; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #5

GLOBAL DEAD: ; Function Attrs: uwtable
define linkonce_odr dso_local i64 @_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc(i8* %__p) #0 comdat align 2 !dbg !112 {
entry:
  %ref.tmp = alloca i8, align 1
  br label %while.cond, !dbg !113

while.cond:                                       ; preds = %while.body, %entry
  %__i.0 = phi i64 [ 0, %entry ], [ %inc, %while.body ], !dbg !114
  %arrayidx = getelementptr inbounds i8, i8* %__p, i64 %__i.0, !dbg !115
  call void @llvm.lifetime.start.p0i8(i64 1, i8* %ref.tmp) #12, !dbg !116
  store i8 0, i8* %ref.tmp, align 1, !dbg !116, !tbaa !117
  %call = call zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %arrayidx, i8* dereferenceable(1) %ref.tmp), !dbg !118
  %lnot = xor i1 %call, true, !dbg !119
  call void @llvm.lifetime.end.p0i8(i64 1, i8* %ref.tmp) #12, !dbg !119
  br i1 %lnot, label %while.body, label %while.end, !dbg !113

while.body:                                       ; preds = %while.cond
  %inc = add i64 %__i.0, 1, !dbg !120
  br label %while.cond, !dbg !113, !llvm.loop !121

while.end:                                        ; preds = %while.cond
  ret i64 %__i.0, !dbg !123
}

Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #0 section ".text.startup" !dbg !118 {
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !119
  ret void
}

Trying to evaluate BB: 
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !8
  ret void

Evaluating Instruction:   call fastcc void @__cxx_global_var_init(), !dbg !8
Trying to evaluate BB: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #12, !dbg !9
  ret void, !dbg !9

Evaluating Instruction:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
Can not constant fold function call.
Failed to evaluate function.
GLOBAL DEAD: ; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

GLOBAL DEAD: ; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

GLOBAL DEAD: ; Function Attrs: nounwind uwtable
define linkonce_odr dso_local zeroext i1 @_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_(i8* dereferenceable(1) %__c1, i8* dereferenceable(1) %__c2) local_unnamed_addr #8 comdat align 2 !dbg !112 {
entry:
  %0 = load i8, i8* %__c1, align 1, !dbg !113, !tbaa !114
  %conv = sext i8 %0 to i32, !dbg !113
  %1 = load i8, i8* %__c2, align 1, !dbg !115, !tbaa !114
  %conv1 = sext i8 %1 to i32, !dbg !115
  %cmp = icmp eq i32 %conv, %conv1, !dbg !116
  ret i1 %cmp, !dbg !117
}

Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #0 section ".text.startup" !dbg !112 {
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !113
  ret void
}

Trying to evaluate BB: 
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !8
  ret void

Evaluating Instruction:   call fastcc void @__cxx_global_var_init(), !dbg !8
Trying to evaluate BB: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #11, !dbg !9
  ret void, !dbg !9

Evaluating Instruction:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
Can not constant fold function call.
Failed to evaluate function.
Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #0 section ".text.startup" !dbg !112 {
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !113
  ret void
}

Trying to evaluate BB: 
entry:
  call fastcc void @__cxx_global_var_init(), !dbg !8
  ret void

Evaluating Instruction:   call fastcc void @__cxx_global_var_init(), !dbg !8
Trying to evaluate BB: 
entry:
  call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
  %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #11, !dbg !9
  ret void, !dbg !9

Evaluating Instruction:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
Can not constant fold function call.
Failed to evaluate function.
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %if.end
	discovered a new reachable node %return
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %entry
DeadArgumentEliminationPass - Deleting dead varargs
DeadArgumentEliminationPass - Determining liveness
DeadArgumentEliminationPass - Inspecting callers for fn: __cxx_global_var_init
DeadArgumentEliminationPass - Inspecting args for fn: __cxx_global_var_init
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSt8ios_base4InitC1Ev
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSt8ios_base4InitD1Ev
DeadArgumentEliminationPass - Intrinsically live fn: __cxa_atexit
DeadArgumentEliminationPass - Intrinsically live fn: _Z5test2PfS_S_i
DeadArgumentEliminationPass - Intrinsically live fn: llvm.assume
DeadArgumentEliminationPass - Inspecting callers for fn: _ZL7gettimev
DeadArgumentEliminationPass - Inspecting args for fn: _ZL7gettimev
DeadArgumentEliminationPass - Inspecting callers for fn: _ZL5tdiff8timespecS_
DeadArgumentEliminationPass - Inspecting args for fn: _ZL5tdiff8timespecS_
DeadArgumentEliminationPass - Marking Argument #0 of function _ZL5tdiff8timespecS_ live
DeadArgumentEliminationPass - Marking Return value #0 of function _ZL7gettimev live
DeadArgumentEliminationPass - Marking Argument #1 of function _ZL5tdiff8timespecS_ live
DeadArgumentEliminationPass - Marking Return value #1 of function _ZL7gettimev live
DeadArgumentEliminationPass - Marking Argument #2 of function _ZL5tdiff8timespecS_ live
DeadArgumentEliminationPass - Marking Argument #3 of function _ZL5tdiff8timespecS_ live
DeadArgumentEliminationPass - Intrinsically live fn: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSolsEd
DeadArgumentEliminationPass - Marking Return value #0 of function _ZL5tdiff8timespecS_ live
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSolsEi
DeadArgumentEliminationPass - Intrinsically live fn: clock_gettime
DeadArgumentEliminationPass - Intrinsically live fn: __assert_fail
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
DeadArgumentEliminationPass - Intrinsically live fn: _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSt11char_traitsIcE6lengthEPKc
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate
DeadArgumentEliminationPass - Intrinsically live fn: _ZStorSt12_Ios_IostateS_
DeadArgumentEliminationPass - Intrinsically live fn: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
DeadArgumentEliminationPass - Inspecting callers for fn: _ZStL19__constant_string_pIcEbPKT_
DeadArgumentEliminationPass - Inspecting args for fn: _ZStL19__constant_string_pIcEbPKT_
DeadArgumentEliminationPass - Intrinsically live fn: strlen
DeadArgumentEliminationPass - Intrinsically live fn: _ZNSo9_M_insertIdEERSoT_
DeadArgumentEliminationPass - Inspecting callers for fn: _GLOBAL__sub_I_test2.cpp
DeadArgumentEliminationPass - Intrinsically live fn: _GLOBAL__sub_I_test2.cpp
DeadArgumentEliminationPass - Removing argument 0 (__s) from _ZStL19__constant_string_pIcEbPKT_
DeadArgumentEliminationPass - Removing return value 0 from _ZStL19__constant_string_pIcEbPKT_
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on __cxx_global_var_init
IC: ConstFold operand of:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0), i8* @__dso_handle) #11, !dbg !9
    Old = i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i32 0, i32 0)
    New = i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0)
IC: ADDING: 3 instrs to worklist
IC: Visiting:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
IC: Mod =   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* @_ZStL8__ioinit), !dbg !9
    New =   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: ADD:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* @__dso_handle) #11, !dbg !9
IC: Mod =   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* @__dso_handle) #11, !dbg !9
    New =   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: ADD:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9


INSTCOMBINE ITERATION #2 on __cxx_global_var_init
IC: ADDING: 3 instrs to worklist
IC: Visiting:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9
	discovered a new reachable node %entry
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.body
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 56 instrs to worklist
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %0 = bitcast float* %a to i8*, !dbg !10
IC: Visiting:   %ptrint = ptrtoint i8* %0 to i64, !dbg !11
IC: Old =   %ptrint = ptrtoint i8* %0 to i64, !dbg !11
    New =   <badref> = ptrtoint float* %a to i64
IC: ADD:   %ptrint = ptrtoint float* %a to i64, !dbg !11
IC: ERASE   %1 = ptrtoint i8* %0 to i64, !dbg !11
IC: ADD:   %0 = bitcast float* %a to i8*, !dbg !10
IC: DCE:   %0 = bitcast float* %a to i8*, !dbg !10
IC: ERASE   %0 = bitcast float* %a to i8*, !dbg !10
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %0 = bitcast float* %b to i8*, !dbg !11
IC: Visiting:   %ptrint1 = ptrtoint i8* %0 to i64, !dbg !12
IC: Old =   %ptrint1 = ptrtoint i8* %0 to i64, !dbg !12
    New =   <badref> = ptrtoint float* %b to i64
IC: ADD:   %ptrint1 = ptrtoint float* %b to i64, !dbg !12
IC: ERASE   %1 = ptrtoint i8* %0 to i64, !dbg !12
IC: ADD:   %0 = bitcast float* %b to i8*, !dbg !11
IC: DCE:   %0 = bitcast float* %b to i8*, !dbg !11
IC: ERASE   %0 = bitcast float* %b to i8*, !dbg !11
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %0 = bitcast float* %c to i8*, !dbg !12
IC: Visiting:   %ptrint4 = ptrtoint i8* %0 to i64, !dbg !13
IC: Old =   %ptrint4 = ptrtoint i8* %0 to i64, !dbg !13
    New =   <badref> = ptrtoint float* %c to i64
IC: ADD:   %ptrint4 = ptrtoint float* %c to i64, !dbg !13
IC: ERASE   %1 = ptrtoint i8* %0 to i64, !dbg !13
IC: ADD:   %0 = bitcast float* %c to i8*, !dbg !12
IC: DCE:   %0 = bitcast float* %c to i8*, !dbg !12
IC: ERASE   %0 = bitcast float* %c to i8*, !dbg !12
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %call = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !13
IC: Visiting:   %0 = extractvalue { i64, i64 } %call, 0, !dbg !13
IC: Visiting:   %1 = extractvalue { i64, i64 } %call, 1, !dbg !13
IC: Visiting:   br label %for.cond, !dbg !14
IC: Visiting:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: Visiting:   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !16
IC: Old =   %cmp7 = icmp slt i32 %i.0, 20000000, !dbg !16
    New =   <badref> = icmp ult i32 %i.0, 20000000
IC: ADD:   %cmp7 = icmp ult i32 %i.0, 20000000, !dbg !16
IC: ERASE   %2 = icmp slt i32 %i.0, 20000000, !dbg !16
IC: ADD:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: Visiting:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: Visiting:   %cmp7 = icmp ult i32 %i.0, 20000000, !dbg !16
IC: Visiting:   br i1 %cmp7, label %for.body, label %for.cond.cleanup, !dbg !17
IC: Visiting:   %call26 = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !18
IC: Visiting:   %2 = extractvalue { i64, i64 } %call26, 0, !dbg !18
IC: Visiting:   %3 = extractvalue { i64, i64 } %call26, 1, !dbg !18
IC: Visiting:   %call28 = call fastcc double @_ZL5tdiff8timespecS_(i64 %0, i64 %1, i64 %2, i64 %3), !dbg !19
IC: Visiting:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
IC: Mod =   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
    New =   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
IC: ADD:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
IC: Visiting:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
IC: Visiting:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !21
IC: Mod =   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* %call29, double %call28), !dbg !21
    New =   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %call29, double %call28), !dbg !21
IC: ADD:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %call29, double %call28), !dbg !21
IC: Visiting:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %call29, double %call28), !dbg !21
IC: Visiting:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
IC: Mod =   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
    New =   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
IC: ADD:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
IC: Visiting:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %N), !dbg !23
IC: Mod =   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call31, i32 %N), !dbg !23
    New =   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call31, i32 %N), !dbg !23
IC: ADD:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call31, i32 %N), !dbg !23
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call31, i32 %N), !dbg !23
IC: Visiting:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
IC: Mod =   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
    New =   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
IC: ADD:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
IC: Visiting:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !25
IC: Mod =   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* %call33, i32 20000000), !dbg !25
    New =   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call33, i32 20000000), !dbg !25
IC: ADD:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call33, i32 20000000), !dbg !25
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call33, i32 20000000), !dbg !25
IC: Visiting:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
IC: Mod =   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
    New =   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
IC: ADD:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
IC: Visiting:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
IC: Visiting:   ret void, !dbg !27
IC: Visiting:   br label %for.cond8, !dbg !28
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %cmp9 = icmp slt i32 %j.0, %N, !dbg !29
IC: Old =   %cmp9 = icmp slt i32 %j.0, %N, !dbg !29
    New =   <badref> = icmp slt i32 %j.0, 1024
IC: ADD:   %cmp9 = icmp slt i32 %j.0, 1024, !dbg !29
IC: ERASE   %4 = icmp slt i32 %j.0, %N, !dbg !29
IC: ADD:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %cmp9 = icmp slt i32 %j.0, 1024, !dbg !29
IC: Old =   %cmp9 = icmp slt i32 %j.0, 1024, !dbg !29
    New =   <badref> = icmp ult i32 %j.0, 1024
IC: ADD:   %cmp9 = icmp ult i32 %j.0, 1024, !dbg !29
IC: ERASE   %4 = icmp slt i32 %j.0, 1024, !dbg !29
IC: ADD:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %cmp9 = icmp ult i32 %j.0, 1024, !dbg !29
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !30
IC: Visiting:   %inc24 = add nsw i32 %i.0, 1, !dbg !31
IC: Mod =   %inc24 = add nsw i32 %i.0, 1, !dbg !31
    New =   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !31
IC: ADD:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: ADD:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !31
IC: Visiting:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !31
IC: Visiting:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: Visiting:   br label %for.cond, !dbg !17, !llvm.loop !32
IC: Visiting:   %idxprom = sext i32 %j.0 to i64, !dbg !34
IC: Old =   %idxprom = sext i32 %j.0 to i64, !dbg !34
    New =   <badref> = zext i32 %j.0 to i64
IC: ADD:   %idxprom = zext i32 %j.0 to i64, !dbg !34
IC: ERASE   %4 = sext i32 %j.0 to i64, !dbg !34
IC: ADD:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %idxprom = zext i32 %j.0 to i64, !dbg !34
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   %4 = load float, float* %arrayidx, align 4, !dbg !34, !tbaa !35
IC: ADD:   %4 = bitcast float* %arrayidx to i32*
IC: ADD:   %5 = load i32, i32* %4
IC: ADD:   %7 = bitcast float* %arrayidx13 to i32*
IC: ADD:   store i32 %5, i32* %7
IC: ERASE   store float %6, float* %arrayidx13, align 4, !dbg !40, !tbaa !35
IC: ADD:   %6 = load float, float* %arrayidx, align 4, !dbg !34, !tbaa !35
IC: Mod =   %4 = load float, float* %arrayidx, align 4, !dbg !34, !tbaa !35
    New =   %6 = load float, float* %arrayidx, align 4, !dbg !34, !tbaa !35
IC: ERASE   %6 = load float, float* %arrayidx, align 4, !dbg !34, !tbaa !35
IC: ADD:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !40, !tbaa !35
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !40
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !34, !tbaa !35
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !34
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !39
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !41
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !41, !tbaa !35
IC: Visiting:   %8 = load float, float* %arrayidx, align 4, !dbg !42, !tbaa !35
IC: ADD:   %.cast = bitcast i32 %5 to float
IC: Replacing   %8 = load float, float* %arrayidx, align 4, !dbg !42, !tbaa !35
    with   %.cast = bitcast i32 %5 to float, !dbg !42
IC: Mod =   %8 = load float, float* %arrayidx, align 4, !dbg !42, !tbaa !35
    New =   %8 = load float, float* %arrayidx, align 4, !dbg !42, !tbaa !35
IC: ERASE   %8 = load float, float* %arrayidx, align 4, !dbg !42, !tbaa !35
IC: ADD:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !42
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !43
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !41
IC: Visiting:   %inc = add nsw i32 %j.0, 1, !dbg !46
IC: Mod =   %inc = add nsw i32 %j.0, 1, !dbg !46
    New =   %inc = add nuw nsw i32 %j.0, 1, !dbg !46
IC: ADD:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: ADD:   %inc = add nuw nsw i32 %j.0, 1, !dbg !46
IC: Visiting:   %inc = add nuw nsw i32 %j.0, 1, !dbg !46
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   br label %for.cond8, !dbg !30, !llvm.loop !47
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !44, !tbaa !35
IC: Visiting:   br label %for.inc, !dbg !45


INSTCOMBINE ITERATION #2 on _Z5test2PfS_S_i
IC: ADDING: 55 instrs to worklist
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %call = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !13
IC: Visiting:   %0 = extractvalue { i64, i64 } %call, 0, !dbg !13
IC: Visiting:   %1 = extractvalue { i64, i64 } %call, 1, !dbg !13
IC: Visiting:   br label %for.cond, !dbg !14
IC: Visiting:   %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.cond.cleanup10 ], !dbg !15
IC: Visiting:   %cmp7 = icmp ult i32 %i.0, 20000000, !dbg !16
IC: Visiting:   br i1 %cmp7, label %for.body, label %for.cond.cleanup, !dbg !17
IC: Visiting:   %call26 = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !18
IC: Visiting:   %2 = extractvalue { i64, i64 } %call26, 0, !dbg !18
IC: Visiting:   %3 = extractvalue { i64, i64 } %call26, 1, !dbg !18
IC: Visiting:   %call28 = call fastcc double @_ZL5tdiff8timespecS_(i64 %0, i64 %1, i64 %2, i64 %3), !dbg !19
IC: Visiting:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !20
IC: Visiting:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull %call29, double %call28), !dbg !21
IC: Visiting:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !22
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call31, i32 %N), !dbg !23
IC: Visiting:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !24
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call33, i32 20000000), !dbg !25
IC: Visiting:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !26
IC: Visiting:   ret void, !dbg !27
IC: Visiting:   br label %for.cond8, !dbg !28
IC: Visiting:   %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ], !dbg !15
IC: Visiting:   %cmp9 = icmp ult i32 %j.0, 1024, !dbg !29
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !30
IC: Visiting:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !31
IC: Visiting:   br label %for.cond, !dbg !17, !llvm.loop !32
IC: Visiting:   %idxprom = zext i32 %j.0 to i64, !dbg !34
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !34
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !34
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !34, !tbaa !35
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !39
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !40
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !40, !tbaa !35
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !41
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !41, !tbaa !35
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !42
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !43
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !41
IC: Visiting:   %inc = add nuw nsw i32 %j.0, 1, !dbg !46
IC: Visiting:   br label %for.cond8, !dbg !30, !llvm.loop !47
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !44, !tbaa !35
IC: Visiting:   br label %for.inc, !dbg !45
Looking to fold for.body into for.cond8
Killing Trivial BB: 

for.body:                                         ; preds = %for.cond
  br label %for.cond8, !dbg !28
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false


INSTCOMBINE ITERATION #1 on _ZL7gettimev
IC: ADDING: 14 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #11, !dbg !9
IC: Mod =   %call = call i32 @clock_gettime(i32 1, %struct.timespec* %retval) #11, !dbg !9
    New =   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: ADD:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: Visiting:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11
IC: Mod =   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 0, !dbg !11
    New =   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 0, !dbg !11
IC: ADD:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 0, !dbg !11
IC: Old =   %.fca.0.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 0, !dbg !11
    New =   <badref> = bitcast %struct.timespec* %retval to i64*
IC: ADD:   %.fca.0.gep = bitcast %struct.timespec* %retval to i64*, !dbg !11
IC: ERASE   %1 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 0, !dbg !11
IC: ADD:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: Visiting:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: Visiting:   %.fca.0.gep = bitcast %struct.timespec* %retval to i64*, !dbg !11
IC: Old =   %.fca.0.gep = bitcast %struct.timespec* %retval to i64*, !dbg !11
    New =   <badref> = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0
IC: ADD:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0, !dbg !11
IC: ERASE   %1 = bitcast %struct.timespec* %retval to i64*, !dbg !11
IC: ADD:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0, !dbg !11
IC: Mod =   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i32 0, i32 0, !dbg !11
    New =   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: ADD:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11
IC: Mod =   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i32 0, i32 1, !dbg !11
    New =   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
IC: ADD:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
IC: ADD:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1
IC: Replacing   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
    with   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Mod =   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
    New =   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
IC: ERASE   %.fca.1.gep = getelementptr inbounds { i64, i64 }, { i64, i64 }* %0, i64 0, i32 1, !dbg !11
IC: ADD:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: DCE:   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: ERASE   %0 = bitcast %struct.timespec* %retval to { i64, i64 }*, !dbg !11
IC: ADD:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11


INSTCOMBINE ITERATION #2 on _ZL7gettimev
IC: ADDING: 13 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double 1.000000e-09, %conv4, !dbg !13
IC: Mod =   %mul = fmul double 1.000000e-09, %conv4, !dbg !13
    New =   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: ADD:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %conv, %mul, !dbg !14
IC: Mod =   %add = fadd double %conv, %mul, !dbg !14
    New =   %add = fadd double %mul, %conv, !dbg !14
IC: ADD:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15


INSTCOMBINE ITERATION #2 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then


INSTCOMBINE ITERATION #1 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 16 instrs to worklist
IC: Visiting:   %tobool = icmp ne i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.else, label %if.then, !dbg !10
IC: ADD:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Mod =   br i1 %tobool, label %if.else, label %if.then, !dbg !10
    New =   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: ADD:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* %3, i32 1), !dbg !15
IC: Mod =   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* %3, i32 1), !dbg !15
    New =   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 1), !dbg !15
IC: ADD:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 1), !dbg !15
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 1), !dbg !15
IC: Visiting:   br label %if.end, !dbg !11
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !18
IC: Visiting:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !16
IC: Mod =   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* %__s), !dbg !16
    New =   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* nonnull %__s), !dbg !16
IC: ADD:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* nonnull %__s), !dbg !16
IC: Visiting:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* nonnull %__s), !dbg !16
IC: Visiting:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s, i64 %call), !dbg !17
IC: Mod =   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* dereferenceable(272) %__out, i8* %__s, i64 %call), !dbg !17
    New =   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call), !dbg !17
IC: ADD:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call), !dbg !17
IC: Visiting:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call), !dbg !17
IC: Visiting:   br label %if.end


INSTCOMBINE ITERATION #2 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 16 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* nonnull %__s), !dbg !16
IC: Visiting:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call), !dbg !17
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !18
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 1), !dbg !15
IC: Visiting:   br label %if.end, !dbg !11
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSolsEd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
IC: Visiting:   ret %"class.std::basic_ostream"* %call, !dbg !10
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9
IC: Visiting:   %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %call, i32 %__state), !dbg !10
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %call2), !dbg !11
IC: Visiting:   ret void, !dbg !12
	discovered a new reachable node %entry
	discovered a new reachable node %if.end
	discovered a new reachable node %return


INSTCOMBINE ITERATION #1 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 5 instrs to worklist
IC: Visiting:   call fastcc void @_ZStL19__constant_string_pIcEbPKT_(), !dbg !9
IC: Visiting:   br label %if.end, !dbg !9
IC: Sink:   %call2 = call i64 @strlen(i8* %__s) #11, !dbg !11
IC: Visiting:   %call2 = call i64 @strlen(i8* %__s) #11, !dbg !11
IC: Visiting:   br label %return, !dbg !10
IC: Visiting:   ret i64 %call2, !dbg !12


INSTCOMBINE ITERATION #2 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 5 instrs to worklist
IC: Visiting:   call fastcc void @_ZStL19__constant_string_pIcEbPKT_(), !dbg !9
IC: Visiting:   br label %if.end, !dbg !9
IC: Visiting:   br label %return, !dbg !10
IC: Visiting:   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !11
IC: Visiting:   ret i64 %call2, !dbg !12
Merging: if.end into entry
Merging: return into entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStorSt12_Ios_IostateS_
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %or = or i32 %__a, %__b, !dbg !9
IC: Visiting:   ret i32 %or, !dbg !10
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 4 instrs to worklist
IC: Visiting:   %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
IC: Old =   %0 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
    New =   <badref> = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i32 0, i32 0
IC: ADD:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i32 0, i32 0, !dbg !9
IC: ERASE   %1 = bitcast %"class.std::basic_ios"* %this to %"class.std::ios_base"*, !dbg !9
IC: Visiting:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i32 0, i32 0, !dbg !9
IC: Mod =   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i32 0, i32 0, !dbg !9
    New =   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: ADD:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: Visiting:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9
IC: Mod =   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i32 0, i32 5, !dbg !9
    New =   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 5, !dbg !9
IC: ADD:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 5, !dbg !9
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 5, !dbg !9
IC: Old =   %_M_streambuf_state = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 5, !dbg !9
    New =   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5
IC: ADD:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: ERASE   %1 = getelementptr inbounds %"class.std::ios_base", %"class.std::ios_base"* %0, i64 0, i32 5, !dbg !9
IC: ADD:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: DCE:   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: ERASE   %0 = getelementptr %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, !dbg !9
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21


INSTCOMBINE ITERATION #2 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStL19__constant_string_pIcEbPKT_
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret void
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 2 instrs to worklist
IC: Visiting:   call fastcc void @__cxx_global_var_init(), !dbg !8
IC: Visiting:   ret void
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
Inliner visiting SCC: _ZNSt8ios_base4InitC1Ev: 0 call sites.

Features:+sse2,+cx8,+fxsr,+mmx,+sse,+sse2,+x87
CPU:x86-64

Subtarget features: SSELevel 2, 3DNowLevel 1, 64bit 1
G_ADD (opcode 35): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SUB (opcode 36): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MUL (opcode 37): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SDIV (opcode 38): 1 type index, 0 imm indices
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_UDIV (opcode 39): 1 type index, 0 imm indices
.. opcode 39 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_SREM (opcode 40): 1 type index, 0 imm indices
.. opcode 40 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_UREM (opcode 41): 1 type index, 0 imm indices
.. opcode 41 is aliased to 38
.. the first uncovered type index: 1, OK
.. the first uncovered imm index: 0, OK
G_AND (opcode 42): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_OR (opcode 43): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_XOR (opcode 44): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_IMPLICIT_DEF (opcode 45): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PHI (opcode 46): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRAME_INDEX (opcode 47): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_GLOBAL_VALUE (opcode 48): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT (opcode 49): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UNMERGE_VALUES (opcode 50): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT (opcode 51): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_MERGE_VALUES (opcode 52): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR (opcode 53): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BUILD_VECTOR_TRUNC (opcode 54): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONCAT_VECTORS (opcode 55): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTRTOINT (opcode 56): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_INTTOPTR (opcode 57): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_BITCAST (opcode 58): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_TRUNC (opcode 59): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_ROUND (opcode 60): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READCYCLECOUNTER (opcode 61): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_LOAD (opcode 62): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXTLOAD (opcode 63): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ZEXTLOAD (opcode 64): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_LOAD (opcode 65): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_SEXTLOAD (opcode 66): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_ZEXTLOAD (opcode 67): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_STORE (opcode 68): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INDEXED_STORE (opcode 69): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG_WITH_SUCCESS (opcode 70): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMIC_CMPXCHG (opcode 71): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XCHG (opcode 72): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_ADD (opcode 73): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_SUB (opcode 74): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_AND (opcode 75): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_NAND (opcode 76): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_OR (opcode 77): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_XOR (opcode 78): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MAX (opcode 79): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_MIN (opcode 80): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMAX (opcode 81): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_UMIN (opcode 82): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FADD (opcode 83): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ATOMICRMW_FSUB (opcode 84): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FENCE (opcode 85): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRCOND (opcode 86): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRINDIRECT (opcode 87): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC (opcode 88): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INTRINSIC_W_SIDE_EFFECTS (opcode 89): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ANYEXT (opcode 90): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_TRUNC (opcode 91): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CONSTANT (opcode 92): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCONSTANT (opcode 93): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VASTART (opcode 94): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_VAARG (opcode 95): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT (opcode 96): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SEXT_INREG (opcode 97): 1 type index, 1 imm index
.. type index coverage check SKIPPED: user-defined predicate detected
.. imm index coverage check SKIPPED: user-defined predicate detected
G_ZEXT (opcode 98): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHL (opcode 99): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_LSHR (opcode 100): 2 type indices, 0 imm indices
.. opcode 100 is aliased to 99
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_ASHR (opcode 101): 2 type indices, 0 imm indices
.. opcode 101 is aliased to 99
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_ICMP (opcode 102): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCMP (opcode 103): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_SELECT (opcode 104): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDO (opcode 105): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UADDE (opcode 106): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBO (opcode 107): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_USUBE (opcode 108): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDO (opcode 109): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SADDE (opcode 110): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBO (opcode 111): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SSUBE (opcode 112): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULO (opcode 113): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULO (opcode 114): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMULH (opcode 115): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMULH (opcode 116): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FADD (opcode 117): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSUB (opcode 118): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMUL (opcode 119): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMA (opcode 120): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAD (opcode 121): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FDIV (opcode 122): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FREM (opcode 123): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPOW (opcode 124): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP (opcode 125): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FEXP2 (opcode 126): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG (opcode 127): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG2 (opcode 128): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FLOG10 (opcode 129): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEG (opcode 130): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPEXT (opcode 131): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTRUNC (opcode 132): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FPTOSI (opcode 133): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_FPTOUI (opcode 134): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SITOFP (opcode 135): 2 type indices, 0 imm indices
.. the first uncovered type index: 2, OK
.. the first uncovered imm index: 0, OK
G_UITOFP (opcode 136): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FABS (opcode 137): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOPYSIGN (opcode 138): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCANONICALIZE (opcode 139): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM (opcode 140): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM (opcode 141): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINNUM_IEEE (opcode 142): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXNUM_IEEE (opcode 143): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMINIMUM (opcode 144): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FMAXIMUM (opcode 145): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_ADD (opcode 146): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_PTR_MASK (opcode 147): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMIN (opcode 148): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SMAX (opcode 149): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMIN (opcode 150): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_UMAX (opcode 151): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BR (opcode 152): 0 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BRJT (opcode 153): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_INSERT_VECTOR_ELT (opcode 154): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_EXTRACT_VECTOR_ELT (opcode 155): 3 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_SHUFFLE_VECTOR (opcode 156): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ (opcode 157): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTTZ_ZERO_UNDEF (opcode 158): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ (opcode 159): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTLZ_ZERO_UNDEF (opcode 160): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_CTPOP (opcode 161): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BSWAP (opcode 162): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BITREVERSE (opcode 163): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCEIL (opcode 164): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FCOS (opcode 165): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSIN (opcode 166): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FSQRT (opcode 167): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FFLOOR (opcode 168): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FRINT (opcode 169): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_FNEARBYINT (opcode 170): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_ADDRSPACE_CAST (opcode 171): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_BLOCK_ADDR (opcode 172): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_JUMP_TABLE (opcode 173): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_DYN_STACKALLOC (opcode 174): 2 type indices, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_READ_REGISTER (opcode 175): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
G_WRITE_REGISTER (opcode 176): 1 type index, 0 imm indices
.. type index coverage check SKIPPED: no rules defined
.. imm index coverage check SKIPPED: no rules defined
Inliner visiting SCC: _ZNSt8ios_base4InitD1Ev: 0 call sites.
Inliner visiting SCC: __cxa_atexit: 0 call sites.
Inliner visiting SCC: clock_gettime: 0 call sites.
Inliner visiting SCC: __assert_fail: 0 call sites.
Inliner visiting SCC: _ZL7gettimev: 0 call sites.
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
SROA function: _ZL7gettimev
SROA alloca:   %retval = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %retval = alloca %struct.timespec, align 8
  A pointer to this alloca escaped by:
    %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
EarlyCSE CVP: Add conditional value for 'cmp' as i1 true in cond.end
EarlyCSE CVP: Add conditional value for 'cmp' as i1 false in cond.false
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZL7gettimev'
LVI Getting value   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 at ''
  Result = overdefined
LVI Getting block end value   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 at 'entry'
PUSH:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 at 'cond.end'
PUSH:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 in cond.end
POP   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 in cond.end = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting block end value   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 at 'cond.end'
PUSH:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 in cond.end
 compute BB 'cond.end' - unknown inst def found.
POP   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 in cond.end = overdefined
  Result = overdefined
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false


INSTCOMBINE ITERATION #1 on _ZL7gettimev
IC: ADDING: 13 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
---- Branch Probability Info : _ZL7gettimev ----

		Looking for trivial roots
Found a new trivial root: %cond.false
Last visited node: %entry
Found a new trivial root: %cond.end
Last visited node: %cond.end
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false
3: %entry
4: %cond.end
Found roots: %cond.false %cond.end 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
Computing probabilities for cond.end
Computing probabilities for cond.false
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _ZL7gettimev
=============================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false
 - 2: cond.end
loop-detection
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = cond.end
  => [ local  ] weight = 1, succ = cond.false
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false
  => assign fffffffe00000000 (0000000000000000) to cond.end
 - node: cond.false
  => mass:  00000001ffffffff
 - node: cond.end
  => mass:  fffffffe00000000
float-to-int: min = 0.0000000004656612873, max = 1.0, factor = 17179869184.0
 - entry: float = 1.0, scaled = 17179869184.0, int = 17179869184
 - cond.false: float = 0.0000000004656612873, scaled = 8.0, int = 8
 - cond.end: float = 0.9999999995, scaled = 17179869176.0, int = 17179869176
block-frequency-info: _ZL7gettimev
 - entry: float = 1.0, int = 17179869184
 - cond.false: float = 0.00000000046566, int = 8
 - cond.end: float = 1.0, int = 17179869176

	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false


INSTCOMBINE ITERATION #1 on _ZL7gettimev
IC: ADDING: 13 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11
Instruction Merger
GVN iteration: 0
GVN: load i64 %.fca.0.load is clobbered by   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
GVN: load i64 %.fca.1.load is clobbered by   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
SCCP on function '_ZL7gettimev'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  %retval = alloca %struct.timespec, align 8
  %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
  %cmp = icmp eq i32 %call, 0, !dbg !10
  br i1 %cmp, label %cond.end, label %cond.false, !dbg !10

SCCP: Don't know how to handle:   %retval = alloca %struct.timespec, align 8
markOverdefined:   %retval = alloca %struct.timespec, align 8
markOverdefined:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
markOverdefined:   %cmp = icmp eq i32 %call, 0, !dbg !10
Marking Block Executable: cond.end
Marking Block Executable: cond.false

Popped off BBWL: 
cond.false:                                       ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
  unreachable, !dbg !10


Popped off BBWL: 
cond.end:                                         ; preds = %entry
  %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
  %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
  %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
  %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
  %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
  %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
  ret { i64, i64 } %.fca.1.insert, !dbg !11

markOverdefined:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
markOverdefined:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
markOverdefined:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
markOverdefined:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
markOverdefined:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
markOverdefined:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
markOverdefined:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off OI-WL:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off OI-WL:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11

Popped off OI-WL:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11

Popped off OI-WL:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11

Popped off OI-WL:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11

Popped off OI-WL:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11

Popped off OI-WL:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11

Popped off OI-WL:   %cmp = icmp eq i32 %call, 0, !dbg !10

Popped off OI-WL:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9

Popped off OI-WL:   %retval = alloca %struct.timespec, align 8
RESOLVING UNDEFs
DemandedBits: Root:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
DemandedBits: Root:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
DemandedBits: Root:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
DemandedBits: Root:   unreachable, !dbg !10
DemandedBits: Root:   ret { i64, i64 } %.fca.1.insert, !dbg !11
DemandedBits: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
DemandedBits: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
DemandedBits: Visiting:   %retval = alloca %struct.timespec, align 8
DemandedBits: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
DemandedBits: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
DemandedBits: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10 Alive Out: 0x1
DemandedBits: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 Alive Out: 0xffffffff


INSTCOMBINE ITERATION #1 on _ZL7gettimev
IC: ADDING: 13 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11
Jump threading on function '_ZL7gettimev'
LVI Getting value   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 at ''
  Result = overdefined
LVI Getting block end value   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 at 'entry'
PUSH:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 at 'cond.end'
PUSH:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 in cond.end
POP   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11 in cond.end = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting block end value   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 at 'cond.end'
PUSH:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 in cond.end
 compute BB 'cond.end' - unknown inst def found.
POP   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11 in cond.end = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %cond.false
Last visited node: %entry
Found a new trivial root: %cond.end
Last visited node: %cond.end
		Looking for non-trivial roots
Total: 3, Num: 4
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false
3: %entry
4: %cond.end
Found roots: %cond.false %cond.end 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
mark live:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
mark block live: entry
mark live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
mark block live: cond.false
mark live:   unreachable, !dbg !10
mark live:   ret { i64, i64 } %.fca.1.insert, !dbg !11
mark block live: cond.end
mark live:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
post-dom root child is a return: cond.end
work live:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
mark live:   %cmp = icmp eq i32 %call, 0, !dbg !10
work live:   %cmp = icmp eq i32 %call, 0, !dbg !10
work live:   ret { i64, i64 } %.fca.1.insert, !dbg !11
mark live:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
work live:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
mark live:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
mark live:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
work live:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
mark live:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
work live:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
mark live:   %retval = alloca %struct.timespec, align 8
work live:   %retval = alloca %struct.timespec, align 8
work live:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
mark live:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
work live:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
mark live:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
work live:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
work live:   unreachable, !dbg !10
work live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
work live:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry
	discovered a new reachable node %cond.end
	discovered a new reachable node %cond.false


INSTCOMBINE ITERATION #1 on _ZL7gettimev
IC: ADDING: 13 instrs to worklist
IC: Visiting:   %retval = alloca %struct.timespec, align 8
IC: Visiting:   %call = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval) #11, !dbg !9
IC: Visiting:   %cmp = icmp eq i32 %call, 0, !dbg !10
IC: Visiting:   br i1 %cmp, label %cond.end, label %cond.false, !dbg !10
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !10
IC: Visiting:   unreachable, !dbg !10
IC: Visiting:   %.fca.0.gep = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 0, !dbg !11
IC: Visiting:   %.fca.0.load = load i64, i64* %.fca.0.gep, align 8, !dbg !11
IC: Visiting:   %.fca.0.insert = insertvalue { i64, i64 } undef, i64 %.fca.0.load, 0, !dbg !11
IC: Visiting:   %0 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval, i64 0, i32 1, !dbg !11
IC: Visiting:   %.fca.1.load = load i64, i64* %0, align 8, !dbg !11
IC: Visiting:   %.fca.1.insert = insertvalue { i64, i64 } %.fca.0.insert, i64 %.fca.1.load, 1, !dbg !11
IC: Visiting:   ret { i64, i64 } %.fca.1.insert, !dbg !11
Inliner visiting SCC: _ZL5tdiff8timespecS_: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZL5tdiff8timespecS_'<<0x55618130d4e0>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
SROA function: _ZL5tdiff8timespecS_
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZL5tdiff8timespecS_'
LVI Getting block end value i64 %end.coerce0 at 'entry'
PUSH: i64 %end.coerce0 in entry
POP i64 %end.coerce0 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %start.coerce0 at 'entry'
PUSH: i64 %start.coerce0 in entry
POP i64 %start.coerce0 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %end.coerce1 at 'entry'
PUSH: i64 %end.coerce1 in entry
POP i64 %end.coerce1 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %start.coerce1 at 'entry'
PUSH: i64 %start.coerce1 in entry
POP i64 %start.coerce1 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %add = fadd double %mul, %conv, !dbg !14 at 'entry'
PUSH:   %add = fadd double %mul, %conv, !dbg !14 in entry
 compute BB 'entry' - unknown inst def found.
POP   %add = fadd double %mul, %conv, !dbg !14 in entry = overdefined
  Result = overdefined
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15
	discovered a new reachable node %entry
---- Branch Probability Info : _ZL5tdiff8timespecS_ ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZL5tdiff8timespecS_
=====================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZL5tdiff8timespecS_
 - entry: float = 1.0, int = 8

Calculated Rank[start.coerce0] = 3
Calculated Rank[start.coerce1] = 4
Calculated Rank[end.coerce0] = 5
Calculated Rank[end.coerce1] = 6
Combine negations for:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
Combine negations for:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
Combine negations for:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
Calculated Rank[sub] = 6
Calculated Rank[conv] = 7
Calculated Rank[sub3] = 7
Calculated Rank[conv4] = 8
Calculated Rank[mul] = 9
Combine negations for:   %add = fadd double %conv, %mul, !dbg !14
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %conv, %mul, !dbg !14
IC: Mod =   %add = fadd double %conv, %mul, !dbg !14
    New =   %add = fadd double %mul, %conv, !dbg !14
IC: ADD:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15


INSTCOMBINE ITERATION #2 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15
Instruction Merger
GVN iteration: 0
SCCP on function '_ZL5tdiff8timespecS_'
Marking Block Executable: entry
markOverdefined: i64 %start.coerce0
markOverdefined: i64 %start.coerce1
markOverdefined: i64 %end.coerce0
markOverdefined: i64 %end.coerce1

Popped off OI-WL: i64 %end.coerce1
markOverdefined:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11

Popped off OI-WL:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
markOverdefined:   %conv4 = sitofp i64 %sub3 to double, !dbg !12

Popped off OI-WL:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
markOverdefined:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13

Popped off OI-WL:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
markOverdefined:   %add = fadd double %mul, %conv, !dbg !14

Popped off OI-WL:   %add = fadd double %mul, %conv, !dbg !14

Popped off OI-WL: i64 %end.coerce0
markOverdefined:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9

Popped off OI-WL:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
markOverdefined:   %conv = sitofp i64 %sub to double, !dbg !10

Popped off OI-WL:   %conv = sitofp i64 %sub to double, !dbg !10

Popped off OI-WL: i64 %start.coerce1

Popped off OI-WL: i64 %start.coerce0

Popped off BBWL: 
entry:
  %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
  %conv = sitofp i64 %sub to double, !dbg !10
  %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
  %conv4 = sitofp i64 %sub3 to double, !dbg !12
  %mul = fmul double %conv4, 1.000000e-09, !dbg !13
  %add = fadd double %mul, %conv, !dbg !14
  ret double %add, !dbg !15

RESOLVING UNDEFs
DemandedBits: Root:   ret double %add, !dbg !15
DemandedBits: Visiting:   %add = fadd double %mul, %conv, !dbg !14
DemandedBits: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
DemandedBits: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
DemandedBits: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
DemandedBits: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11 Alive Out: 0xffffffffffffffff


INSTCOMBINE ITERATION #1 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15
Jump threading on function '_ZL5tdiff8timespecS_'
LVI Getting block end value i64 %end.coerce0 at 'entry'
PUSH: i64 %end.coerce0 in entry
POP i64 %end.coerce0 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %start.coerce0 at 'entry'
PUSH: i64 %start.coerce0 in entry
POP i64 %start.coerce0 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %end.coerce1 at 'entry'
PUSH: i64 %end.coerce1 in entry
POP i64 %end.coerce1 in entry = overdefined
  Result = overdefined
LVI Getting block end value i64 %start.coerce1 at 'entry'
PUSH: i64 %start.coerce1 in entry
POP i64 %start.coerce1 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %add = fadd double %mul, %conv, !dbg !14 at 'entry'
PUSH:   %add = fadd double %mul, %conv, !dbg !14 in entry
 compute BB 'entry' - unknown inst def found.
POP   %add = fadd double %mul, %conv, !dbg !14 in entry = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   ret double %add, !dbg !15
mark block live: entry
post-dom root child is a return: entry
work live:   ret double %add, !dbg !15
mark live:   %add = fadd double %mul, %conv, !dbg !14
work live:   %add = fadd double %mul, %conv, !dbg !14
mark live:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
mark live:   %conv = sitofp i64 %sub to double, !dbg !10
work live:   %conv = sitofp i64 %sub to double, !dbg !10
mark live:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
work live:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
work live:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
mark live:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
work live:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
mark live:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
work live:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZL5tdiff8timespecS_
IC: ADDING: 7 instrs to worklist
IC: Visiting:   %sub = sub nsw i64 %end.coerce0, %start.coerce0, !dbg !9
IC: Visiting:   %conv = sitofp i64 %sub to double, !dbg !10
IC: Visiting:   %sub3 = sub nsw i64 %end.coerce1, %start.coerce1, !dbg !11
IC: Visiting:   %conv4 = sitofp i64 %sub3 to double, !dbg !12
IC: Visiting:   %mul = fmul double %conv4, 1.000000e-09, !dbg !13
IC: Visiting:   %add = fadd double %mul, %conv, !dbg !14
IC: Visiting:   ret double %add, !dbg !15
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZL5tdiff8timespecS_'<<0x55618130d4e0>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv: 0 call sites.
	discovered a new reachable node %entry
SROA function: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv'
LVI Getting block end value   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 at 'entry'
PUSH:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry
POP   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting block end value   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 at 'entry'
PUSH:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 in entry
 compute BB 'entry' - unknown inst def found.
POP   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 in entry = overdefined
  Result = overdefined
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21
	discovered a new reachable node %entry
---- Branch Probability Info : _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
================================================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
 - entry: float = 1.0, int = 8

Calculated Rank[this] = 3
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21
Instruction Merger
GVN iteration: 0
GVN: load i32 %0 has unknown dependence
SCCP on function '_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv'
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ios"* %this

Popped off OI-WL: %"class.std::basic_ios"* %this
markOverdefined:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9

Popped off OI-WL:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
markOverdefined:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10

Popped off OI-WL:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10

Popped off BBWL: 
entry:
  %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
  %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
  ret i32 %0, !dbg !21

RESOLVING UNDEFs
DemandedBits: Root:   ret i32 %0, !dbg !21
DemandedBits: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 Alive Out: 0xffffffff
DemandedBits: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9


INSTCOMBINE ITERATION #1 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21
Jump threading on function '_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv'
LVI Getting block end value   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 at 'entry'
PUSH:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry
POP   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting block end value   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 at 'entry'
PUSH:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 in entry
 compute BB 'entry' - unknown inst def found.
POP   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10 in entry = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   ret i32 %0, !dbg !21
mark block live: entry
post-dom root child is a return: entry
work live:   ret i32 %0, !dbg !21
mark live:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
work live:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
mark live:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
work live:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv
IC: ADDING: 3 instrs to worklist
IC: Visiting:   %_M_streambuf_state = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state, align 8, !dbg !9, !tbaa !10
IC: Visiting:   ret i32 %0, !dbg !21
Inliner visiting SCC: _ZStorSt12_Ios_IostateS_: 0 call sites.
	discovered a new reachable node %entry
SROA function: _ZStorSt12_Ios_IostateS_
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZStorSt12_Ios_IostateS_'
LVI Getting block end value   %or = or i32 %__a, %__b, !dbg !9 at 'entry'
PUSH:   %or = or i32 %__a, %__b, !dbg !9 in entry
PUSH: i32 %__a in entry
PUSH: i32 %__b in entry
POP i32 %__b in entry = overdefined
POP i32 %__a in entry = overdefined
POP   %or = or i32 %__a, %__b, !dbg !9 in entry = constantrange<-1, -1>
  Result = constantrange<-1, -1>
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStorSt12_Ios_IostateS_
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %or = or i32 %__a, %__b, !dbg !9
IC: Visiting:   ret i32 %or, !dbg !10
	discovered a new reachable node %entry
---- Branch Probability Info : _ZStorSt12_Ios_IostateS_ ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZStorSt12_Ios_IostateS_
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZStorSt12_Ios_IostateS_
 - entry: float = 1.0, int = 8

Calculated Rank[__a] = 3
Calculated Rank[__b] = 4
Combine negations for:   %or = or i32 %__a, %__b, !dbg !9
LINEARIZE:   %or = or i32 %__a, %__b, !dbg !9
OPERAND: i32 %__a (1)
ADD LEAF: i32 %__a (1)
OPERAND: i32 %__b (1)
ADD LEAF: i32 %__b (1)
RAIn:	or i32	[ %__a, #3] [ %__b, #4] 
RAOut:	or i32	[ %__b, #4] [ %__a, #3] 
RA:   %or = or i32 %__a, %__b, !dbg !9
TO:   %or = or i32 %__b, %__a, !dbg !9
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStorSt12_Ios_IostateS_
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %or = or i32 %__b, %__a, !dbg !9
IC: Visiting:   ret i32 %or, !dbg !10
Instruction Merger
GVN iteration: 0
SCCP on function '_ZStorSt12_Ios_IostateS_'
Marking Block Executable: entry
markOverdefined: i32 %__a
markOverdefined: i32 %__b

Popped off OI-WL: i32 %__b
markOverdefined:   %or = or i32 %__b, %__a, !dbg !9

Popped off OI-WL:   %or = or i32 %__b, %__a, !dbg !9

Popped off OI-WL: i32 %__a

Popped off BBWL: 
entry:
  %or = or i32 %__b, %__a, !dbg !9
  ret i32 %or, !dbg !10

RESOLVING UNDEFs
DemandedBits: Root:   ret i32 %or, !dbg !10
DemandedBits: Visiting:   %or = or i32 %__b, %__a, !dbg !9 Alive Out: 0xffffffff


INSTCOMBINE ITERATION #1 on _ZStorSt12_Ios_IostateS_
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %or = or i32 %__b, %__a, !dbg !9
IC: Visiting:   ret i32 %or, !dbg !10
Jump threading on function '_ZStorSt12_Ios_IostateS_'
LVI Getting block end value   %or = or i32 %__b, %__a, !dbg !9 at 'entry'
PUSH:   %or = or i32 %__b, %__a, !dbg !9 in entry
PUSH: i32 %__b in entry
PUSH: i32 %__a in entry
POP i32 %__a in entry = overdefined
POP i32 %__b in entry = overdefined
POP   %or = or i32 %__b, %__a, !dbg !9 in entry = constantrange<-1, -1>
  Result = constantrange<-1, -1>
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   ret i32 %or, !dbg !10
mark block live: entry
post-dom root child is a return: entry
work live:   ret i32 %or, !dbg !10
mark live:   %or = or i32 %__b, %__a, !dbg !9
work live:   %or = or i32 %__b, %__a, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStorSt12_Ios_IostateS_
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %or = or i32 %__b, %__a, !dbg !9
IC: Visiting:   ret i32 %or, !dbg !10
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZStorSt12_Ios_IostateS_'<<0x556181dd70d0>>  #uses=2

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate: 0 call sites.
Inliner visiting SCC: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate: 2 call sites.
      Analyzing call of _ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv... (caller:_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 1
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 2
      NumInstructions: 3
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: -30
      Threshold: 375
    Inlining (cost=-30, threshold=375), Call:   %call = call i32 @_ZNKSt9basic_iosIcSt11char_traitsIcEE7rdstateEv(%"class.std::basic_ios"* %this), !dbg !9
      Analyzing call of _ZStorSt12_Ios_IostateS_... (caller:_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 1
      NumInstructions: 2
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: -35
      Threshold: 487
    Inlining (cost=-35, threshold=487), Call:   %call2 = call i32 @_ZStorSt12_Ios_IostateS_(i32 %0, i32 %__state), !dbg !23
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate'<<0x556181cd81d0>>  #uses=2
  CS<0x556181dd55e8> calls function '_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
SROA function: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate'
LVI Getting block end value   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 at 'entry'
PUSH:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry
POP   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting value %"class.std::basic_ios"* %this at ''
  Result = overdefined
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
IC: Visiting:   %or.i = or i32 %__state, %0, !dbg !23
IC: Mod =   %or.i = or i32 %__state, %0, !dbg !23
    New =   %or.i = or i32 %0, %__state, !dbg !23
IC: ADD:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
IC: Visiting:   ret void, !dbg !28


INSTCOMBINE ITERATION #2 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
IC: Visiting:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
IC: Visiting:   ret void, !dbg !28
	discovered a new reachable node %entry
---- Branch Probability Info : _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
===============================================================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
 - entry: float = 1.0, int = 8

Marked as tail call candidate:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
Calculated Rank[this] = 3
Calculated Rank[__state] = 4
Combine negations for:   %or.i = or i32 %__state, %0, !dbg !23
LINEARIZE:   %or.i = or i32 %__state, %0, !dbg !23
OPERAND: i32 %__state (1)
ADD LEAF: i32 %__state (1)
OPERAND:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12 (1)
ADD LEAF:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12 (1)
RAIn:	or i32	[ %__state, #4] [ %0, #327681] 
RAOut:	or i32	[ %0, #327681] [ %__state, #4] 
RA:   %or.i = or i32 %__state, %0, !dbg !23
TO:   %or.i = or i32 %0, %__state, !dbg !23
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
IC: Visiting:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
IC: Visiting:   ret void, !dbg !28
Instruction Merger
GVN iteration: 0
GVN: load i32 %0 has unknown dependence
SCCP on function '_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate'
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ios"* %this
markOverdefined: i32 %__state

Popped off OI-WL: i32 %__state

Popped off OI-WL: %"class.std::basic_ios"* %this
markOverdefined:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9

Popped off OI-WL:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
markOverdefined:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12

Popped off OI-WL:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
markOverdefined:   %or.i = or i32 %0, %__state, !dbg !23

Popped off OI-WL:   %or.i = or i32 %0, %__state, !dbg !23

Popped off BBWL: 
entry:
  %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
  %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
  %or.i = or i32 %0, %__state, !dbg !23
  tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
  ret void, !dbg !28

RESOLVING UNDEFs
DemandedBits: Root:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
DemandedBits: Root:   ret void, !dbg !28
DemandedBits: Visiting:   %or.i = or i32 %0, %__state, !dbg !23 Alive Out: 0xffffffff
DemandedBits: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12 Alive Out: 0xffffffff
DemandedBits: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9


INSTCOMBINE ITERATION #1 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
IC: Visiting:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
IC: Visiting:   ret void, !dbg !28
Jump threading on function '_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate'
LVI Getting block end value   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 at 'entry'
PUSH:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry
POP   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9 in entry = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting value %"class.std::basic_ios"* %this at ''
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
mark block live: entry
mark live:   ret void, !dbg !28
post-dom root child is a return: entry
work live:   ret void, !dbg !28
work live:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
mark live:   %or.i = or i32 %0, %__state, !dbg !23
work live:   %or.i = or i32 %0, %__state, !dbg !23
mark live:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
work live:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
mark live:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
work live:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate
IC: ADDING: 5 instrs to worklist
IC: Visiting:   %_M_streambuf_state.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %this, i64 0, i32 0, i32 5, !dbg !9
IC: Visiting:   %0 = load i32, i32* %_M_streambuf_state.i, align 8, !dbg !9, !tbaa !12
IC: Visiting:   %or.i = or i32 %0, %__state, !dbg !23
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* %this, i32 %or.i), !dbg !27
IC: Visiting:   ret void, !dbg !28
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate'<<0x556181cd81d0>>  #uses=2
  CS<0x556181dd55e8> calls function '_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZStL19__constant_string_pIcEbPKT_: 0 call sites.
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZStL19__constant_string_pIcEbPKT_'<<0x556181d8db70>>  #uses=1

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
SROA function: _ZStL19__constant_string_pIcEbPKT_
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZStL19__constant_string_pIcEbPKT_'
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStL19__constant_string_pIcEbPKT_
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret void
	discovered a new reachable node %entry
---- Branch Probability Info : _ZStL19__constant_string_pIcEbPKT_ ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZStL19__constant_string_pIcEbPKT_
===================================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZStL19__constant_string_pIcEbPKT_
 - entry: float = 1.0, int = 8

	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStL19__constant_string_pIcEbPKT_
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret void
Instruction Merger
GVN iteration: 0
SCCP on function '_ZStL19__constant_string_pIcEbPKT_'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  ret void

RESOLVING UNDEFs
DemandedBits: Root:   ret void


INSTCOMBINE ITERATION #1 on _ZStL19__constant_string_pIcEbPKT_
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret void
Jump threading on function '_ZStL19__constant_string_pIcEbPKT_'
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   ret void
mark block live: entry
post-dom root child is a return: entry
work live:   ret void
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZStL19__constant_string_pIcEbPKT_
IC: ADDING: 1 instrs to worklist
IC: Visiting:   ret void
Inliner visiting SCC: strlen: 0 call sites.
Inliner visiting SCC: _ZNSt11char_traitsIcE6lengthEPKc: 1 call sites.
    Inlining (cost=always): always inline attribute, Call:   call fastcc void @_ZStL19__constant_string_pIcEbPKT_(), !dbg !9
    -> Deleting dead call:   call fastcc void @_ZStL19__constant_string_pIcEbPKT_(), !dbg !9
    -> Deleting dead function: _ZStL19__constant_string_pIcEbPKT_
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZNSt11char_traitsIcE6lengthEPKc'<<0x556181cc40c0>>  #uses=2
  CS<0x556181dd8010> calls function 'strlen'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
SROA function: _ZNSt11char_traitsIcE6lengthEPKc
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZNSt11char_traitsIcE6lengthEPKc'
LVI Getting block end value   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 at 'entry'
PUSH:   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 in entry = overdefined
  Result = overdefined
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
IC: Visiting:   ret i64 %call2, !dbg !10
	discovered a new reachable node %entry
---- Branch Probability Info : _ZNSt11char_traitsIcE6lengthEPKc ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZNSt11char_traitsIcE6lengthEPKc
=================================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZNSt11char_traitsIcE6lengthEPKc
 - entry: float = 1.0, int = 8

Marked as tail call candidate:   %call2 = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
Calculated Rank[__s] = 3
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
IC: Visiting:   ret i64 %call2, !dbg !10
Instruction Merger
GVN iteration: 0
SCCP on function '_ZNSt11char_traitsIcE6lengthEPKc'
Marking Block Executable: entry
markOverdefined: i8* %__s

Popped off OI-WL: i8* %__s
markOverdefined:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9

Popped off OI-WL:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9

Popped off BBWL: 
entry:
  %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
  ret i64 %call2, !dbg !10

RESOLVING UNDEFs
DemandedBits: Root:   ret i64 %call2, !dbg !10
DemandedBits: Visiting:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 Alive Out: 0xffffffffffffffff


INSTCOMBINE ITERATION #1 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
IC: Visiting:   ret i64 %call2, !dbg !10
Jump threading on function '_ZNSt11char_traitsIcE6lengthEPKc'
LVI Getting block end value   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 at 'entry'
PUSH:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9 in entry = overdefined
  Result = overdefined
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   ret i64 %call2, !dbg !10
mark block live: entry
post-dom root child is a return: entry
work live:   ret i64 %call2, !dbg !10
mark live:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
work live:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSt11char_traitsIcE6lengthEPKc
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call2 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !9
IC: Visiting:   ret i64 %call2, !dbg !10
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZNSt11char_traitsIcE6lengthEPKc'<<0x556181cc40c0>>  #uses=2
  CS<0x556181dd8010> calls function 'strlen'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l: 0 call sites.
Inliner visiting SCC: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc: 2 call sites.
      Analyzing call of _ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate... (caller:_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
      NumConstantArgs: 1
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 2
      NumInstructions: 5
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 10
      Threshold: 375
    Inlining (cost=10, threshold=375), Call:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE8setstateESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 1), !dbg !15
      Analyzing call of _ZNSt11char_traitsIcE6lengthEPKc... (caller:_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 1
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 1
      NumInstructions: 2
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 0
      Threshold: 375
    Inlining (cost=0, threshold=375), Call:   %call = call i64 @_ZNSt11char_traitsIcE6lengthEPKc(i8* nonnull %__s), !dbg !36
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'<<0x556181cd72a0>>  #uses=5
  CS<0x556181dd5bf8> calls function '_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate'
  CS<0x556181dd5450> calls function 'strlen'
  CS<0x556181bd07e0> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
SROA function: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
EarlyCSE CVP: Add conditional value for 'tobool' as i1 true in if.then
EarlyCSE CVP: Add conditional value for 'tobool' as i1 false in if.else
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'
LVI Getting value i8* %__s at ''
  Result = overdefined
LVI Getting value i8* %__s at 'tobool'
  Result = overdefined
LVI Getting block end value   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 at 'if.then'
PUSH:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 in if.then
POP   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 in if.then = notconstant<i8** null>
  Result = notconstant<i8** null>
LVI Getting block end value   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 at 'if.then'
PUSH:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 in if.then
 compute BB 'if.then' - unknown inst def found.
POP   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 in if.then = overdefined
  Result = overdefined
LVI Getting block end value   %_M_streambuf_state.i.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15 at 'if.then'
PUSH:   %_M_streambuf_state.i.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15 in if.then
POP   %_M_streambuf_state.i.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15 in if.then = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting block end value %"class.std::basic_ostream"* %__out at 'if.end'
PUSH: %"class.std::basic_ostream"* %__out in if.end
PUSH: %"class.std::basic_ostream"* %__out in if.else
PUSH: %"class.std::basic_ostream"* %__out in entry
POP %"class.std::basic_ostream"* %__out in entry = notconstant<%"class.std::basic_ostream"* null>
POP %"class.std::basic_ostream"* %__out in if.else = notconstant<%"class.std::basic_ostream"* null>
PUSH: %"class.std::basic_ostream"* %__out in if.then
POP %"class.std::basic_ostream"* %__out in if.then = notconstant<%"class.std::basic_ostream"* null>
POP %"class.std::basic_ostream"* %__out in if.end = notconstant<%"class.std::basic_ostream"* null>
  Result = notconstant<%"class.std::basic_ostream"* null>
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else


INSTCOMBINE ITERATION #1 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 19 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call2.i = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
IC: Visiting:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !41
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15
IC: ADD:   %4 = getelementptr inbounds i8, i8* %add.ptr, i64 32
IC: Old =   %4 = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15
    New =   <badref> = bitcast i8* %_M_streambuf_state.i.i to i32*
IC: ADD:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: ERASE   %5 = getelementptr inbounds %"class.std::basic_ios", %"class.std::basic_ios"* %3, i64 0, i32 0, i32 5, !dbg !15
IC: ADD:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
IC: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
IC: Visiting:   br label %if.end, !dbg !11


INSTCOMBINE ITERATION #2 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 20 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call2.i = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
IC: Visiting:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !41
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
IC: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
IC: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31
IC: Visiting:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
IC: Visiting:   br label %if.end, !dbg !11
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
---- Branch Probability Info : _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc ----

		Looking for trivial roots
Found a new trivial root: %if.end
Last visited node: %if.else
		Looking for non-trivial roots
Total: 4, Num: 5
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %if.end
3: %if.then
4: %entry
5: %if.else
Found roots: %if.end 
	discovered a new reachable node nullptr
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
Computing probabilities for if.end
Computing probabilities for if.then
Computing probabilities for if.else
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x50000000 / 0x80000000 = 62.50%
set edge entry -> 0 successor probability to 0x30000000 / 0x80000000 = 37.50%

block-frequency: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
========================================================================
reverse-post-order-traversal
 - 0: entry
 - 1: if.else
 - 2: if.then
 - 3: if.end
loop-detection
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 805306368, succ = if.then
  => [ local  ] weight = 1342177280, succ = if.else
  => mass:  ffffffffffffffff
  => assign 9fffffffffffffff (6000000000000000) to if.else
  => assign 6000000000000000 (0000000000000000) to if.then
 - node: if.else
  => [ local  ] weight = 2147483648, succ = if.end
  => mass:  9fffffffffffffff
  => assign 9fffffffffffffff (0000000000000000) to if.end
 - node: if.then
  => [ local  ] weight = 2147483648, succ = if.end
  => mass:  6000000000000000
  => assign 6000000000000000 (0000000000000000) to if.end
 - node: if.end
  => mass:  ffffffffffffffff
float-to-int: min = 0.375, max = 1.0, factor = 21.33333333
 - entry: float = 1.0, scaled = 21.33333333, int = 21
 - if.else: float = 0.625, scaled = 13.33333333, int = 13
 - if.then: float = 0.375, scaled = 8.0, int = 8
 - if.end: float = 1.0, scaled = 21.33333333, int = 21
block-frequency-info: _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 - entry: float = 1.0, int = 21
 - if.then: float = 0.375, int = 8
 - if.else: float = 0.625, int = 13
 - if.end: float = 1.0, int = 21

Marked as tail call candidate:   %call2.i = call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
Marked as tail call candidate:   %call1 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
Marked as tail call candidate:   call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
Calculated Rank[__out] = 3
Calculated Rank[__s] = 4
Combine negations for:   %or.i.i = or i32 %5, 1, !dbg !31
LINEARIZE:   %or.i.i = or i32 %5, 1, !dbg !31
OPERAND:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21 (1)
ADD LEAF:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21 (1)
OPERAND: i32 1 (1)
ADD USES LEAF: i32 1 (1)
RAIn:	or i32	[ %5, #458755] [ 1, #0] 
RAOut:	or i32	[ %5, #458755] [ 1, #0] 
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else


INSTCOMBINE ITERATION #1 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 20 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
IC: Visiting:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !41
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
IC: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
IC: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
IC: Visiting:   br label %if.end, !dbg !11
Instruction Merger
GVN iteration: 0
GVN: non-local load i8* %vtable has unknown dependencies
GVN: non-local load i64 %vbase.offset has unknown dependencies
GVN: non-local load i32 %5 has unknown dependencies
SCCP on function '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ostream"* %__out
markOverdefined: i8* %__s

Popped off OI-WL: i8* %__s
markOverdefined:   %tobool = icmp eq i8* %__s, null, !dbg !9

Popped off OI-WL:   %tobool = icmp eq i8* %__s, null, !dbg !9
Marking Block Executable: if.then
Marking Block Executable: if.else

Popped off OI-WL: %"class.std::basic_ostream"* %__out
markOverdefined:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
markOverdefined:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
markOverdefined:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40

Popped off OI-WL:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40

Popped off OI-WL:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
markOverdefined:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11

Popped off OI-WL:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
markOverdefined:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
markOverdefined:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11

Popped off OI-WL:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11

Popped off OI-WL:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
markOverdefined:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15

Popped off OI-WL:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
markOverdefined:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21

Popped off OI-WL:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
markOverdefined:   %or.i.i = or i32 %5, 1, !dbg !31

Popped off OI-WL:   %or.i.i = or i32 %5, 1, !dbg !31

Popped off OI-WL:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
markOverdefined:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12

Popped off OI-WL:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
markOverdefined:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11

Popped off OI-WL:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
markOverdefined:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11

Popped off OI-WL:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
markOverdefined:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11

Popped off OI-WL:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11

Popped off BBWL: 
if.else:                                          ; preds = %entry
  %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
  %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
  br label %if.end

markOverdefined:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
Marking Block Executable: if.end

Popped off BBWL: 
if.end:                                           ; preds = %if.else, %if.then
  ret %"class.std::basic_ostream"* %__out, !dbg !41


Popped off BBWL: 
if.then:                                          ; preds = %entry
  %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
  %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
  %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
  %vbase.offset = load i64, i64* %1, align 8, !dbg !11
  %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
  %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
  %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
  %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
  %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
  %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
  %or.i.i = or i32 %5, 1, !dbg !31
  tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
  br label %if.end, !dbg !11

Marking Edge Executable: if.then -> if.end

Popped off BBWL: 
entry:
  %tobool = icmp eq i8* %__s, null, !dbg !9
  br i1 %tobool, label %if.then, label %if.else, !dbg !10


Popped off OI-WL:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
RESOLVING UNDEFs
DemandedBits: Root:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
DemandedBits: Root:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
DemandedBits: Root:   br label %if.end, !dbg !11
DemandedBits: Root:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
DemandedBits: Root:   br label %if.end
DemandedBits: Root:   ret %"class.std::basic_ostream"* %__out, !dbg !41
DemandedBits: Visiting:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31 Alive Out: 0xffffffff
DemandedBits: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21 Alive Out: 0xfffffffe
DemandedBits: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
DemandedBits: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
DemandedBits: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
DemandedBits: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
DemandedBits: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
DemandedBits: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
DemandedBits: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
DemandedBits: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
DemandedBits: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
DemandedBits: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9 Alive Out: 0x1


INSTCOMBINE ITERATION #1 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 20 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
IC: Visiting:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !41
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
IC: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
IC: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
IC: Visiting:   br label %if.end, !dbg !11
Jump threading on function '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'
LVI Getting value i8* %__s at ''
  Result = overdefined
LVI Getting value i8* %__s at 'tobool'
  Result = overdefined
LVI Getting block end value   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 at 'if.then'
PUSH:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 in if.then
POP   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11 in if.then = notconstant<i8** null>
  Result = notconstant<i8** null>
LVI Getting block end value   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 at 'if.then'
PUSH:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 in if.then
 compute BB 'if.then' - unknown inst def found.
POP   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11 in if.then = overdefined
  Result = overdefined
LVI Getting block end value   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15 at 'if.then'
PUSH:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15 in if.then
POP   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15 in if.then = notconstant<i32* null>
  Result = notconstant<i32* null>
LVI Getting block end value %"class.std::basic_ostream"* %__out at 'if.end'
PUSH: %"class.std::basic_ostream"* %__out in if.end
PUSH: %"class.std::basic_ostream"* %__out in if.else
PUSH: %"class.std::basic_ostream"* %__out in entry
POP %"class.std::basic_ostream"* %__out in entry = notconstant<%"class.std::basic_ostream"* null>
POP %"class.std::basic_ostream"* %__out in if.else = notconstant<%"class.std::basic_ostream"* null>
PUSH: %"class.std::basic_ostream"* %__out in if.then
POP %"class.std::basic_ostream"* %__out in if.then = notconstant<%"class.std::basic_ostream"* null>
POP %"class.std::basic_ostream"* %__out in if.end = notconstant<%"class.std::basic_ostream"* null>
  Result = notconstant<%"class.std::basic_ostream"* null>
		Looking for trivial roots
Found a new trivial root: %if.end
Last visited node: %if.else
		Looking for non-trivial roots
Total: 4, Num: 5
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %if.end
3: %if.then
4: %entry
5: %if.else
Found roots: %if.end 
	discovered a new reachable node nullptr
	discovered a new reachable node %if.end
	discovered a new reachable node %if.then
	discovered a new reachable node %entry
	discovered a new reachable node %if.else
mark live:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
mark block live: if.then
mark live:   br label %if.end, !dbg !11
mark live:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
mark block live: if.else
mark live:   br label %if.end
mark live:   ret %"class.std::basic_ostream"* %__out, !dbg !41
mark block live: if.end
post-dom root child is a return: if.end
work live:   ret %"class.std::basic_ostream"* %__out, !dbg !41
work live:   br label %if.end
work live:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
mark live:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
work live:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
work live:   br label %if.end, !dbg !11
work live:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
mark live:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
mark live:   %or.i.i = or i32 %5, 1, !dbg !31
work live:   %or.i.i = or i32 %5, 1, !dbg !31
mark live:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
work live:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
mark live:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
work live:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
mark live:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
work live:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
mark live:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
work live:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
mark live:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
mark live:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
work live:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
mark live:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
work live:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
mark live:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
work live:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
mark live:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
work live:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
mark live:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
work live:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
work live:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
work live:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
new live blocks:
	if.then
	if.else
	if.end
dead terminator blocks:
	entry
live control in: entry
mark live:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
work live:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
mark live:   %tobool = icmp eq i8* %__s, null, !dbg !9
work live:   %tobool = icmp eq i8* %__s, null, !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry
	discovered a new reachable node %if.then
	discovered a new reachable node %if.end
	discovered a new reachable node %if.else


INSTCOMBINE ITERATION #1 on _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
IC: ADDING: 20 instrs to worklist
IC: Visiting:   %tobool = icmp eq i8* %__s, null, !dbg !9
IC: Visiting:   br i1 %tobool, label %if.then, label %if.else, !dbg !10
IC: Visiting:   %call2.i = tail call i64 @strlen(i8* nonnull dereferenceable(1) %__s) #11, !dbg !36
IC: Visiting:   %call1 = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %__out, i8* nonnull %__s, i64 %call2.i), !dbg !40
IC: Visiting:   br label %if.end
IC: Visiting:   ret %"class.std::basic_ostream"* %__out, !dbg !41
IC: Visiting:   %0 = bitcast %"class.std::basic_ostream"* %__out to i8**, !dbg !11
IC: Visiting:   %vtable = load i8*, i8** %0, align 8, !dbg !11, !tbaa !12
IC: Visiting:   %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24, !dbg !11
IC: Visiting:   %1 = bitcast i8* %vbase.offset.ptr to i64*, !dbg !11
IC: Visiting:   %vbase.offset = load i64, i64* %1, align 8, !dbg !11
IC: Visiting:   %2 = bitcast %"class.std::basic_ostream"* %__out to i8*, !dbg !11
IC: Visiting:   %add.ptr = getelementptr inbounds i8, i8* %2, i64 %vbase.offset, !dbg !11
IC: Visiting:   %3 = bitcast i8* %add.ptr to %"class.std::basic_ios"*, !dbg !11
IC: Visiting:   %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %add.ptr, i64 32, !dbg !15
IC: Visiting:   %4 = bitcast i8* %_M_streambuf_state.i.i to i32*, !dbg !15
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !15, !tbaa !21
IC: Visiting:   %or.i.i = or i32 %5, 1, !dbg !31
IC: Visiting:   tail call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull %3, i32 %or.i.i), !dbg !35
IC: Visiting:   br label %if.end, !dbg !11
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc'<<0x556181cd72a0>>  #uses=5
  CS<0x556181dd5bf8> calls function '_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate'
  CS<0x556181dd5450> calls function 'strlen'
  CS<0x556181bd07e0> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZNSo9_M_insertIdEERSoT_: 0 call sites.
Inliner visiting SCC: _ZNSolsEd: 0 call sites.
	discovered a new reachable node %entry
SROA function: _ZNSolsEd
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_ZNSolsEd'
LVI Getting value %"class.std::basic_ostream"* %this at 'call'
  Result = overdefined
LVI Getting block end value   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 at 'entry'
PUSH:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 in entry
POP   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 in entry = notconstant<%"class.std::basic_ostream"* null>
  Result = notconstant<%"class.std::basic_ostream"* null>
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSolsEd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
IC: Visiting:   ret %"class.std::basic_ostream"* %call, !dbg !10
	discovered a new reachable node %entry
---- Branch Probability Info : _ZNSolsEd ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _ZNSolsEd
==========================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _ZNSolsEd
 - entry: float = 1.0, int = 8

Marked as tail call candidate:   %call = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
Calculated Rank[this] = 3
Calculated Rank[__f] = 4
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSolsEd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
IC: Visiting:   ret %"class.std::basic_ostream"* %call, !dbg !10
Instruction Merger
GVN iteration: 0
SCCP on function '_ZNSolsEd'
Marking Block Executable: entry
markOverdefined: %"class.std::basic_ostream"* %this
markOverdefined: double %__f

Popped off OI-WL: double %__f
markOverdefined:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9

Popped off OI-WL:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9

Popped off OI-WL: %"class.std::basic_ostream"* %this

Popped off BBWL: 
entry:
  %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
  ret %"class.std::basic_ostream"* %call, !dbg !10

RESOLVING UNDEFs
DemandedBits: Root:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
DemandedBits: Root:   ret %"class.std::basic_ostream"* %call, !dbg !10
DemandedBits: Visiting:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9


INSTCOMBINE ITERATION #1 on _ZNSolsEd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
IC: Visiting:   ret %"class.std::basic_ostream"* %call, !dbg !10
Jump threading on function '_ZNSolsEd'
LVI Getting value %"class.std::basic_ostream"* %this at 'call'
  Result = overdefined
LVI Getting block end value   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 at 'entry'
PUSH:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 in entry
POP   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9 in entry = notconstant<%"class.std::basic_ostream"* null>
  Result = notconstant<%"class.std::basic_ostream"* null>
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
mark block live: entry
mark live:   ret %"class.std::basic_ostream"* %call, !dbg !10
post-dom root child is a return: entry
work live:   ret %"class.std::basic_ostream"* %call, !dbg !10
work live:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _ZNSolsEd
IC: ADDING: 2 instrs to worklist
IC: Visiting:   %call = tail call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* %this, double %__f), !dbg !9
IC: Visiting:   ret %"class.std::basic_ostream"* %call, !dbg !10
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_ZNSolsEd'<<0x556181cd72d0>>  #uses=2
  CS<0x556181848238> calls function '_ZNSo9_M_insertIdEERSoT_'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _ZNSolsEi: 0 call sites.
Inliner visiting SCC: _Z5test2PfS_S_i: 8 call sites.
      Analyzing call of _ZL7gettimev... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 13
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 95
      Threshold: 325
    Inlining (cost=95, threshold=325), Call:   %call = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !13
      Analyzing call of _ZL7gettimev... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 13
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: -14905
      Threshold: 325
    Inlining (cost=-14905, threshold=325), Call:   %call26 = call fastcc { i64, i64 } @_ZL7gettimev(), !dbg !24
    -> Deleting dead function: _ZL7gettimev
      Analyzing call of _ZL5tdiff8timespecS_... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 1
      NumInstructions: 7
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: -15020
      Threshold: 487
    Inlining (cost=-15020, threshold=487), Call:   %call28 = call fastcc double @_ZL5tdiff8timespecS_(i64 %3, i64 %4, i64 %8, i64 %9), !dbg !29
    -> Deleting dead function: _ZL5tdiff8timespecS_
      Analyzing call of _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 2
      NumConstantOffsetPtrArgs: 2
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 6
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 40
      Threshold: 487
    Inlining (cost=40, threshold=487), Call:   %call29 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)), !dbg !37
      Analyzing call of _ZNSolsEd... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 1
      NumConstantOffsetPtrArgs: 1
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 1
      NumInstructions: 2
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 0
      Threshold: 375
    Inlining (cost=0, threshold=375), Call:   %call30 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEd(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !45
      Analyzing call of _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 1
      NumConstantOffsetPtrArgs: 2
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 6
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 40
      Threshold: 487
    Inlining (cost=40, threshold=487), Call:   %call31 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)), !dbg !48
      Analyzing call of _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 1
      NumConstantOffsetPtrArgs: 2
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 6
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 40
      Threshold: 487
    Inlining (cost=40, threshold=487), Call:   %call33 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)), !dbg !53
      Analyzing call of _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc... (caller:_Z5test2PfS_S_i)
      NumConstantArgs: 1
      NumConstantOffsetPtrArgs: 2
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 4
      NumInstructions: 6
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: 40
      Threshold: 487
    Inlining (cost=40, threshold=487), Call:   %call35 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)), !dbg !58
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_Z5test2PfS_S_i'<<0x556181dd4eb0>>  #uses=1
  CS<0x556181ca89d8> calls function '__assert_fail'
  CS<0x556181eec248> calls function '__assert_fail'
  CS<0x556181ee9e78> calls function 'clock_gettime'
  CS<0x556181dc9560> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce3d18> calls function '_ZNSo9_M_insertIdEERSoT_'
  CS<0x556181ee8d60> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce4878> calls function '_ZNSolsEi'
  CS<0x556181ed86c0> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce59d8> calls function '_ZNSolsEi'
  CS<0x556181cc3f80> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181cda348> calls function 'clock_gettime'
  CS<0x556181cc4ee0> calls function 'strlen'
  CS<0x556181ee64f0> calls function 'strlen'
  CS<0x556181dd2f60> calls function 'strlen'
  CS<0x556181cda450> calls function 'strlen'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
SROA function: _Z5test2PfS_S_i
SROA alloca:   %retval.i = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %retval.i = alloca %struct.timespec, align 8
  A pointer to this alloca escaped by:
    %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
SROA alloca:   %retval.i61 = alloca %struct.timespec, align 8
  Rewriting FCA loads and stores...
Can't analyze slices for alloca:   %retval.i61 = alloca %struct.timespec, align 8
  A pointer to this alloca escaped by:
    %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !24
Starting Memory SSA clobber for   %11 = load i32, i32* %10, align 4, !dbg !68, !tbaa !69 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %11 = load i32, i32* %10, align 4, !dbg !68, !tbaa !69 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %11 = load i32, i32* %10, align 4, !dbg !68, !tbaa !69 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %13 = load float, float* %arrayidx15, align 4, !dbg !75, !tbaa !69 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %13 = load float, float* %arrayidx15, align 4, !dbg !75, !tbaa !69 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %13 = load float, float* %arrayidx15, align 4, !dbg !75, !tbaa !69 is 2 = MemoryDef(1)
EarlyCSE considering assumption:   call void @llvm.assume(i1 %cmp), !dbg !9
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond), !dbg !10
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond3), !dbg !11
EarlyCSE considering assumption:   call void @llvm.assume(i1 %maskcond6), !dbg !12
EarlyCSE CVP: Add conditional value for 'cmp.i' as i1 true in _ZL7gettimev.exit
EarlyCSE CSE:   %2 = bitcast %struct.timespec* %retval.i to i8*, !dbg !18  to:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
EarlyCSE Simplify:   %2 = extractvalue { i64, i64 } %.fca.1.insert.i, 0, !dbg !19  to:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
EarlyCSE Simplify:   %2 = extractvalue { i64, i64 } %.fca.1.insert.i, 1, !dbg !19  to:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
EarlyCSE CVP: Add conditional value for 'cmp9' as i1 true in for.body11
EarlyCSE CVP: Add conditional value for 'cmp18' as i1 true in if.then
EarlyCSE CVP: Add conditional value for 'cmp9' as i1 false in for.cond.cleanup10
EarlyCSE CVP: Add conditional value for 'cmp7' as i1 false in for.cond.cleanup
EarlyCSE CVP: Add conditional value for 'cmp.i63' as i1 true in _ZL7gettimev.exit70
EarlyCSE CSE:   %4 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !26  to:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !23
EarlyCSE Simplify:   %4 = extractvalue { i64, i64 } %.fca.1.insert.i69, 0, !dbg !27  to:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26
EarlyCSE Simplify:   %4 = extractvalue { i64, i64 } %.fca.1.insert.i69, 1, !dbg !27  to:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26
EarlyCSE CVP: Add conditional value for 'cmp.i63' as i1 false in cond.false.i64
EarlyCSE CVP: Add conditional value for 'cmp.i' as i1 false in cond.false.i
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_Z5test2PfS_S_i'
LVI Getting value   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 at ''
  Result = overdefined
LVI Getting block end value   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 at 'entry'
PUSH:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 in entry = overdefined
  Result = overdefined
LVI Getting value   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 at ''
  Result = overdefined
LVI Getting edge value i32 0 from '_ZL7gettimev.exit' to 'for.cond'
  Result = constantrange<0, 1>
LVI Getting edge value   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !63 from 'for.cond.cleanup10' to 'for.cond'
PUSH:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !63 in for.cond.cleanup10
PUSH:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond.cleanup10
PUSH:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond8
PUSH:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond
 compute BB 'for.cond' - overdefined because of pred (local).
POP   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond = overdefined
PUSH:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.inc
PUSH:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.body11
 compute BB 'for.body11' - overdefined because of pred (non local).
POP   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.body11 = overdefined
 compute BB 'for.inc' - overdefined because of pred (non local).
POP   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.inc = overdefined
 compute BB 'for.cond8' - overdefined because of pred (non local).
POP   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond8 = overdefined
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 in for.cond.cleanup10 = overdefined
POP   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !63 in for.cond.cleanup10 = constantrange<1, 0>
  Result = constantrange<1, 0>
LVI Getting value   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23 at ''
  Result = overdefined
LVI Getting block end value   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23 at 'for.cond.cleanup'
PUSH:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23 in for.cond.cleanup
 compute BB 'for.cond.cleanup' - unknown inst def found.
POP   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23 in for.cond.cleanup = overdefined
  Result = overdefined
LVI Getting value   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 at ''
  Result = overdefined
LVI Getting edge value   %inc = add nuw nsw i32 %j.0, 1, !dbg !78 from 'for.inc' to 'for.cond8'
PUSH:   %inc = add nuw nsw i32 %j.0, 1, !dbg !78 in for.inc
PUSH:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.inc
PUSH:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.body11
PUSH:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.cond8
 compute BB 'for.cond8' - overdefined because of pred (local).
POP   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.cond8 = overdefined
POP   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.body11 = constantrange<0, 1024>
PUSH:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in if.then
POP   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in if.then = constantrange<0, 1024>
POP   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 in for.inc = constantrange<0, 1024>
POP   %inc = add nuw nsw i32 %j.0, 1, !dbg !78 in for.inc = constantrange<1, 1025>
  Result = constantrange<1, 1025>
LVI Getting block end value   %cmp18 = fcmp ogt float %7, %.cast, !dbg !75 at 'for.body11'
PUSH:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !75 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %cmp18 = fcmp ogt float %7, %.cast, !dbg !75 in for.body11 = overdefined
  Result = overdefined
LVI Getting value i32 %N at 'cmp'
  Result = overdefined
LVI Getting block end value   %ptrint = ptrtoint float* %a to i64, !dbg !10 at 'entry'
PUSH:   %ptrint = ptrtoint float* %a to i64, !dbg !10 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint = ptrtoint float* %a to i64, !dbg !10 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 at 'entry'
PUSH:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 at 'entry'
PUSH:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 at '_ZL7gettimev.exit'
PUSH:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 in _ZL7gettimev.exit
POP   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 in _ZL7gettimev.exit = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting edge value   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !63 from 'for.cond.cleanup10' to 'for.cond'
  Result = constantrange<1, 0>
LVI Getting edge value   %inc = add nuw nsw i32 %j.0, 1, !dbg !78 from 'for.inc' to 'for.cond8'
  Result = constantrange<1, 1025>
LVI Getting block end value   %4 = bitcast float* %arrayidx to i32*, !dbg !66 at 'for.body11'
PUSH:   %4 = bitcast float* %arrayidx to i32*, !dbg !66 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %4 = bitcast float* %arrayidx to i32*, !dbg !66 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %6 = bitcast float* %arrayidx13 to i32*, !dbg !72 at 'for.body11'
PUSH:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !72 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %6 = bitcast float* %arrayidx13 to i32*, !dbg !72 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !73 at 'for.body11'
PUSH:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !73 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !73 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !71 at 'if.then'
PUSH:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !71 in if.then
PUSH:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !71 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !71 in for.body11 = overdefined
 compute BB 'if.then' - overdefined because of pred (non local).
POP   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !71 in if.then = notconstant<float* null>
  Result = notconstant<float* null>
LVI Getting block end value   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !26 at '_ZL7gettimev.exit70'
PUSH:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !26 in _ZL7gettimev.exit70
POP   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !26 in _ZL7gettimev.exit70 = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting block end value   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26 at '_ZL7gettimev.exit70'
PUSH:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26 in _ZL7gettimev.exit70
 compute BB '_ZL7gettimev.exit70' - unknown inst def found.
POP   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 at '_ZL7gettimev.exit70'
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in _ZL7gettimev.exit70
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup10
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond8
 compute BB 'for.cond8' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond8 = overdefined
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup10 = overdefined
 compute BB 'for.cond' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond = overdefined
 compute BB 'for.cond.cleanup' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup = overdefined
 compute BB '_ZL7gettimev.exit70' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26 at '_ZL7gettimev.exit70'
PUSH:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26 in _ZL7gettimev.exit70
 compute BB '_ZL7gettimev.exit70' - unknown inst def found.
POP   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 at '_ZL7gettimev.exit70'
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in _ZL7gettimev.exit70
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup10
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond8
 compute BB 'for.cond8' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond8 = overdefined
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup10 = overdefined
 compute BB 'for.cond' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond = overdefined
 compute BB 'for.cond.cleanup' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup = overdefined
 compute BB '_ZL7gettimev.exit70' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: DCE:   %.fca.1.insert.i = insertvalue { i64, i64 } %.fca.0.insert.i, i64 %.fca.1.load.i, 1, !dbg !18
IC: DCE:   %.fca.1.insert.i69 = insertvalue { i64, i64 } %.fca.0.insert.i67, i64 %.fca.1.load.i68, 1, !dbg !26
IC: ADDING: 85 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: DCE:   %.fca.0.insert.i = insertvalue { i64, i64 } undef, i64 %.fca.0.load.i, 0, !dbg !18
IC: ERASE   %.fca.0.insert.i = insertvalue { i64, i64 } undef, i64 %.fca.0.load.i, 0, !dbg !18
IC: ADD:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond, !dbg !19
IC: Visiting:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20
IC: Visiting:   %cmp7 = icmp ult i32 %i.0, 20000000, !dbg !21
IC: Visiting:   br i1 %cmp7, label %for.cond8, label %for.cond.cleanup, !dbg !22
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !23
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !23
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !25
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !25
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !25
IC: Visiting:   unreachable, !dbg !25
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !26
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26
IC: DCE:   %.fca.0.insert.i67 = insertvalue { i64, i64 } undef, i64 %.fca.0.load.i66, 0, !dbg !26
IC: ERASE   %.fca.0.insert.i67 = insertvalue { i64, i64 } undef, i64 %.fca.0.load.i66, 0, !dbg !26
IC: ADD:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !26
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !26
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !27
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !30
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !31
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !32
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !33
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !34
IC: Visiting:   %call2.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)) #11, !dbg !35
IC: Replacing   %call2.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)) #11, !dbg !35
    with i64 47
IC: ERASE   %call2.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0)) #11, !dbg !35
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !35
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* @_ZSt4cout, double %add.i), !dbg !39
IC: Mod =   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* @_ZSt4cout, double %add.i), !dbg !39
    New =   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !39
IC: ADD:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !39
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !39
IC: Visiting:   %call2.i.i72 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)) #11, !dbg !42
IC: Replacing   %call2.i.i72 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)) #11, !dbg !42
    with i64 8
IC: ERASE   %call2.i.i72 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0)) #11, !dbg !42
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !42
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 %N), !dbg !44
IC: Visiting:   %call2.i.i74 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !45
IC: Replacing   %call2.i.i74 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !45
    with i64 5
IC: ERASE   %call2.i.i74 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !45
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !45
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !47
IC: Visiting:   %call2.i.i76 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #11, !dbg !48
IC: Replacing   %call2.i.i76 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #11, !dbg !48
    with i64 2
IC: ERASE   %call2.i.i76 = call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)) #11, !dbg !48
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !48
IC: Visiting:   ret void, !dbg !50
IC: Visiting:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20
IC: Visiting:   %cmp9 = icmp ult i32 %j.0, 1024, !dbg !51
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !52
IC: Visiting:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !53
IC: Visiting:   br label %for.cond, !dbg !22, !llvm.loop !54
IC: Visiting:   %idxprom = zext i32 %j.0 to i64, !dbg !56
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !56
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !56
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !56, !tbaa !57
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !61
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !62
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !62, !tbaa !57
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !63
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !63, !tbaa !57
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !64
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !65
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !63
IC: Visiting:   %inc = add nuw nsw i32 %j.0, 1, !dbg !68
IC: Visiting:   br label %for.cond8, !dbg !52, !llvm.loop !69
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !66, !tbaa !57
IC: Visiting:   br label %for.inc, !dbg !67


INSTCOMBINE ITERATION #2 on _Z5test2PfS_S_i
IC: ADDING: 79 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond, !dbg !19
IC: Visiting:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20
IC: Visiting:   %cmp7 = icmp ult i32 %i.0, 20000000, !dbg !21
IC: Visiting:   br i1 %cmp7, label %for.cond8, label %for.cond.cleanup, !dbg !22
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !23
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !23
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !23
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !25
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !25
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !25
IC: Visiting:   unreachable, !dbg !25
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !26
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !26
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !26
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !26
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !26
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !27
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !30
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !31
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !32
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !33
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !34
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !35
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !39
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !42
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 %N), !dbg !44
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !45
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !47
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !48
IC: Visiting:   ret void, !dbg !50
IC: Visiting:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20
IC: Visiting:   %cmp9 = icmp ult i32 %j.0, 1024, !dbg !51
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !52
IC: Visiting:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !53
IC: Visiting:   br label %for.cond, !dbg !22, !llvm.loop !54
IC: Visiting:   %idxprom = zext i32 %j.0 to i64, !dbg !56
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !56
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !56
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !56, !tbaa !57
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !61
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !62
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !62, !tbaa !57
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !63
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !63, !tbaa !57
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !64
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !65
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !63
IC: Visiting:   %inc = add nuw nsw i32 %j.0, 1, !dbg !68
IC: Visiting:   br label %for.cond8, !dbg !52, !llvm.loop !69
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !66, !tbaa !57
IC: Visiting:   br label %for.inc, !dbg !67
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc if.then for.body11 for.cond8 for.cond
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %for.body11
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 12, Num: 13
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond
7: %_ZL7gettimev.exit
8: %for.cond.cleanup10
9: %for.cond8
10: %for.inc
11: %if.then
12: %for.body11
13: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for for.inc
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond.cleanup10
Computing probabilities for for.cond8
set edge for.cond8 -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond8 -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond
set edge for.cond -> 0 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond -> 1 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond
 - 4: for.cond.cleanup
 - 5: cond.false.i64
 - 6: _ZL7gettimev.exit70
 - 7: for.cond8
 - 8: for.cond.cleanup10
 - 9: for.body11
 - 10: if.then
 - 11: for.inc
loop-detection
 - loop = for.cond
 - loop = for.cond8
 - loop = for.cond: member = for.cond.cleanup10
 - loop = for.cond8: member = for.body11
 - loop = for.cond8: member = if.then
 - loop = for.cond8: member = for.inc
compute-mass-in-loop: for.cond8*
 - node: for.cond8
  => [ local  ] weight = 2080374784, succ = for.body11
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign 07ffffffffffffff (f800000000000000) [exit] to for.cond.cleanup10
  => assign f800000000000000 (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  f800000000000000
  => assign 7c00000000000000 (7c00000000000000) to if.then
  => assign 7c00000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7c00000000000000
  => assign 7c00000000000000 (0000000000000000) to for.inc
 - node: for.inc
  => [backedge] weight = 2147483648
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) [back] to for.cond8
compute-loop-scale: for.cond8*
 - exit-mass = 07ffffffffffffff (ffffffffffffffff - f800000000000000)
 - scale = 32.0
packaging-loop: for.cond8*
 - node: for.cond8
 - node: for.body11
 - node: if.then
 - node: for.inc
compute-mass-in-loop: for.cond*
 - node: for.cond
  => [ local  ] weight = 2080374784, succ = for.cond8
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => mass:  ffffffffffffffff
  => assign 07ffffffffffffff (f800000000000000) [exit] to for.cond.cleanup
  => assign f800000000000000 (0000000000000000) to for.cond8
 - node: for.cond8
  => [ local  ] weight = 576460752303423487, succ = for.cond.cleanup10
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [backedge] weight = 2147483648
  => mass:  f800000000000000
  => assign f800000000000000 (0000000000000000) [back] to for.cond
compute-loop-scale: for.cond*
 - exit-mass = 07ffffffffffffff (ffffffffffffffff - f800000000000000)
 - scale = 32.0
packaging-loop: for.cond*
 - node: for.cond
 - node: for.cond8
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond
 - node: for.cond
  => [ local  ] weight = 576460752303423487, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond: 1.0 => 31.99999999
 - for.cond8: 32.0 => 1024.0
 - for.cond.cleanup10: 0.96875 => 30.99999999
unwrap-loop-package: for.cond8*: mass = f800000000000000, scale = 1024.0
  => combined-scale = 991.9999995
 - for.cond8: 1.0 => 991.9999995
 - for.body11: 0.96875 => 960.9999996
 - if.then: 0.484375 => 480.4999998
 - for.inc: 0.96875 => 960.9999996
float-to-int: min = 0.0000000004656612871, max = 991.9999995, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond: float = 31.99999999, scaled = 549755813824.0, int = 549755813824
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
 - for.cond8: float = 991.9999995, scaled = 17042430228544.0, int = 17042430228544
 - for.cond.cleanup10: float = 30.99999999, scaled = 532575944642.0, int = 532575944642
 - for.body11: float = 960.9999996, scaled = 16509854283902.0, int = 16509854283902
 - if.then: float = 480.4999998, scaled = 8254927141951.0, int = 8254927141951
 - for.inc: float = 960.9999996, scaled = 16509854283902.0, int = 16509854283902
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond: float = 32.0, int = 549755813824
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond8: float = 992.0, int = 17042430228544
 - for.cond.cleanup10: float = 31.0, int = 532575944642
 - for.body11: float = 961.0, int = 16509854283902
 - if.then: float = 480.5, int = 8254927141951
 - for.inc: float = 961.0, int = 16509854283902

Marked as tail call candidate:   call void @llvm.assume(i1 %cmp), !dbg !9
Marked as tail call candidate:   call void @llvm.assume(i1 %maskcond), !dbg !10
Marked as tail call candidate:   call void @llvm.assume(i1 %maskcond3), !dbg !11
Marked as tail call candidate:   call void @llvm.assume(i1 %maskcond6), !dbg !12
Calculated Rank[a] = 3
Calculated Rank[b] = 4
Calculated Rank[c] = 5
Calculated Rank[N] = 6
Combine negations for:   %maskedptr = and i64 %ptrint, 63, !dbg !10
LINEARIZE:   %maskedptr = and i64 %ptrint, 63, !dbg !10
OPERAND:   %ptrint = ptrtoint float* %a to i64, !dbg !10 (1)
ADD LEAF:   %ptrint = ptrtoint float* %a to i64, !dbg !10 (1)
OPERAND: i64 63 (1)
ADD USES LEAF: i64 63 (1)
Calculated Rank[ptrint] = 4
RAIn:	and i64	[ %ptrint, #4] [ 63, #0] 
RAOut:	and i64	[ %ptrint, #4] [ 63, #0] 
Combine negations for:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
LINEARIZE:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
OPERAND:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 (1)
ADD LEAF:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 (1)
OPERAND: i64 63 (1)
ADD USES LEAF: i64 63 (1)
Calculated Rank[ptrint1] = 5
RAIn:	and i64	[ %ptrint1, #5] [ 63, #0] 
RAOut:	and i64	[ %ptrint1, #5] [ 63, #0] 
Combine negations for:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
LINEARIZE:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
OPERAND:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 (1)
ADD LEAF:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 (1)
OPERAND: i64 63 (1)
ADD USES LEAF: i64 63 (1)
Calculated Rank[ptrint4] = 6
RAIn:	and i64	[ %ptrint4, #6] [ 63, #0] 
RAOut:	and i64	[ %ptrint4, #6] [ 63, #0] 
Combine negations for:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !27
Combine negations for:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !31
Combine negations for:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !33
Calculated Rank[sub.i] = 851970
Calculated Rank[conv.i] = 851971
Calculated Rank[sub3.i] = 851971
Calculated Rank[conv4.i] = 851972
Calculated Rank[mul.i] = 851973
Combine negations for:   %add.i = fadd double %conv.i, %mul.i, !dbg !34
Combine negations for:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !53
LINEARIZE:   %inc24 = add nuw nsw i32 %i.0, 1, !dbg !53
OPERAND:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 (1)
ADD USES LEAF:   %i.0 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ], !dbg !20 (1)
OPERAND: i32 1 (1)
ADD USES LEAF: i32 1 (1)
RAIn:	add i32	[ %i.0, #655361] [ 1, #0] 
RAOut:	add i32	[ %i.0, #655361] [ 1, #0] 
Combine negations for:   %inc = add nuw nsw i32 %j.0, 1, !dbg !68
LINEARIZE:   %inc = add nuw nsw i32 %j.0, 1, !dbg !68
OPERAND:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 (1)
ADD USES LEAF:   %j.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond ], !dbg !20 (1)
OPERAND: i32 1 (1)
ADD USES LEAF: i32 1 (1)
RAIn:	add i32	[ %j.0, #917505] [ 1, #0] 
RAOut:	add i32	[ %j.0, #917505] [ 1, #0] 
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond
	discovered a new reachable node %for.cond8
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
LoopSimplify: Creating pre-header for.cond8.preheader
LoopRotation: rotating Loop at depth 2 containing: %for.cond8<header><exiting>,%for.body11,%if.then,%for.inc<latch>
  Inserted PHI:   %j.078 = phi i32 [ 0, %for.cond8.preheader ], [ %j.0, %for.cond8 ]
Legalizing 0 updates
Inserting edge %for.cond8.preheader -> %for.cond.cleanup10
	Reachable %for.cond8.preheader -> %for.cond.cleanup10
		NCA == %for.cond8.preheader
Mark %for.cond.cleanup10as affected, CurrentLevel 5
	Successor %for.cond, level = 2
Updating NCD = %for.cond8.preheader
	IDom(%for.cond.cleanup10) = %for.cond8.preheader
Inserting edge %for.cond8.preheader -> %for.body11
	Reachable %for.cond8.preheader -> %for.body11
		NCA == %for.cond8.preheader
Mark %for.body11as affected, CurrentLevel 5
	Successor %for.inc, level = 6
		Marking visited not affected %for.inc
	Successor %if.then, level = 6
		Marking visited not affected %if.then
 Next: %if.then
	Successor %for.inc, level = 6
 Next: %for.inc
	Successor %for.cond8, level = 4
Updating NCD = %for.cond8.preheader
	IDom(%for.body11) = %for.cond8.preheader
Deleting edge %for.cond8.preheader -> %for.cond8
	NCD %for.cond8.preheader, ToIDom %for.cond8.preheader
IsReachableFromIDom %for.cond8
	Pred %for.inc
	Support %for.cond8.preheader
	%for.cond8 is reachable from support %for.cond8.preheader
Deleting reachable %for.cond8.preheader -> %for.cond8
	Rebuilding subtree
	Top of subtree: %for.cond8.preheader
	Running Semi-NCA
Deleting edge %for.cond8.preheader -> %for.cond.cleanup10
	NCD %for.cond8.preheader, ToIDom %for.cond8.preheader
IsReachableFromIDom %for.cond.cleanup10
	Pred %for.cond8
	Support %for.cond8.preheader
	%for.cond.cleanup10 is reachable from support %for.cond8.preheader
Deleting reachable %for.cond8.preheader -> %for.cond.cleanup10
	Rebuilding subtree
	Top of subtree: %for.cond8.preheader
	Running Semi-NCA
Merging: for.cond8 into for.inc
Legalizing 0 updates
Inserting edge %for.inc -> %for.body11
	Reachable %for.inc -> %for.body11
		NCA == %for.body11
Inserting edge %for.inc -> %for.cond.cleanup10
	Reachable %for.inc -> %for.cond.cleanup10
		NCA == %for.inc
Mark %for.cond.cleanup10as affected, CurrentLevel 7
	Successor %for.cond, level = 2
Updating NCD = %for.inc
	IDom(%for.cond.cleanup10) = %for.inc
Deleting edge %for.cond8 -> %for.body11
	Showing virtual edge %for.cond8 -> %for.cond.cleanup10
Deleting edge %for.cond8 -> %for.cond.cleanup10
	NCD %for.inc, ToIDom %for.inc
Deleting reachable %for.cond8 -> %for.cond.cleanup10
	Rebuilding subtree
	Top of subtree: %for.inc
	Showing virtual edge %for.inc -> %for.cond8
	Running Semi-NCA
Deleting edge %for.inc -> %for.cond8
	NCD %for.inc, ToIDom %for.inc
IsReachableFromIDom %for.cond8
Deleting unreachable subtree %for.cond8
Erasing node %for.cond8
LoopRotation: into Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>
LoopRotation: rotating Loop at depth 1 containing: %for.cond<header><exiting>,%for.cond.cleanup10<latch>,%for.body11,%if.then,%for.inc,%for.cond8.preheader
    Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>
  Inserted PHI:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %i.0, %for.cond ]
Legalizing 0 updates
Inserting edge %_ZL7gettimev.exit -> %for.cond.cleanup
	Reachable %_ZL7gettimev.exit -> %for.cond.cleanup
		NCA == %_ZL7gettimev.exit
Mark %for.cond.cleanupas affected, CurrentLevel 3
	Successor %cond.false.i64, level = 4
		Marking visited not affected %cond.false.i64
	Successor %_ZL7gettimev.exit70, level = 4
		Marking visited not affected %_ZL7gettimev.exit70
 Next: %_ZL7gettimev.exit70
 Next: %cond.false.i64
Updating NCD = %_ZL7gettimev.exit
	IDom(%for.cond.cleanup) = %_ZL7gettimev.exit
Inserting edge %_ZL7gettimev.exit -> %for.cond8.preheader
	Reachable %_ZL7gettimev.exit -> %for.cond8.preheader
		NCA == %_ZL7gettimev.exit
Mark %for.cond8.preheaderas affected, CurrentLevel 3
	Successor %for.body11, level = 4
		Marking visited not affected %for.body11
 Next: %for.body11
	Successor %for.inc, level = 5
		Marking visited not affected %for.inc
	Successor %if.then, level = 5
		Marking visited not affected %if.then
 Next: %if.then
	Successor %for.inc, level = 5
 Next: %for.inc
	Successor %for.cond.cleanup10, level = 6
		Marking visited not affected %for.cond.cleanup10
	Successor %for.body11, level = 4
 Next: %for.cond.cleanup10
	Successor %for.cond, level = 2
Updating NCD = %_ZL7gettimev.exit
	IDom(%for.cond8.preheader) = %_ZL7gettimev.exit
Deleting edge %_ZL7gettimev.exit -> %for.cond
	NCD %_ZL7gettimev.exit, ToIDom %_ZL7gettimev.exit
IsReachableFromIDom %for.cond
	Pred %for.cond.cleanup10
	Support %_ZL7gettimev.exit
	%for.cond is reachable from support %_ZL7gettimev.exit
Deleting reachable %_ZL7gettimev.exit -> %for.cond
	Rebuilding subtree
	Top of subtree: %_ZL7gettimev.exit
	Running Semi-NCA
Deleting edge %_ZL7gettimev.exit -> %for.cond.cleanup
	NCD %_ZL7gettimev.exit, ToIDom %_ZL7gettimev.exit
IsReachableFromIDom %for.cond.cleanup
	Pred %for.cond
	Support %_ZL7gettimev.exit
	%for.cond.cleanup is reachable from support %_ZL7gettimev.exit
Deleting reachable %_ZL7gettimev.exit -> %for.cond.cleanup
	Rebuilding subtree
	Top of subtree: %_ZL7gettimev.exit
	Running Semi-NCA
Merging: for.cond into for.cond.cleanup10
Legalizing 0 updates
Inserting edge %for.cond.cleanup10 -> %for.cond8.preheader
	Reachable %for.cond.cleanup10 -> %for.cond8.preheader
		NCA == %for.cond8.preheader
Inserting edge %for.cond.cleanup10 -> %for.cond.cleanup
	Reachable %for.cond.cleanup10 -> %for.cond.cleanup
		NCA == %for.cond.cleanup10
Mark %for.cond.cleanupas affected, CurrentLevel 7
	Successor %cond.false.i64, level = 8
		Marking visited not affected %cond.false.i64
	Successor %_ZL7gettimev.exit70, level = 8
		Marking visited not affected %_ZL7gettimev.exit70
 Next: %_ZL7gettimev.exit70
 Next: %cond.false.i64
Updating NCD = %for.cond.cleanup10
	IDom(%for.cond.cleanup) = %for.cond.cleanup10
Deleting edge %for.cond -> %for.cond8.preheader
	Showing virtual edge %for.cond -> %for.cond.cleanup
Deleting edge %for.cond -> %for.cond.cleanup
	NCD %for.cond.cleanup10, ToIDom %for.cond.cleanup10
Deleting reachable %for.cond -> %for.cond.cleanup
	Rebuilding subtree
	Top of subtree: %for.cond.cleanup10
	Showing virtual edge %for.cond.cleanup10 -> %for.cond
	Running Semi-NCA
Deleting edge %for.cond.cleanup10 -> %for.cond
	NCD %for.cond.cleanup10, ToIDom %for.cond.cleanup10
IsReachableFromIDom %for.cond
Deleting unreachable subtree %for.cond
Erasing node %for.cond
LoopRotation: into Loop at depth 1 containing: %for.cond8.preheader<header>,%for.cond.cleanup10<latch><exiting>,%for.body11,%if.then,%for.inc
    Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>
Starting Memory SSA clobber for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
LICM: Using MemorySSA.
Starting Memory SSA clobber for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 17 = MemoryDef(16)->16 MustAlias
Optimized Memory SSA clobber for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 16 = MemoryDef(19)
Result Memory SSA clobber [SkipSelf = 1] for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 16 = MemoryDef(19)
LICM sinking instruction:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !60
Starting Memory SSA clobber for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 16 = MemoryDef(19)->19 MayAlias
Optimized Memory SSA clobber for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 19 = MemoryPhi({for.cond8.preheader,20},{for.inc,18})
Result Memory SSA clobber [SkipSelf = 1] for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 19 = MemoryPhi({for.cond8.preheader,20},{for.inc,18})
LICM sinking instruction:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
LICM sinking instruction:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
LICM sinking instruction:   %idxprom = zext i32 %j.078 to i64, !dbg !53
LICM: Using MemorySSA.
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 78 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %j.078 = phi i32 [ 0, %for.cond8.preheader ], [ %inc, %for.inc ]
IC: Visiting:   %idxprom = zext i32 %j.078 to i64, !dbg !53
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %inc = add nuw nsw i32 %j.078, 1, !dbg !65
IC: Visiting:   %cmp9 = icmp ult i32 %inc, 1024, !dbg !66
IC: Old =   %cmp9 = icmp ult i32 %inc, 1024, !dbg !66
    New =   <badref> = icmp ult i32 %j.078, 1023
IC: ADD:   %cmp9 = icmp ult i32 %j.078, 1023, !dbg !66
IC: ERASE   %8 = icmp ult i32 %inc, 1024, !dbg !66
IC: ADD:   %inc = add nuw nsw i32 %j.078, 1, !dbg !65
IC: Visiting:   %inc = add nuw nsw i32 %j.078, 1, !dbg !65
IC: Visiting:   %cmp9 = icmp ult i32 %j.078, 1023, !dbg !66
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %cmp7 = icmp ult i32 %inc24, 20000000, !dbg !50
IC: Old =   %cmp7 = icmp ult i32 %inc24, 20000000, !dbg !50
    New =   <badref> = icmp ult i32 %i.079, 19999999
IC: ADD:   %cmp7 = icmp ult i32 %i.079, 19999999, !dbg !50
IC: ERASE   %4 = icmp ult i32 %inc24, 20000000, !dbg !50
IC: ADD:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %cmp7 = icmp ult i32 %i.079, 19999999, !dbg !50
IC: Visiting:   br i1 %cmp7, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %conv.i, %mul.i, !dbg !32
IC: Mod =   %add.i = fadd double %conv.i, %mul.i, !dbg !32
    New =   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: ADD:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 %N), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64


INSTCOMBINE ITERATION #2 on _Z5test2PfS_S_i
IC: ADDING: 78 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %j.078 = phi i32 [ 0, %for.cond8.preheader ], [ %inc, %for.inc ]
IC: Visiting:   %idxprom = zext i32 %j.078 to i64, !dbg !53
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %idxprom, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %idxprom, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %idxprom, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %inc = add nuw nsw i32 %j.078, 1, !dbg !65
IC: Visiting:   %cmp9 = icmp ult i32 %j.078, 1023, !dbg !66
IC: Visiting:   br i1 %cmp9, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %cmp7 = icmp ult i32 %i.079, 19999999, !dbg !50
IC: Visiting:   br i1 %cmp7, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 %N), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
Wide IV:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
INDVARS: eliminating   %idxprom = zext i32 %j.078 to i64, !dbg !53 replaced by   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
INDVARS: Rewriting loop exit condition to:
      LHS:  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
       op:	!=
      RHS:	i64 1024
ExitCount:	1023
  was:   %cmp9 = icmp ult i64 %indvars.iv, 1023, !dbg !66
loop-idiom Scanning: F[_Z5test2PfS_S_i] Countable Loop %for.body11
Analyzing Loop for deletion: Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>
Loop is not invariant, cannot delete.
Loop Unroll: F[_Z5test2PfS_S_i] Loop %for.body11
  Loop Size = 12
  will not try to unroll partially because -unroll-allow-partial not given
INDVARS: Rewriting loop exit condition to:
      LHS:  %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
       op:	!=
      RHS:	i32 20000000
ExitCount:	19999999
  was:   %cmp7 = icmp ult i32 %i.079, 19999999, !dbg !50
loop-idiom Scanning: F[_Z5test2PfS_S_i] Countable Loop %for.cond8.preheader
Analyzing Loop for deletion: Loop at depth 1 containing: %for.cond8.preheader<header>,%for.body11,%if.then,%for.inc,%for.cond.cleanup10<latch><exiting>
    Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>
Loop contains subloops.
Loop Unroll: F[_Z5test2PfS_S_i] Loop %for.cond8.preheader
  Loop Size = 16
  will not try to unroll partially because -unroll-allow-partial not given
Instruction Merger
GVN iteration: 0
Replace dominated use of 'N' as i32 1024 in i32 1024
Replacing dominated uses of i32 %N with i32 1024 in block entry
Replacing dominated uses of   %maskedptr = and i64 %ptrint, 63, !dbg !10 with i64 0 in block entry
Replacing dominated uses of   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11 with i64 0 in block entry
Replacing dominated uses of   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12 with i64 0 in block entry
GVN: load i64 %.fca.0.load.i is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load i64 %.fca.1.load.i is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load float %7 is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load i64 %.fca.0.load.i66 is clobbered by   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
GVN: load i64 %.fca.1.load.i68 is clobbered by   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
GVN iteration: 1
Replacing dominated uses of i32 %N with i32 1024 in block entry
Replacing dominated uses of   %maskedptr = and i64 %ptrint, 63, !dbg !10 with i64 0 in block entry
Replacing dominated uses of   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11 with i64 0 in block entry
Replacing dominated uses of   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12 with i64 0 in block entry
GVN: load i64 %.fca.0.load.i is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load i64 %.fca.1.load.i is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load float %7 is clobbered by   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
GVN: load i64 %.fca.0.load.i66 is clobbered by   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
GVN: load i64 %.fca.1.load.i68 is clobbered by   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
SCCP on function '_Z5test2PfS_S_i'
Marking Block Executable: entry
markOverdefined: float* %a
markOverdefined: float* %b
markOverdefined: float* %c
markOverdefined: i32 %N

Popped off OI-WL: i32 %N
markOverdefined:   %cmp = icmp eq i32 %N, 1024, !dbg !8

Popped off OI-WL:   %cmp = icmp eq i32 %N, 1024, !dbg !8

Popped off OI-WL: float* %c
markOverdefined:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12

Popped off OI-WL:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
markOverdefined:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12

Popped off OI-WL:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
markOverdefined:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12

Popped off OI-WL:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12

Popped off OI-WL: float* %b
markOverdefined:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11

Popped off OI-WL:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
markOverdefined:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11

Popped off OI-WL:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
markOverdefined:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11

Popped off OI-WL:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11

Popped off OI-WL: float* %a
markOverdefined:   %ptrint = ptrtoint float* %a to i64, !dbg !10

Popped off OI-WL:   %ptrint = ptrtoint float* %a to i64, !dbg !10
markOverdefined:   %maskedptr = and i64 %ptrint, 63, !dbg !10

Popped off OI-WL:   %maskedptr = and i64 %ptrint, 63, !dbg !10
markOverdefined:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10

Popped off OI-WL:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10

Popped off BBWL: 
entry:
  %retval.i61 = alloca %struct.timespec, align 8
  %retval.i = alloca %struct.timespec, align 8
  %cmp = icmp eq i32 %N, 1024, !dbg !8
  tail call void @llvm.assume(i1 %cmp), !dbg !9
  %ptrint = ptrtoint float* %a to i64, !dbg !10
  %maskedptr = and i64 %ptrint, 63, !dbg !10
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
  tail call void @llvm.assume(i1 %maskcond), !dbg !10
  %ptrint1 = ptrtoint float* %b to i64, !dbg !11
  %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
  %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
  tail call void @llvm.assume(i1 %maskcond3), !dbg !11
  %ptrint4 = ptrtoint float* %c to i64, !dbg !12
  %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
  %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
  tail call void @llvm.assume(i1 %maskcond6), !dbg !12
  %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
  %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
  %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
  br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17

SCCP: Don't know how to handle:   %retval.i61 = alloca %struct.timespec, align 8
markOverdefined:   %retval.i61 = alloca %struct.timespec, align 8
SCCP: Don't know how to handle:   %retval.i = alloca %struct.timespec, align 8
markOverdefined:   %retval.i = alloca %struct.timespec, align 8
markOverdefined:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
markOverdefined:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
markOverdefined:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
Marking Block Executable: _ZL7gettimev.exit
Marking Block Executable: cond.false.i

Popped off BBWL: 
cond.false.i:                                     ; preds = %entry
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
  unreachable, !dbg !17


Popped off BBWL: 
_ZL7gettimev.exit:                                ; preds = %entry
  %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
  %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
  %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
  %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
  br label %for.cond8.preheader, !dbg !19

markOverdefined:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
markOverdefined:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
markOverdefined:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
markOverdefined:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
Marking Block Executable: for.cond8.preheader

Popped off BBWL: 
for.cond8.preheader:                              ; preds = %_ZL7gettimev.exit, %for.cond.cleanup10
  %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
  br label %for.body11, !dbg !20

markConstant: i32 0:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
Marking Block Executable: for.body11

Popped off BBWL: 
for.body11:                                       ; preds = %for.cond8.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
  %4 = bitcast float* %arrayidx to i32*, !dbg !53
  %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
  %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
  store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
  %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
  %.cast = bitcast i32 %5 to float, !dbg !61
  %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
  br i1 %cmp18, label %if.then, label %for.inc, !dbg !60

markConstant: i64 0:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
markOverdefined:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
markOverdefined:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
markOverdefined:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
markOverdefined:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
markOverdefined:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
markOverdefined:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
markOverdefined:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
markOverdefined:   %.cast = bitcast i32 %5 to float, !dbg !61
markOverdefined:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
Marking Block Executable: if.then
Marking Block Executable: for.inc

Popped off BBWL: 
for.inc:                                          ; preds = %for.body11, %if.then
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
  %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66
  br i1 %exitcond, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67

markConstant: i64 1:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
markConstant: i1 true:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66
Marking Edge Executable: for.inc -> for.body11
markOverdefined:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]

Popped off BBWL: 
if.then:                                          ; preds = %for.body11
  store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
  br label %for.inc, !dbg !64

Marking Edge Executable: if.then -> for.inc

Popped off OI-WL:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
markOverdefined:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65

Popped off OI-WL:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
markOverdefined:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66

Popped off OI-WL:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66
Marking Block Executable: for.cond.cleanup10

Popped off OI-WL:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62

Popped off OI-WL:   %.cast = bitcast i32 %5 to float, !dbg !61

Popped off OI-WL:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54

Popped off OI-WL:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60

Popped off OI-WL:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59

Popped off OI-WL:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58

Popped off OI-WL:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54

Popped off OI-WL:   %4 = bitcast float* %arrayidx to i32*, !dbg !53

Popped off OI-WL:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53

Popped off OI-WL:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18

Popped off OI-WL:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18

Popped off OI-WL:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18

Popped off OI-WL:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18

Popped off OI-WL:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17

Popped off OI-WL:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13

Popped off OI-WL:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13

Popped off OI-WL:   %retval.i = alloca %struct.timespec, align 8

Popped off OI-WL:   %retval.i61 = alloca %struct.timespec, align 8

Popped off I-WL:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66

Popped off I-WL:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65

Popped off I-WL:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]

Popped off I-WL:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
markConstant: i32 1:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49

Popped off I-WL:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
markConstant: i1 true:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50

Popped off I-WL:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50
Marking Edge Executable: for.cond.cleanup10 -> for.cond8.preheader
markOverdefined:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]

Popped off BBWL: 
for.cond.cleanup10:                               ; preds = %for.inc
  %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
  %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50
  br i1 %exitcond81, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51

markOverdefined:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
markOverdefined:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50
Marking Block Executable: for.cond.cleanup

Popped off BBWL: 
for.cond.cleanup:                                 ; preds = %for.cond.cleanup10
  %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
  %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
  %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
  br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23

markOverdefined:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
markOverdefined:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
markOverdefined:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
Marking Block Executable: _ZL7gettimev.exit70
Marking Block Executable: cond.false.i64

Popped off BBWL: 
cond.false.i64:                                   ; preds = %for.cond.cleanup
  call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
  unreachable, !dbg !23


Popped off BBWL: 
_ZL7gettimev.exit70:                              ; preds = %for.cond.cleanup
  %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
  %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
  %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
  %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
  %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
  %conv.i = sitofp i64 %sub.i to double, !dbg !28
  %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
  %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
  %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
  %add.i = fadd double %mul.i, %conv.i, !dbg !32
  %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
  %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
  %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
  %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
  %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
  %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
  %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
  ret void, !dbg !48

markOverdefined:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
markOverdefined:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
markOverdefined:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
markOverdefined:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
markOverdefined:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
markOverdefined:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
markOverdefined:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
markOverdefined:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
markOverdefined:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
markOverdefined:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
markOverdefined:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
markOverdefined:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
markOverdefined:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
markOverdefined:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
markOverdefined:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
markOverdefined:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
markOverdefined:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46

Popped off OI-WL:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46

Popped off OI-WL:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45

Popped off OI-WL:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43

Popped off OI-WL:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42

Popped off OI-WL:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40

Popped off OI-WL:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37

Popped off OI-WL:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33

Popped off OI-WL:   %add.i = fadd double %mul.i, %conv.i, !dbg !32

Popped off OI-WL:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31

Popped off OI-WL:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30

Popped off OI-WL:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29

Popped off OI-WL:   %conv.i = sitofp i64 %sub.i to double, !dbg !28

Popped off OI-WL:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25

Popped off OI-WL:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24

Popped off OI-WL:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24

Popped off OI-WL:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24

Popped off OI-WL:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24

Popped off OI-WL:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23

Popped off OI-WL:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21

Popped off OI-WL:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21

Popped off OI-WL:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50

Popped off OI-WL:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49

Popped off OI-WL:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
RESOLVING UNDEFs
DemandedBits: Root:   tail call void @llvm.assume(i1 %cmp), !dbg !9
DemandedBits: Root:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
DemandedBits: Root:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
DemandedBits: Root:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
DemandedBits: Root:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
DemandedBits: Root:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
DemandedBits: Root:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
DemandedBits: Root:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
DemandedBits: Root:   unreachable, !dbg !17
DemandedBits: Root:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
DemandedBits: Root:   br label %for.cond8.preheader, !dbg !19
DemandedBits: Root:   br label %for.body11, !dbg !20
DemandedBits: Root:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
DemandedBits: Root:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
DemandedBits: Root:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
DemandedBits: Root:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
DemandedBits: Root:   unreachable, !dbg !23
DemandedBits: Root:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
DemandedBits: Root:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
DemandedBits: Root:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
DemandedBits: Root:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
DemandedBits: Root:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
DemandedBits: Root:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
DemandedBits: Root:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
DemandedBits: Root:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
DemandedBits: Root:   ret void, !dbg !48
DemandedBits: Root:   br i1 %exitcond81, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51
DemandedBits: Root:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
DemandedBits: Root:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
DemandedBits: Root:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
DemandedBits: Root:   br label %for.inc, !dbg !64
DemandedBits: Root:   br i1 %exitcond, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67
DemandedBits: Visiting:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66 Alive Out: 0x1
DemandedBits: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
DemandedBits: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
DemandedBits: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
DemandedBits: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62 Alive Out: 0x1
DemandedBits: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
DemandedBits: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
DemandedBits: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 Alive Out: 0xffffffff
DemandedBits: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
DemandedBits: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
DemandedBits: Visiting:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50 Alive Out: 0x1
DemandedBits: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49 Alive Out: 0xffffffff
DemandedBits: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] Alive Out: 0xffffffff
DemandedBits: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
DemandedBits: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
DemandedBits: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
DemandedBits: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
DemandedBits: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
DemandedBits: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
DemandedBits: Visiting:   %retval.i = alloca %struct.timespec, align 8
DemandedBits: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
DemandedBits: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
DemandedBits: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
DemandedBits: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
DemandedBits: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
DemandedBits: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
DemandedBits: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23 Alive Out: 0x1
DemandedBits: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21 Alive Out: 0xffffffff
DemandedBits: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
DemandedBits: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17 Alive Out: 0x1
DemandedBits: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 Alive Out: 0xffffffff
DemandedBits: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
DemandedBits: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12 Alive Out: 0x1
DemandedBits: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 Alive Out: 0x3f
DemandedBits: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11 Alive Out: 0x1
DemandedBits: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 Alive Out: 0x3f
DemandedBits: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10 Alive Out: 0x1
DemandedBits: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10 Alive Out: 0xffffffffffffffff
DemandedBits: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10 Alive Out: 0x3f
DemandedBits: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8 Alive Out: 0x1


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 77 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %exitcond = icmp ne i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67
IC: ADD:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Mod =   br i1 %exitcond, label %for.body11, label %for.cond.cleanup10, !dbg !20, !llvm.loop !67
    New =   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: ADD:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp ne i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51
IC: ADD:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Mod =   br i1 %exitcond81, label %for.cond8.preheader, label %for.cond.cleanup, !dbg !19, !llvm.loop !51
    New =   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: ADD:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64


INSTCOMBINE ITERATION #2 on _Z5test2PfS_S_i
IC: ADDING: 77 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
Jump threading on function '_Z5test2PfS_S_i'
LVI Getting value   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 at ''
  Result = overdefined
LVI Getting block end value   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 at 'entry'
PUSH:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 in entry
 compute BB 'entry' - unknown inst def found.
POP   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13 in entry = overdefined
  Result = overdefined
LVI Getting value   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21 at ''
  Result = overdefined
LVI Getting block end value   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21 at 'for.cond.cleanup'
PUSH:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21 in for.cond.cleanup
 compute BB 'for.cond.cleanup' - unknown inst def found.
POP   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21 in for.cond.cleanup = overdefined
  Result = overdefined
LVI Getting value   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49 at ''
  Result = overdefined
LVI Getting edge value   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] from 'for.inc' to 'for.cond.cleanup10'
PUSH:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.inc
PUSH:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.body11
 compute BB 'for.body11' - overdefined because of pred (non local).
POP   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.body11 = overdefined
 compute BB 'for.inc' - overdefined because of pred (non local).
POP   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.inc = overdefined
  Result = overdefined
LVI Getting value   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65 at ''
  Result = overdefined
LVI Getting edge value   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] from 'for.body11' to 'for.inc'
PUSH:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in for.body11
PUSH:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65 in for.inc
PUSH:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in for.inc
 compute BB 'for.inc' - overdefined because of pred (non local).
POP   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in for.inc = overdefined
POP   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65 in for.inc = constantrange<1, 0>
 compute BB 'for.body11' - overdefined because of pred (local).
POP   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in for.body11 = overdefined
  Result = overdefined
LVI Getting edge value   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] from 'if.then' to 'for.inc'
PUSH:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in if.then
 compute BB 'if.then' - overdefined because of pred (non local).
POP   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ] in if.then = overdefined
  Result = overdefined
LVI Getting value i32 %N at 'cmp'
  Result = overdefined
LVI Getting block end value   %ptrint = ptrtoint float* %a to i64, !dbg !10 at 'entry'
PUSH:   %ptrint = ptrtoint float* %a to i64, !dbg !10 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint = ptrtoint float* %a to i64, !dbg !10 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 at 'entry'
PUSH:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint1 = ptrtoint float* %b to i64, !dbg !11 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 at 'entry'
PUSH:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 in entry
 compute BB 'entry' - overdefined (unknown cast).
POP   %ptrint4 = ptrtoint float* %c to i64, !dbg !12 in entry = overdefined
  Result = overdefined
LVI Getting block end value   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 at '_ZL7gettimev.exit'
PUSH:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 in _ZL7gettimev.exit
POP   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18 in _ZL7gettimev.exit = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting edge value   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49 from 'for.cond.cleanup10' to 'for.cond8.preheader'
PUSH:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49 in for.cond.cleanup10
PUSH:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.cond.cleanup10
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ] in for.cond.cleanup10 = overdefined
POP   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49 in for.cond.cleanup10 = constantrange<1, 0>
  Result = constantrange<1, 0>
LVI Getting edge value   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65 from 'for.inc' to 'for.body11'
  Result = constantrange<1, 0>
LVI Getting block end value   %4 = bitcast float* %arrayidx to i32*, !dbg !53 at 'for.body11'
PUSH:   %4 = bitcast float* %arrayidx to i32*, !dbg !53 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %4 = bitcast float* %arrayidx to i32*, !dbg !53 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 at 'for.body11'
PUSH:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 at 'for.body11'
PUSH:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 in for.body11 = overdefined
  Result = overdefined
LVI Getting block end value   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 at 'if.then'
PUSH:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 in if.then
PUSH:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 in for.body11
 compute BB 'for.body11' - unknown inst def found.
POP   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 in for.body11 = overdefined
 compute BB 'if.then' - overdefined because of pred (non local).
POP   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 in if.then = notconstant<float* null>
  Result = notconstant<float* null>
LVI Getting block end value   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24 at '_ZL7gettimev.exit70'
PUSH:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24 in _ZL7gettimev.exit70
POP   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24 in _ZL7gettimev.exit70 = notconstant<i64* null>
  Result = notconstant<i64* null>
LVI Getting block end value   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24 at '_ZL7gettimev.exit70'
PUSH:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24 in _ZL7gettimev.exit70
 compute BB '_ZL7gettimev.exit70' - unknown inst def found.
POP   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 at '_ZL7gettimev.exit70'
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in _ZL7gettimev.exit70
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup10
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.inc
PUSH:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.body11
 compute BB 'for.body11' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.body11 = overdefined
 compute BB 'for.inc' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.inc = overdefined
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup10 = overdefined
 compute BB 'for.cond.cleanup' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in for.cond.cleanup = overdefined
 compute BB '_ZL7gettimev.exit70' - overdefined because of pred (non local).
POP   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24 at '_ZL7gettimev.exit70'
PUSH:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24 in _ZL7gettimev.exit70
 compute BB '_ZL7gettimev.exit70' - unknown inst def found.
POP   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
LVI Getting block end value   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 at '_ZL7gettimev.exit70'
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in _ZL7gettimev.exit70
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup10
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.inc
PUSH:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.body11
 compute BB 'for.body11' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.body11 = overdefined
 compute BB 'for.inc' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.inc = overdefined
 compute BB 'for.cond.cleanup10' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup10 = overdefined
 compute BB 'for.cond.cleanup' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in for.cond.cleanup = overdefined
 compute BB '_ZL7gettimev.exit70' - overdefined because of pred (non local).
POP   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18 in _ZL7gettimev.exit70 = overdefined
  Result = overdefined
Starting Memory SSA clobber for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
LICM: Using MemorySSA.
Starting Memory SSA clobber for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 17 = MemoryDef(16)->16 MustAlias
Optimized Memory SSA clobber for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 16 = MemoryDef(19)
Result Memory SSA clobber [SkipSelf = 1] for   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54 is 16 = MemoryDef(19)
LICM sinking instruction:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
Starting Memory SSA clobber for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 16 = MemoryDef(19)->19 MayAlias
Optimized Memory SSA clobber for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 19 = MemoryPhi({for.cond8.preheader,20},{for.inc,18})
Result Memory SSA clobber [SkipSelf = 1] for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 is 19 = MemoryPhi({for.cond8.preheader,20},{for.inc,18})
LICM sinking instruction:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
LICM sinking instruction:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
LICM: Using MemorySSA.
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %_ZL7gettimev.exit
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 11, Num: 12
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc
8: %if.then
9: %for.body11
10: %for.cond8.preheader
11: %_ZL7gettimev.exit
12: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %_ZL7gettimev.exit70
mark live:   tail call void @llvm.assume(i1 %cmp), !dbg !9
mark block live: entry
mark live:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
mark live:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
mark live:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
mark live:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
mark live:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
mark live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
mark block live: cond.false.i
mark live:   unreachable, !dbg !17
mark live:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
mark block live: _ZL7gettimev.exit
mark live:   br label %for.cond8.preheader, !dbg !19
mark live:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
mark block live: for.cond.cleanup
mark live:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
mark live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
mark block live: cond.false.i64
mark live:   unreachable, !dbg !23
mark live:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
mark block live: _ZL7gettimev.exit70
mark live:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
mark live:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
mark live:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
mark live:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
mark live:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
mark live:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
mark live:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
mark live:   ret void, !dbg !48
mark live:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
mark block live: for.body11
mark live:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
mark block live: if.then
mark live:   br label %for.inc, !dbg !64
mark live:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
mark block live: for.cond.cleanup10
mark block live: for.inc
mark live:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
mark block live: for.cond8.preheader
mark live:   br label %for.body11, !dbg !20
mark live:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
mark live:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
mark live:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
post-dom root child is a return: _ZL7gettimev.exit70
work live:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
mark live:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
work live:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
mark live:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
mark live:   %.cast = bitcast i32 %5 to float, !dbg !61
work live:   %.cast = bitcast i32 %5 to float, !dbg !61
mark live:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
work live:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
mark live:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
work live:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
mark live:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
work live:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
mark live:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
work live:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
mark live:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
work live:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
work live:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
mark live:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
work live:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
work live:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
mark live:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
work live:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
work live:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
mark live:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
work live:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
work live:   br label %for.body11, !dbg !20
work live:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
mark live:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
work live:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
mark live:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
work live:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
mark live:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
work live:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
work live:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
mark live:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
work live:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
work live:   br label %for.inc, !dbg !64
work live:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
mark live:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
work live:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
work live:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
mark live:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
work live:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
work live:   ret void, !dbg !48
work live:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
work live:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
work live:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
work live:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
work live:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
work live:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
mark live:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
work live:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
mark live:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
mark live:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
work live:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
mark live:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
work live:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
mark live:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
mark live:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
work live:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
mark live:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
work live:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
mark live:   %retval.i = alloca %struct.timespec, align 8
work live:   %retval.i = alloca %struct.timespec, align 8
work live:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
mark live:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
work live:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
mark live:   %retval.i61 = alloca %struct.timespec, align 8
work live:   %retval.i61 = alloca %struct.timespec, align 8
work live:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
mark live:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
work live:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
mark live:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
work live:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
mark live:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
mark live:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
work live:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
mark live:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
work live:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
work live:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
mark live:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
work live:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
work live:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
work live:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
mark live:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
work live:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
work live:   unreachable, !dbg !23
work live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
work live:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
work live:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
work live:   br label %for.cond8.preheader, !dbg !19
work live:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
mark live:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
work live:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
work live:   unreachable, !dbg !17
work live:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
work live:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
work live:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
work live:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
mark live:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
work live:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
mark live:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
work live:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
mark live:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
work live:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
work live:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
mark live:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
work live:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
mark live:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
work live:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
mark live:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
work live:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
work live:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
mark live:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
work live:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
mark live:   %maskedptr = and i64 %ptrint, 63, !dbg !10
work live:   %maskedptr = and i64 %ptrint, 63, !dbg !10
mark live:   %ptrint = ptrtoint float* %a to i64, !dbg !10
work live:   %ptrint = ptrtoint float* %a to i64, !dbg !10
work live:   tail call void @llvm.assume(i1 %cmp), !dbg !9
mark live:   %cmp = icmp eq i32 %N, 1024, !dbg !8
work live:   %cmp = icmp eq i32 %N, 1024, !dbg !8
final dead terminator blocks: 
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 77 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #11, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #11, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #12, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_Z5test2PfS_S_i'<<0x556181dd4eb0>>  #uses=1
  CS<0x556181ca89d8> calls function '__assert_fail'
  CS<0x556181eec248> calls function '__assert_fail'
  CS<0x556181ee9e78> calls function 'clock_gettime'
  CS<0x556181dc9560> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce3d18> calls function '_ZNSo9_M_insertIdEERSoT_'
  CS<0x556181ee8d60> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce4878> calls function '_ZNSolsEi'
  CS<0x556181ed86c0> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181ce59d8> calls function '_ZNSolsEi'
  CS<0x556181cc3f80> calls function '_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l'
  CS<0x556181cda348> calls function 'clock_gettime'
  CS<0x556181eec460> calls function 'strlen'
  CS<0x556180fcc5c0> calls function 'strlen'
  CS<0x556181da3120> calls function 'strlen'
  CS<0x556181e8a5e0> calls function 'strlen'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: llvm.assume: 0 call sites.
Inliner visiting SCC: __cxx_global_var_init: 0 call sites.
	discovered a new reachable node %entry
SROA function: __cxx_global_var_init
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '__cxx_global_var_init'
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on __cxx_global_var_init
IC: ADDING: 3 instrs to worklist
IC: Visiting:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9
	discovered a new reachable node %entry
---- Branch Probability Info : __cxx_global_var_init ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: __cxx_global_var_init
======================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: __cxx_global_var_init
 - entry: float = 1.0, int = 8

Marked as tail call candidate:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
Marked as tail call candidate:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on __cxx_global_var_init
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9
Instruction Merger
GVN iteration: 0
SCCP on function '__cxx_global_var_init'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
  ret void, !dbg !9

markOverdefined:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9

Popped off OI-WL:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
RESOLVING UNDEFs
DemandedBits: Root:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
DemandedBits: Root:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
DemandedBits: Root:   ret void, !dbg !9
DemandedBits: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9 Alive Out: 0x0


INSTCOMBINE ITERATION #1 on __cxx_global_var_init
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9
Jump threading on function '__cxx_global_var_init'
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
mark block live: entry
mark live:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
mark live:   ret void, !dbg !9
post-dom root child is a return: entry
work live:   ret void, !dbg !9
work live:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
work live:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on __cxx_global_var_init
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !9
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !9
IC: Visiting:   ret void, !dbg !9
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '__cxx_global_var_init'<<0x556181dd79f0>>  #uses=1
  CS<0x556181638380> calls function '_ZNSt8ios_base4InitC1Ev'
  CS<0x5561811a7920> calls function '__cxa_atexit'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: _GLOBAL__sub_I_test2.cpp: 1 call sites.
      Analyzing call of __cxx_global_var_init... (caller:_GLOBAL__sub_I_test2.cpp)
      NumConstantArgs: 0
      NumConstantOffsetPtrArgs: 0
      NumAllocaArgs: 0
      NumConstantPtrCmps: 0
      NumConstantPtrDiffs: 0
      NumInstructionsSimplified: 1
      NumInstructions: 3
      SROACostSavings: 0
      SROACostSavingsLost: 0
      LoadEliminationCost: 0
      ContainsNoDuplicateCall: 0
      Cost: -14950
      Threshold: 375
    Inlining (cost=-14950, threshold=375), Call:   call fastcc void @__cxx_global_var_init(), !dbg !8
    -> Deleting dead function: __cxx_global_var_init
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_GLOBAL__sub_I_test2.cpp'<<0x556181009640>>  #uses=1
  CS<0x556181e96c10> calls function '__cxa_atexit'
  CS<0x556181eea250> calls function '_ZNSt8ios_base4InitC1Ev'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
	discovered a new reachable node %entry
SROA function: _GLOBAL__sub_I_test2.cpp
Not running SpeculativeExecution because TTI->hasBranchDivergence() is false.
Jump threading on function '_GLOBAL__sub_I_test2.cpp'
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
IC: Visiting:   ret void
	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8

Marked as tail call candidate:   call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
Marked as tail call candidate:   %0 = call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
	discovered a new reachable node %entry
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
IC: Visiting:   ret void
Instruction Merger
GVN iteration: 0
SCCP on function '_GLOBAL__sub_I_test2.cpp'
Marking Block Executable: entry

Popped off BBWL: 
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
  ret void

markOverdefined:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8

Popped off OI-WL:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
RESOLVING UNDEFs
DemandedBits: Root:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
DemandedBits: Root:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
DemandedBits: Root:   ret void
DemandedBits: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8 Alive Out: 0x0


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
IC: Visiting:   ret void
Jump threading on function '_GLOBAL__sub_I_test2.cpp'
		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
mark live:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
mark block live: entry
mark live:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
mark live:   ret void
post-dom root child is a return: entry
work live:   ret void
work live:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
work live:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
final dead terminator blocks: 
	discovered a new reachable node %entry


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #11, !dbg !8
IC: Visiting:   ret void
CGSCCPASSMGR: Pass Dirtied SCC: Function Pass Manager
CGSCCPASSMGR: Refreshing SCC with 1 nodes:
Call graph node for function: '_GLOBAL__sub_I_test2.cpp'<<0x556181009640>>  #uses=1
  CS<0x556181e96c10> calls function '__cxa_atexit'
  CS<0x556181eea250> calls function '_ZNSt8ios_base4InitC1Ev'

CGSCCPASSMGR: SCC Refresh didn't change call graph.
Inliner visiting SCC: INDIRECTNODE: 0 call sites.
GLOBAL DEAD: declare dso_local void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"*, i32) local_unnamed_addr #0

GLOBAL DEAD: ; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #6

Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #3 section ".text.startup" !dbg !69 {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !70
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !70
  ret void
}

Trying to evaluate BB: 
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !8
  ret void

Evaluating Instruction:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
Can not constant fold function call.
Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #3 section ".text.startup" !dbg !69 {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !70
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !70
  ret void
}

Trying to evaluate BB: 
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !8
  ret void

Evaluating Instruction:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
Can not constant fold function call.
Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #3 section ".text.startup" !dbg !69 {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !70
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !70
  ret void
}

Building type info -> vtable map
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
F2I: Looking at function _Z5test2PfS_S_i
F2I:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62:empty-set
F2I:   %.cast = bitcast i32 %5 to float, !dbg !61:full-set
F2I:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54:full-set
F2I:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62:full-set
F2I: Failing because of   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc if.then for.body11 for.cond8.preheader
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %_ZL7gettimev.exit
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 11, Num: 12
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc
8: %if.then
9: %for.body11
10: %for.cond8.preheader
11: %_ZL7gettimev.exit
12: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond.cleanup10
set edge for.cond.cleanup10 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond.cleanup10 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.inc
set edge for.inc -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.inc -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond8.preheader
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond8.preheader
 - 4: for.body11
 - 5: if.then
 - 6: for.inc
 - 7: for.cond.cleanup10
 - 8: for.cond.cleanup
 - 9: cond.false.i64
 - 10: _ZL7gettimev.exit70
loop-detection
 - loop = for.cond8.preheader
 - loop = for.body11
 - loop = for.body11: member = if.then
 - loop = for.body11: member = for.inc
 - loop = for.cond8.preheader: member = for.cond.cleanup10
compute-mass-in-loop: for.body11*
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then
  => assign 8000000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc
 - node: for.inc
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.body11
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup10
compute-loop-scale: for.body11*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.body11*
 - node: for.body11
 - node: if.then
 - node: for.inc
compute-mass-in-loop: for.cond8.preheader*
 - node: for.cond8.preheader
  => [ local  ] weight = 2147483648, succ = for.body11
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.cond8.preheader
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup
compute-loop-scale: for.cond8.preheader*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.cond8.preheader*
 - node: for.cond8.preheader
 - node: for.body11
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond8.preheader
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond8.preheader
 - node: for.cond8.preheader
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond8.preheader*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond8.preheader: 1.0 => 31.99999999
 - for.body11: 32.0 => 1024.0
 - for.cond.cleanup10: 1.0 => 31.99999999
unwrap-loop-package: for.body11*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - for.body11: 1.0 => 1024.0
 - if.then: 0.5 => 511.9999998
 - for.inc: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond8.preheader: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.body11: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - for.cond.cleanup10: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond8.preheader: float = 32.0, int = 549755813823
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond.cleanup10: float = 32.0, int = 549755813823
 - for.body11: float = 1024.0, int = 17592186042367
 - if.then: float = 512.0, int = 8796093021183
 - for.inc: float = 1024.0, int = 17592186042367


LV: Checking a loop in "_Z5test2PfS_S_i" from test2.cpp:22:5
LV: Loop hints: force=? width=0 unroll=0
LV: Found a loop: for.body11
LV: Found an induction variable.
LAA: Found a loop in _Z5test2PfS_S_i: for.body11
LAA: Processing memory accesses...
  AST: Alias Set Tracker: 3 alias sets for 4 pointer values.
  AliasSet[0x556181848310, 2] must alias, No access Pointers: (i32* %6, unknown), (float* %arrayidx13, unknown)
  AliasSet[0x556181cda760, 1] must alias, No access Pointers: (i32* %4, unknown)
  AliasSet[0x556181dce5f0, 1] must alias, No access Pointers: (float* %arrayidx15, unknown)

LAA:   Accesses(4):
	  %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 (write)
	  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 (write)
	  %4 = bitcast float* %arrayidx to i32*, !dbg !53 (read-only)
	  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 (read-only)
Underlying objects for pointer   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
  float* %c
Underlying objects for pointer   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
  float* %c
Underlying objects for pointer   %4 = bitcast float* %arrayidx to i32*, !dbg !53
  float* %a
Underlying objects for pointer   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
  float* %b
LAA: Found a runtime check ptr:  %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
LAA: Found a runtime check ptr:  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
LAA: Found a runtime check ptr:  %4 = bitcast float* %arrayidx to i32*, !dbg !53
LAA: Found a runtime check ptr:  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
LAA: We need to do 0 pointer comparisons.
LAA: May be able to perform a memory runtime check if needed.
LAA: Checking memory dependencies
LAA: Src Scev: {%c,+,4}<nsw><%for.body11>Sink Scev: {%c,+,4}<nsw><%for.body11>(Induction step: 1)
LAA: Distance for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 to   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54: 0
LAA: Zero dependence difference but different types
Total Dependences: 1
LAA: unsafe dependent memory operations in loop
test2.cpp:22:5: remark: loop not vectorized: unsafe dependent memory operations in loop. Use #pragma loop distribute(enable) to allow loop distribution to attempt to isolate the offending operations into a separate loop. fdgk HIHI! [-Rpass-analysis=loop-vectorize]
    for (int j = 0; j < N; j++)
    ^
LV: Can't vectorize due to memory conflicts
LV: We can vectorize this loop!
LV: Not vectorizing: Cannot prove legality.
test2.cpp:22:5: remark: loop not vectorized [-Rpass-missed=loop-vectorize]
LAA: Found a loop in _Z5test2PfS_S_i: for.body11
LAA: Processing memory accesses...
  AST: Alias Set Tracker: 3 alias sets for 4 pointer values.
  AliasSet[0x556181ce3d70, 2] must alias, No access Pointers: (i32* %6, unknown), (float* %arrayidx13, unknown)
  AliasSet[0x556181848310, 1] must alias, No access Pointers: (i32* %4, unknown)
  AliasSet[0x556181dd4200, 1] must alias, No access Pointers: (float* %arrayidx15, unknown)

LAA:   Accesses(4):
	  %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 (write)
	  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 (write)
	  %4 = bitcast float* %arrayidx to i32*, !dbg !53 (read-only)
	  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 (read-only)
Underlying objects for pointer   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
  float* %c
Underlying objects for pointer   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
  float* %c
Underlying objects for pointer   %4 = bitcast float* %arrayidx to i32*, !dbg !53
  float* %a
Underlying objects for pointer   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
  float* %b
LAA: Found a runtime check ptr:  %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
LAA: Found a runtime check ptr:  %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
LAA: Found a runtime check ptr:  %4 = bitcast float* %arrayidx to i32*, !dbg !53
LAA: Found a runtime check ptr:  %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
LAA: We need to do 0 pointer comparisons.
LAA: May be able to perform a memory runtime check if needed.
LAA: Checking memory dependencies
LAA: Src Scev: {%c,+,4}<nsw><%for.body11>Sink Scev: {%c,+,4}<nsw><%for.body11>(Induction step: 1)
LAA: Distance for   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54 to   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54: 0
LAA: Zero dependence difference but different types
Total Dependences: 1
LAA: unsafe dependent memory operations in loop

In "_Z5test2PfS_S_i" checking Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc<latch><exiting>



INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 77 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #7, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #7, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
Looking to fold for.cond8.preheader into for.body11
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
SLP: Analyzing blocks in _Z5test2PfS_S_i.
Ephemeral Value:   %cmp = icmp eq i32 %N, 1024, !dbg !8
Ephemeral Value:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
Ephemeral Value:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
Ephemeral Value:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
Ephemeral Value:   %maskedptr = and i64 %ptrint, 63, !dbg !10
Ephemeral Value:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
Ephemeral Value:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
Ephemeral Value:   %ptrint = ptrtoint float* %a to i64, !dbg !10
Ephemeral Value:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
Ephemeral Value:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Found stores for 1 underlying objects.
SLP: Found stores for 1 underlying objects.
SLP: Trying to vectorize starting at PHIs (1)
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Found GEPs for 3 underlying objects.
SLP: Trying to vectorize starting at PHIs (1)
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.
SLP: Trying to vectorize a list of length = 2.


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 77 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #7, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next, %for.inc ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %exitcond = icmp eq i64 %indvars.iv.next, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #7, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
Loop Unroll: F[_Z5test2PfS_S_i] Loop %for.body11
  Loop Size = 12
  partially unrolling with count: 2
  Trip Count = 1024
  Trip Multiple = 1024
UNROLLING loop %for.body11 by 2 with a breakout at trip 0!
Merging: for.body11.1 into for.inc
Legalizing 0 updates
Inserting edge %for.inc -> %if.then.1
	Reachable %for.inc -> %if.then.1
		NCA == %for.inc
Mark %if.then.1as affected, CurrentLevel 6
	Successor %for.inc.1, level = 6
		Add %for.inc.1 to a Bucket
Mark %for.inc.1as affected, CurrentLevel 6
	Successor %for.body11, level = 3
	Successor %for.cond.cleanup10, level = 7
		Marking visited not affected %for.cond.cleanup10
 Next: %for.cond.cleanup10
	Successor %for.cond8.preheader, level = 2
	Successor %for.cond.cleanup, level = 8
		Marking visited not affected %for.cond.cleanup
 Next: %for.cond.cleanup
	Successor %cond.false.i64, level = 9
		Marking visited not affected %cond.false.i64
	Successor %_ZL7gettimev.exit70, level = 9
		Marking visited not affected %_ZL7gettimev.exit70
 Next: %_ZL7gettimev.exit70
 Next: %cond.false.i64
Updating NCD = %for.inc
	IDom(%if.then.1) = %for.inc
	IDom(%for.inc.1) = %for.inc
Inserting edge %for.inc -> %for.inc.1
	Reachable %for.inc -> %for.inc.1
		NCA == %for.inc
Deleting edge %for.body11.1 -> %if.then.1
	Showing virtual edge %for.body11.1 -> %for.inc.1
	NCD %for.inc, ToIDom %for.inc
Deleting reachable %for.body11.1 -> %if.then.1
	Rebuilding subtree
	Top of subtree: %for.inc
	Showing virtual edge %for.inc -> %for.body11.1
	Showing virtual edge %for.body11.1 -> %for.inc.1
	Running Semi-NCA
Deleting edge %for.body11.1 -> %for.inc.1
	NCD %for.inc, ToIDom %for.inc
Deleting reachable %for.body11.1 -> %for.inc.1
	Rebuilding subtree
	Top of subtree: %for.inc
	Showing virtual edge %for.inc -> %for.body11.1
	Running Semi-NCA
Deleting edge %for.inc -> %for.body11.1
	NCD %for.inc, ToIDom %for.inc
IsReachableFromIDom %for.body11.1
Deleting unreachable subtree %for.body11.1
Erasing node %for.body11.1
Loop Unroll: F[_Z5test2PfS_S_i] Loop %for.cond8.preheader
  Loop Size = 26
  partially unrolling with count: 0


INSTCOMBINE ITERATION #1 on _Z5test2PfS_S_i
IC: ADDING: 91 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #7, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %arrayidx.1 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next, !dbg !53
IC: Visiting:   %8 = bitcast float* %arrayidx.1 to i32*, !dbg !53
IC: Visiting:   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13.1 = getelementptr inbounds float, float* %c, i64 %indvars.iv.next, !dbg !58
IC: Visiting:   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59
IC: Visiting:   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next, !dbg !60
IC: Visiting:   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast.1 = bitcast i32 %9 to float, !dbg !61
IC: Visiting:   %cmp18.1 = fcmp ogt float %11, %.cast.1, !dbg !62
IC: Visiting:   br i1 %cmp18.1, label %if.then.1, label %for.inc.1, !dbg !60
IC: Visiting:   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !65
IC: Mod =   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv.next, 1, !dbg !65
    New =   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2, !dbg !65
IC: ADD:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: ADD:   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2, !dbg !65
IC: Visiting:   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2, !dbg !65
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond.1, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #7, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc.1, !dbg !64
IC: Visiting:   store float %7, float* %arrayidx13, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64


INSTCOMBINE ITERATION #2 on _Z5test2PfS_S_i
IC: ADDING: 91 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #7, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: Old =   %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !65
    New =   <badref> = or i64 %indvars.iv, 1
IC: ADD:   %indvars.iv.next = or i64 %indvars.iv, 1, !dbg !65
IC: ERASE   %8 = add nuw nsw i64 %indvars.iv, 1, !dbg !65
IC: ADD:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %indvars.iv.next = or i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %arrayidx.1 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next, !dbg !53
IC: Visiting:   %8 = bitcast float* %arrayidx.1 to i32*, !dbg !53
IC: Visiting:   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13.1 = getelementptr inbounds float, float* %c, i64 %indvars.iv.next, !dbg !58
IC: Visiting:   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59
IC: Visiting:   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next, !dbg !60
IC: Visiting:   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast.1 = bitcast i32 %9 to float, !dbg !61
IC: Visiting:   %cmp18.1 = fcmp ogt float %11, %.cast.1, !dbg !62
IC: Visiting:   br i1 %cmp18.1, label %if.then.1, label %for.inc.1, !dbg !60
IC: Visiting:   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2, !dbg !65
IC: Visiting:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond.1, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #7, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc.1, !dbg !64
IC: Visiting:   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64


INSTCOMBINE ITERATION #3 on _Z5test2PfS_S_i
IC: ADDING: 91 instrs to worklist
IC: Visiting:   %retval.i61 = alloca %struct.timespec, align 8
IC: Visiting:   %retval.i = alloca %struct.timespec, align 8
IC: Visiting:   %cmp = icmp eq i32 %N, 1024, !dbg !8
IC: Visiting:   tail call void @llvm.assume(i1 %cmp), !dbg !9
IC: Visiting:   %ptrint = ptrtoint float* %a to i64, !dbg !10
IC: Visiting:   %maskedptr = and i64 %ptrint, 63, !dbg !10
IC: Visiting:   %maskcond = icmp eq i64 %maskedptr, 0, !dbg !10
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond), !dbg !10
IC: Visiting:   %ptrint1 = ptrtoint float* %b to i64, !dbg !11
IC: Visiting:   %maskedptr2 = and i64 %ptrint1, 63, !dbg !11
IC: Visiting:   %maskcond3 = icmp eq i64 %maskedptr2, 0, !dbg !11
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond3), !dbg !11
IC: Visiting:   %ptrint4 = ptrtoint float* %c to i64, !dbg !12
IC: Visiting:   %maskedptr5 = and i64 %ptrint4, 63, !dbg !12
IC: Visiting:   %maskcond6 = icmp eq i64 %maskedptr5, 0, !dbg !12
IC: Visiting:   tail call void @llvm.assume(i1 %maskcond6), !dbg !12
IC: Visiting:   %0 = bitcast %struct.timespec* %retval.i to i8*, !dbg !13
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0), !dbg !13
IC: Visiting:   %call.i = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i) #7, !dbg !13
IC: Visiting:   %cmp.i = icmp eq i32 %call.i, 0, !dbg !17
IC: Visiting:   br i1 %cmp.i, label %_ZL7gettimev.exit, label %cond.false.i, !dbg !17
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !17
IC: Visiting:   unreachable, !dbg !17
IC: Visiting:   %.fca.0.gep.i = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 0, !dbg !18
IC: Visiting:   %.fca.0.load.i = load i64, i64* %.fca.0.gep.i, align 8, !dbg !18
IC: Visiting:   %1 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i, i64 0, i32 1, !dbg !18
IC: Visiting:   %.fca.1.load.i = load i64, i64* %1, align 8, !dbg !18
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0), !dbg !18
IC: Visiting:   br label %for.cond8.preheader, !dbg !19
IC: Visiting:   %i.079 = phi i32 [ 0, %_ZL7gettimev.exit ], [ %inc24, %for.cond.cleanup10 ]
IC: Visiting:   br label %for.body11, !dbg !20
IC: Visiting:   %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]
IC: Visiting:   %arrayidx = getelementptr inbounds float, float* %a, i64 %indvars.iv, !dbg !53
IC: Visiting:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
IC: Visiting:   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58
IC: Visiting:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
IC: Visiting:   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
IC: Visiting:   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54
IC: Visiting:   %.cast = bitcast i32 %5 to float, !dbg !61
IC: Visiting:   %cmp18 = fcmp ogt float %7, %.cast, !dbg !62
IC: Visiting:   br i1 %cmp18, label %if.then, label %for.inc, !dbg !60
IC: Visiting:   %indvars.iv.next = or i64 %indvars.iv, 1, !dbg !65
IC: Visiting:   %arrayidx.1 = getelementptr inbounds float, float* %a, i64 %indvars.iv.next, !dbg !53
IC: Visiting:   %8 = bitcast float* %arrayidx.1 to i32*, !dbg !53
IC: Visiting:   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54
IC: Visiting:   %arrayidx13.1 = getelementptr inbounds float, float* %c, i64 %indvars.iv.next, !dbg !58
IC: Visiting:   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59
IC: Visiting:   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54
IC: Visiting:   %arrayidx15.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next, !dbg !60
IC: Visiting:   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54
IC: Visiting:   %.cast.1 = bitcast i32 %9 to float, !dbg !61
IC: Visiting:   %cmp18.1 = fcmp ogt float %11, %.cast.1, !dbg !62
IC: Visiting:   br i1 %cmp18.1, label %if.then.1, label %for.inc.1, !dbg !60
IC: Visiting:   %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2, !dbg !65
IC: Visiting:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66
IC: Visiting:   br i1 %exitcond.1, label %for.cond.cleanup10, label %for.body11, !dbg !20, !llvm.loop !67
IC: Visiting:   %inc24 = add nuw nsw i32 %i.079, 1, !dbg !49
IC: Visiting:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
IC: Visiting:   br i1 %exitcond81, label %for.cond.cleanup, label %for.cond8.preheader, !dbg !19, !llvm.loop !51
IC: Visiting:   %2 = bitcast %struct.timespec* %retval.i61 to i8*, !dbg !21
IC: Visiting:   call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2), !dbg !21
IC: Visiting:   %call.i62 = call i32 @clock_gettime(i32 1, %struct.timespec* nonnull %retval.i61) #7, !dbg !21
IC: Visiting:   %cmp.i63 = icmp eq i32 %call.i62, 0, !dbg !23
IC: Visiting:   br i1 %cmp.i63, label %_ZL7gettimev.exit70, label %cond.false.i64, !dbg !23
IC: Visiting:   call void @__assert_fail(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev, i64 0, i64 0)) #8, !dbg !23
IC: Visiting:   unreachable, !dbg !23
IC: Visiting:   %.fca.0.gep.i65 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 0, !dbg !24
IC: Visiting:   %.fca.0.load.i66 = load i64, i64* %.fca.0.gep.i65, align 8, !dbg !24
IC: Visiting:   %3 = getelementptr inbounds %struct.timespec, %struct.timespec* %retval.i61, i64 0, i32 1, !dbg !24
IC: Visiting:   %.fca.1.load.i68 = load i64, i64* %3, align 8, !dbg !24
IC: Visiting:   call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2), !dbg !24
IC: Visiting:   %sub.i = sub nsw i64 %.fca.0.load.i66, %.fca.0.load.i, !dbg !25
IC: Visiting:   %conv.i = sitofp i64 %sub.i to double, !dbg !28
IC: Visiting:   %sub3.i = sub nsw i64 %.fca.1.load.i68, %.fca.1.load.i, !dbg !29
IC: Visiting:   %conv4.i = sitofp i64 %sub3.i to double, !dbg !30
IC: Visiting:   %mul.i = fmul double %conv4.i, 1.000000e-09, !dbg !31
IC: Visiting:   %add.i = fadd double %mul.i, %conv.i, !dbg !32
IC: Visiting:   %call1.i = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) @_ZSt4cout, i8* nonnull getelementptr inbounds ([48 x i8], [48 x i8]* @.str, i64 0, i64 0), i64 47), !dbg !33
IC: Visiting:   %call.i71 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSo9_M_insertIdEERSoT_(%"class.std::basic_ostream"* nonnull @_ZSt4cout, double %add.i), !dbg !37
IC: Visiting:   %call1.i73 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call.i71, i8* nonnull getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8), !dbg !40
IC: Visiting:   %call32 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call.i71, i32 1024), !dbg !42
IC: Visiting:   %call1.i75 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call32, i8* nonnull getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5), !dbg !43
IC: Visiting:   %call34 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZNSolsEi(%"class.std::basic_ostream"* nonnull %call32, i32 20000000), !dbg !45
IC: Visiting:   %call1.i77 = call dereferenceable(272) %"class.std::basic_ostream"* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l(%"class.std::basic_ostream"* nonnull dereferenceable(272) %call34, i8* nonnull getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i64 2), !dbg !46
IC: Visiting:   ret void, !dbg !48
IC: Visiting:   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc.1, !dbg !64
IC: Visiting:   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54
IC: Visiting:   br label %for.inc, !dbg !64
Starting Memory SSA clobber for   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54 is 2 = MemoryDef(1)
Starting Memory SSA clobber for   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54 is MemoryUse(2) MayAlias
Optimized Memory SSA clobber for   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
Result Memory SSA clobber [SkipSelf = 0] for   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54 is 2 = MemoryDef(1)
LICM: Using MemorySSA.
Starting Memory SSA clobber for   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54 is 19 = MemoryDef(18)->18 MustAlias
Optimized Memory SSA clobber for   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54 is 18 = MemoryDef(23)
Result Memory SSA clobber [SkipSelf = 1] for   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54 is 18 = MemoryDef(23)
LICM sinking instruction:   %arrayidx15.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next, !dbg !60
Starting Memory SSA clobber for   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54 is 18 = MemoryDef(23)->21 MayAlias
Optimized Memory SSA clobber for   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54 is 21 = MemoryPhi({for.cond8.preheader,22},{for.inc.1,20})
Result Memory SSA clobber [SkipSelf = 1] for   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54 is 21 = MemoryPhi({for.cond8.preheader,22},{for.inc.1,20})
LICM sinking instruction:   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59
LICM sinking instruction:   %8 = bitcast float* %arrayidx.1 to i32*, !dbg !53
Starting Memory SSA clobber for   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54 is 17 = MemoryDef(16)->16 MustAlias
Optimized Memory SSA clobber for   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54 is 16 = MemoryDef(21)
Result Memory SSA clobber [SkipSelf = 1] for   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54 is 16 = MemoryDef(21)
LICM sinking instruction:   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60
Starting Memory SSA clobber for   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54 is 16 = MemoryDef(21)->21 MayAlias
Optimized Memory SSA clobber for   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54 is 21 = MemoryPhi({for.cond8.preheader,22},{for.inc.1,20})
Result Memory SSA clobber [SkipSelf = 1] for   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54 is 21 = MemoryPhi({for.cond8.preheader,22},{for.inc.1,20})
LICM sinking instruction:   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59
LICM sinking instruction:   %4 = bitcast float* %arrayidx to i32*, !dbg !53
LICM: Using MemorySSA.
AFI: alignment of   %4 = bitcast float* %arrayidx to i32*, !dbg !53 relative to 64 and offset 0 using diff {0,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (zext i6 {0,+,8}<%for.body11> to i64) (diff: {0,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 0 and inc 8
	alignment relative to 64 is 0 (diff: 0)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 64
	new inc alignment: 8
	new start/inc alignment: 8
AFI: alignment of   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 relative to 64 and offset 0 using diff {((-1 * %a) + %c),+,8}<nw><%for.body11>
	alignment relative to 64 is (zext i6 {((trunc float* %c to i6) + (-1 * (trunc float* %a to i6))),+,8}<%for.body11> to i64) (diff: {((-1 * %a) + %c),+,8}<nw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start ((-1 * %a) + %c) and inc 8
	alignment relative to 64 is (zext i6 ((trunc float* %c to i6) + (-1 * (trunc float* %a to i6))) to i64) (diff: ((-1 * %a) + %c))
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 0
	new inc alignment: 8
AFI: alignment of   %8 = bitcast float* %arrayidx.1 to i32*, !dbg !53 relative to 64 and offset 0 using diff {4,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (4 + (zext i6 {0,+,8}<%for.body11> to i64))<nuw><nsw> (diff: {4,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 4 and inc 8
	alignment relative to 64 is 4 (diff: 4)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 4
	new inc alignment: 8
	new start/inc alignment: 4
AFI: alignment of   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59 relative to 64 and offset 0 using diff {(4 + (-1 * %a) + %c),+,8}<nw><%for.body11>
	alignment relative to 64 is (zext i6 {(4 + (trunc float* %c to i6) + (-1 * (trunc float* %a to i6))),+,8}<%for.body11> to i64) (diff: {(4 + (-1 * %a) + %c),+,8}<nw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start (4 + (-1 * %a) + %c) and inc 8
	alignment relative to 64 is (zext i6 (4 + (trunc float* %c to i6) + (-1 * (trunc float* %a to i6))) to i64) (diff: (4 + (-1 * %a) + %c))
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 0
	new inc alignment: 8
AFI: alignment of   %arrayidx15 = getelementptr inbounds float, float* %b, i64 %indvars.iv, !dbg !60 relative to 64 and offset 0 using diff {0,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (zext i6 {0,+,8}<%for.body11> to i64) (diff: {0,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 0 and inc 8
	alignment relative to 64 is 0 (diff: 0)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 64
	new inc alignment: 8
	new start/inc alignment: 8
AFI: alignment of   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 relative to 64 and offset 0 using diff {((-1 * %b) + %c),+,8}<nw><%for.body11>
	alignment relative to 64 is (zext i6 {((trunc float* %c to i6) + (-1 * (trunc float* %b to i6))),+,8}<%for.body11> to i64) (diff: {((-1 * %b) + %c),+,8}<nw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start ((-1 * %b) + %c) and inc 8
	alignment relative to 64 is (zext i6 ((trunc float* %c to i6) + (-1 * (trunc float* %b to i6))) to i64) (diff: ((-1 * %b) + %c))
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 0
	new inc alignment: 8
AFI: alignment of   %arrayidx15.1 = getelementptr inbounds float, float* %b, i64 %indvars.iv.next, !dbg !60 relative to 64 and offset 0 using diff {4,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (4 + (zext i6 {0,+,8}<%for.body11> to i64))<nuw><nsw> (diff: {4,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 4 and inc 8
	alignment relative to 64 is 4 (diff: 4)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 4
	new inc alignment: 8
	new start/inc alignment: 4
AFI: alignment of   %arrayidx13.1 = getelementptr inbounds float, float* %c, i64 %indvars.iv.next, !dbg !58 relative to 64 and offset 0 using diff {(4 + (-1 * %b) + %c),+,8}<nw><%for.body11>
	alignment relative to 64 is (zext i6 {(4 + (trunc float* %c to i6) + (-1 * (trunc float* %b to i6))),+,8}<%for.body11> to i64) (diff: {(4 + (-1 * %b) + %c),+,8}<nw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start (4 + (-1 * %b) + %c) and inc 8
	alignment relative to 64 is (zext i6 (4 + (trunc float* %c to i6) + (-1 * (trunc float* %b to i6))) to i64) (diff: (4 + (-1 * %b) + %c))
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 0
	new inc alignment: 8
AFI: alignment of   %arrayidx13 = getelementptr inbounds float, float* %c, i64 %indvars.iv, !dbg !58 relative to 64 and offset 0 using diff {0,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (zext i6 {0,+,8}<%for.body11> to i64) (diff: {0,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 0 and inc 8
	alignment relative to 64 is 0 (diff: 0)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 64
	new inc alignment: 8
	new start/inc alignment: 8
AFI: alignment of   %6 = bitcast float* %arrayidx13 to i32*, !dbg !59 relative to 64 and offset 0 using diff {0,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (zext i6 {0,+,8}<%for.body11> to i64) (diff: {0,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 0 and inc 8
	alignment relative to 64 is 0 (diff: 0)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 64
	new inc alignment: 8
	new start/inc alignment: 8
AFI: alignment of   %10 = bitcast float* %arrayidx13.1 to i32*, !dbg !59 relative to 64 and offset 0 using diff {4,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (4 + (zext i6 {0,+,8}<%for.body11> to i64))<nuw><nsw> (diff: {4,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 4 and inc 8
	alignment relative to 64 is 4 (diff: 4)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 4
	new inc alignment: 8
	new start/inc alignment: 4
AFI: alignment of   %arrayidx13.1 = getelementptr inbounds float, float* %c, i64 %indvars.iv.next, !dbg !58 relative to 64 and offset 0 using diff {4,+,8}<nuw><nsw><%for.body11>
	alignment relative to 64 is (4 + (zext i6 {0,+,8}<%for.body11> to i64))<nuw><nsw> (diff: {4,+,8}<nuw><nsw><%for.body11>)
	new alignment: 0
	trying start/inc alignment using start 4 and inc 8
	alignment relative to 64 is 4 (diff: 4)
	alignment relative to 64 is 8 (diff: 8)
	new start alignment: 4
	new inc alignment: 8
	new start/inc alignment: 4
	discovered a new reachable node %entry
F2I: Looking at function _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8



INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !8
IC: Visiting:   ret void
	discovered a new reachable node %entry
SLP: Analyzing blocks in _GLOBAL__sub_I_test2.cpp.


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !8
IC: Visiting:   ret void


INSTCOMBINE ITERATION #1 on _GLOBAL__sub_I_test2.cpp
IC: ADDING: 3 instrs to worklist
IC: Visiting:   tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !8
IC: Visiting:   %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !8
IC: Visiting:   ret void
Optimizing Global Constructor: ; Function Attrs: uwtable
define internal void @_GLOBAL__sub_I_test2.cpp() #3 section ".text.startup" !dbg !69 {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull @_ZStL8__ioinit), !dbg !70
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #7, !dbg !70
  ret void
}

Building type info -> vtable map
Cmap[[48 x i8] c"Elapsed execution time of the loop in test2():\0A\00"] = .str
Cmap[[9 x i8] c"sec (N: \00"] = .str.1
Cmap[[6 x i8] c", I: \00"] = .str.2
Cmap[[3 x i8] c")\0A\00"] = .str.3
Cmap[[7 x i8] c"r == 0\00"] = .str.4
Cmap[[13 x i8] c"./fasttime.h\00"] = .str.5
Cmap[[21 x i8] c"fasttime_t gettime()\00"] = __PRETTY_FUNCTION__._ZL7gettimev
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc.1 if.then.1 for.inc if.then for.body11 for.cond8.preheader
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %if.then.1
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc.1
8: %for.inc
9: %if.then
10: %for.body11
11: %for.cond8.preheader
12: %_ZL7gettimev.exit
13: %if.then.1
14: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %if.then.1
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond.cleanup10
set edge for.cond.cleanup10 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond.cleanup10 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.inc.1
set edge for.inc.1 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.inc.1 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for if.then.1
Computing probabilities for for.inc
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond8.preheader
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond8.preheader
 - 4: for.body11
 - 5: if.then
 - 6: for.inc
 - 7: if.then.1
 - 8: for.inc.1
 - 9: for.cond.cleanup10
 - 10: for.cond.cleanup
 - 11: cond.false.i64
 - 12: _ZL7gettimev.exit70
loop-detection
 - loop = for.cond8.preheader
 - loop = for.body11
 - loop = for.body11: member = if.then
 - loop = for.body11: member = for.inc
 - loop = for.body11: member = if.then.1
 - loop = for.body11: member = for.inc.1
 - loop = for.cond8.preheader: member = for.cond.cleanup10
compute-mass-in-loop: for.body11*
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then
  => assign 8000000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc
 - node: for.inc
  => [ local  ] weight = 1073741824, succ = if.then.1
  => [ local  ] weight = 1073741824, succ = for.inc.1
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then.1
  => assign 8000000000000000 (0000000000000000) to for.inc.1
 - node: if.then.1
  => [ local  ] weight = 2147483648, succ = for.inc.1
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc.1
 - node: for.inc.1
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.body11
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup10
compute-loop-scale: for.body11*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.body11*
 - node: for.body11
 - node: if.then
 - node: for.inc
 - node: if.then.1
 - node: for.inc.1
compute-mass-in-loop: for.cond8.preheader*
 - node: for.cond8.preheader
  => [ local  ] weight = 2147483648, succ = for.body11
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.cond8.preheader
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup
compute-loop-scale: for.cond8.preheader*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.cond8.preheader*
 - node: for.cond8.preheader
 - node: for.body11
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond8.preheader
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond8.preheader
 - node: for.cond8.preheader
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond8.preheader*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond8.preheader: 1.0 => 31.99999999
 - for.body11: 32.0 => 1024.0
 - for.cond.cleanup10: 1.0 => 31.99999999
unwrap-loop-package: for.body11*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - for.body11: 1.0 => 1024.0
 - if.then: 0.5 => 511.9999998
 - for.inc: 1.0 => 1024.0
 - if.then.1: 0.5 => 511.9999998
 - for.inc.1: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond8.preheader: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.body11: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then.1: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc.1: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - for.cond.cleanup10: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond8.preheader: float = 32.0, int = 549755813823
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond.cleanup10: float = 32.0, int = 549755813823
 - for.body11: float = 1024.0, int = 17592186042367
 - if.then: float = 512.0, int = 8796093021183
 - for.inc: float = 1024.0, int = 17592186042367
 - if.then.1: float = 512.0, int = 8796093021183
 - for.inc.1: float = 1024.0, int = 17592186042367


block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond8.preheader
 - 4: for.body11
 - 5: if.then
 - 6: for.inc
 - 7: if.then.1
 - 8: for.inc.1
 - 9: for.cond.cleanup10
 - 10: for.cond.cleanup
 - 11: cond.false.i64
 - 12: _ZL7gettimev.exit70
loop-detection
 - loop = for.cond8.preheader
 - loop = for.body11
 - loop = for.body11: member = if.then
 - loop = for.body11: member = for.inc
 - loop = for.body11: member = if.then.1
 - loop = for.body11: member = for.inc.1
 - loop = for.cond8.preheader: member = for.cond.cleanup10
compute-mass-in-loop: for.body11*
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then
  => assign 8000000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc
 - node: for.inc
  => [ local  ] weight = 1073741824, succ = if.then.1
  => [ local  ] weight = 1073741824, succ = for.inc.1
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then.1
  => assign 8000000000000000 (0000000000000000) to for.inc.1
 - node: if.then.1
  => [ local  ] weight = 2147483648, succ = for.inc.1
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc.1
 - node: for.inc.1
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.body11
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup10
compute-loop-scale: for.body11*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.body11*
 - node: for.body11
 - node: if.then
 - node: for.inc
 - node: if.then.1
 - node: for.inc.1
compute-mass-in-loop: for.cond8.preheader*
 - node: for.cond8.preheader
  => [ local  ] weight = 2147483648, succ = for.body11
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.cond8.preheader
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup
compute-loop-scale: for.cond8.preheader*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.cond8.preheader*
 - node: for.cond8.preheader
 - node: for.body11
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond8.preheader
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond8.preheader
 - node: for.cond8.preheader
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond8.preheader*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond8.preheader: 1.0 => 31.99999999
 - for.body11: 32.0 => 1024.0
 - for.cond.cleanup10: 1.0 => 31.99999999
unwrap-loop-package: for.body11*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - for.body11: 1.0 => 1024.0
 - if.then: 0.5 => 511.9999998
 - for.inc: 1.0 => 1024.0
 - if.then.1: 0.5 => 511.9999998
 - for.inc.1: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond8.preheader: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.body11: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then.1: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc.1: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - for.cond.cleanup10: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond8.preheader: float = 32.0, int = 549755813823
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond.cleanup10: float = 32.0, int = 549755813823
 - for.body11: float = 1024.0, int = 17592186042367
 - if.then: float = 512.0, int = 8796093021183
 - for.inc: float = 1024.0, int = 17592186042367
 - if.then.1: float = 512.0, int = 8796093021183
 - for.inc.1: float = 1024.0, int = 17592186042367

	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8


block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8

	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
FOUND USER:   %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54
   OF SCEV: {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
FOUND USER:   store float %11, float* %arrayidx13.1, align 4, !dbg !63, !tbaa !54
   OF SCEV: {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
FOUND USER:   store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54
   OF SCEV: {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
FOUND USER:   %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54
   OF SCEV: {(4 + %b)<nsw>,+,8}<nsw><%for.body11>
FOUND USER:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66
   OF SCEV: {2,+,2}<nuw><nsw><%for.body11>
FOUND USER:   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54
   OF SCEV: {%b,+,8}<nsw><%for.body11>
FOUND USER:   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54
   OF SCEV: {%c,+,8}<nsw><%for.body11>
FOUND USER:   store float %7, float* %arrayidx13, align 8, !dbg !63, !tbaa !54
   OF SCEV: {%c,+,8}<nsw><%for.body11>
FOUND USER:   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54
   OF SCEV: {%a,+,8}<nsw><%for.body11>

LSR on loop %for.body11:
  Change loop exiting icmp to use postinc iv:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66
Collecting IV Chains.
IV Chain#0 Head: (  %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54) IV={%a,+,8}<nsw><%for.body11>
IV Chain#1 Head: (  store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54) IV={%c,+,8}<nsw><%for.body11>
IV Chain#2 Head: (  %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54) IV={%b,+,8}<nsw><%for.body11>
IV Chain#0  Inc: (  %9 = load i32, i32* %8, align 4, !dbg !53, !tbaa !54) IV+4
IV Chain#1  Inc: (  store i32 %9, i32* %10, align 4, !dbg !59, !tbaa !54) IV+4
IV Chain#2  Inc: (  %11 = load float, float* %arrayidx15.1, align 4, !dbg !60, !tbaa !54) IV+4
IV Chain#3 Head: (  %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66) IV={2,+,2}<nuw><nsw><%for.body11>
IV Chain#3  Inc: (  %indvars.iv = phi i64 [ 0, %for.cond8.preheader ], [ %indvars.iv.next.1, %for.inc.1 ]) IV+0
Chain:   %5 = load i32, i32* %4, align 8, !dbg !53, !tbaa !54 Cost: 1
Chain:   store i32 %5, i32* %6, align 8, !dbg !59, !tbaa !54 Cost: 1
Chain:   %7 = load float, float* %arrayidx15, align 8, !dbg !60, !tbaa !54 Cost: 1
Chain:   %exitcond.1 = icmp eq i64 %indvars.iv.next.1, 1024, !dbg !66 Cost: 1
LSR has identified the following interesting factors and types: *4
LSR is examining the following fixup sites:
  UserInst=%9, OperandValToReplace=%8, Offset=4
  UserInst=%5, OperandValToReplace=%4
  UserInst=store %11, OperandValToReplace=%arrayidx13.1, Offset=4
  UserInst=store %9, OperandValToReplace=%10, Offset=4
  UserInst=store %5, OperandValToReplace=%6
  UserInst=store %7, OperandValToReplace=%arrayidx13
  UserInst=%11, OperandValToReplace=%arrayidx15.1, Offset=4
  UserInst=%7, OperandValToReplace=%arrayidx15
  UserInst=%exitcond.1, OperandValToReplace=%indvars.iv.next.1, PostIncLoop=%for.body11
LSR found 4 uses:
LSR is examining the following uses:
  LSR Use: Kind=Address of i32 in addrspace(0), Offsets={4,0}, widest fixup type: i32*
    reg({%a,+,8}<nsw><%for.body11>)
  LSR Use: Kind=Address of void in addrspace(0), Offsets={4,4,0,0}, widest fixup type: float*
    reg({%c,+,8}<nsw><%for.body11>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={4,0}, widest fixup type: float*
    reg({%b,+,8}<nsw><%for.body11>)
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i64
    reg({1024,+,-2}<nw><%for.body11>)
Generating cross-use offsets for {%a,+,8}<nsw><%for.body11>: 0 4
Skipping cross-use reuse for {%a,+,8}<nsw><%for.body11>
Skipping cross-use reuse for {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
Generating cross-use offsets for {%c,+,8}<nsw><%for.body11>: 0 4
Skipping cross-use reuse for {%c,+,8}<nsw><%for.body11>
Skipping cross-use reuse for {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
Generating cross-use offsets for {%b,+,8}<nsw><%for.body11>: 0 4
Skipping cross-use reuse for {%b,+,8}<nsw><%for.body11>
Skipping cross-use reuse for {(4 + %b)<nsw>,+,8}<nsw><%for.body11>
Generating cross-use offsets for {0,+,-2}<nw><%for.body11>: 0 1024
Skipping cross-use reuse for {0,+,-2}<nw><%for.body11>
Skipping cross-use reuse for {1024,+,-2}<nw><%for.body11>
Generating cross-use offsets for {0,+,8}<nuw><nsw><%for.body11>: -4096 0 4
Generating cross-use offsets for %a: 0 4
Skipping cross-use reuse for %a
Skipping cross-use reuse for (4 + %a)<nsw>
Generating cross-use offsets for %c: 0 4
Skipping cross-use reuse for %c
Skipping cross-use reuse for (4 + %c)<nsw>
Generating cross-use offsets for %b: 0 4
Skipping cross-use reuse for %b
Skipping cross-use reuse for (4 + %b)<nsw>
Generating cross-use offsets for {0,+,2}<nuw><nsw><%for.body11>: -1024 0 1
Generating cross-use offsets for {0,+,-8}<nsw><%for.body11>: 0 4096
Skipping cross-use reuse for {0,+,-8}<nsw><%for.body11>
Skipping cross-use reuse for {4096,+,-8}<nsw><%for.body11>

After generating reuse formulae:
LSR is examining the following uses:
  LSR Use: Kind=Address of i32 in addrspace(0), Offsets={4,0}, widest fixup type: i32*
    reg({%a,+,8}<nsw><%for.body11>)
    reg(%a) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg({(4 + %a)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %a)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%a) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    reg(%a) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %a)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%a) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4096 + reg(%a) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %a)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %a)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    4096 + reg(%a) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %a)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %a)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of void in addrspace(0), Offsets={4,4,0,0}, widest fixup type: float*
    reg({%c,+,8}<nsw><%for.body11>)
    reg(%c) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg({(4 + %c)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %c)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%c) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    reg(%c) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %c)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%c) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4096 + reg(%c) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %c)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %c)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    4096 + reg(%c) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %c)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %c)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={4,0}, widest fixup type: float*
    reg({%b,+,8}<nsw><%for.body11>)
    reg(%b) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg({(4 + %b)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %b)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%b) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    reg(%b) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %b)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%b) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4096 + reg(%b) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %b)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %b)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    4096 + reg(%b) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %b)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -8 + reg((4 + %b)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i64
    reg({1024,+,-2}<nw><%for.body11>)
    1024 + reg({0,+,-2}<nw><%for.body11>)
    reg({4096,+,-8}<nsw><%for.body11>)
    reg({-4096,+,8}<nuw><nsw><%for.body11>)
    reg({-1024,+,2}<nuw><nsw><%for.body11>)
    4096 + reg({0,+,-8}<nsw><%for.body11>)
    -4096 + reg({0,+,8}<nuw><nsw><%for.body11>)
    -1024 + reg({0,+,2}<nuw><nsw><%for.body11>)
    -4100 + reg({4,+,8}<nuw><nsw><%for.body11>)
    -1025 + reg({1,+,2}<nuw><nsw><%for.body11>)
Filtering for use LSR Use: Kind=Address of i32 in addrspace(0), Offsets={4,0}, widest fixup type: i32*
  Filtering out formula reg({%a,+,8}<nsw><%for.body11>)
    in favor of formula -4 + reg({(4 + %a)<nsw>,+,8}<nsw><%for.body11>)
  Filtering out formula reg(%a) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %a)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula reg(%a) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %a)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%a) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %a)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %a)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%a) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %a)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%a) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%a) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %a)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
Filtering for use LSR Use: Kind=Address of void in addrspace(0), Offsets={4,4,0,0}, widest fixup type: float*
  Filtering out formula reg({%c,+,8}<nsw><%for.body11>)
    in favor of formula -4 + reg({(4 + %c)<nsw>,+,8}<nsw><%for.body11>)
  Filtering out formula reg(%c) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %c)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula reg(%c) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %c)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%c) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %c)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %c)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%c) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %c)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%c) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%c) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %c)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
Filtering for use LSR Use: Kind=Address of float in addrspace(0), Offsets={4,0}, widest fixup type: float*
  Filtering out formula reg({%b,+,8}<nsw><%for.body11>)
    in favor of formula -4 + reg({(4 + %b)<nsw>,+,8}<nsw><%for.body11>)
  Filtering out formula reg(%b) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %b)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula reg(%b) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg((4 + %b)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%b) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %b)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %b)<nsw>) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%b) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
  Filtering out formula -8 + reg((4 + %b)<nsw>) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    in favor of formula -4 + reg(%b) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
  Filtering out formula 4096 + reg(%b) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
    in favor of formula 4092 + reg((4 + %b)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
Filtering for use LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i64
  Filtering out formula 1024 + reg({0,+,-2}<nw><%for.body11>)
    in favor of formula reg({1024,+,-2}<nw><%for.body11>)
  Filtering out formula reg({4096,+,-8}<nsw><%for.body11>)
    in favor of formula reg({1024,+,-2}<nw><%for.body11>)
  Filtering out formula 4096 + reg({0,+,-8}<nsw><%for.body11>)
    in favor of formula reg({1024,+,-2}<nw><%for.body11>)

After filtering out undesirable candidates:
LSR is examining the following uses:
  LSR Use: Kind=Address of i32 in addrspace(0), Offsets={4,0}, widest fixup type: i32*
    -4 + reg({(4 + %a)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %a)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%a) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %a)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%a) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %a)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %a)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of void in addrspace(0), Offsets={4,4,0,0}, widest fixup type: float*
    -4 + reg({(4 + %c)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %c)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%c) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %c)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%c) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %c)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %c)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={4,0}, widest fixup type: float*
    -4 + reg({(4 + %b)<nsw>,+,8}<nsw><%for.body11>)
    -4 + reg((4 + %b)<nsw>) + 1*reg({0,+,8}<nuw><nsw><%for.body11>)
    -4 + reg(%b) + 4*reg({1,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %b)<nsw>) + 4*reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -4 + reg(%b) + 1*reg({4,+,8}<nuw><nsw><%for.body11>)
    -4 + reg((4 + %b)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
    4092 + reg((4 + %b)<nsw>) + 1*reg({-4096,+,8}<nuw><nsw><%for.body11>)
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i64
    reg({1024,+,-2}<nw><%for.body11>)
    -1025 + reg({1,+,2}<nuw><nsw><%for.body11>)
    -4100 + reg({4,+,8}<nuw><nsw><%for.body11>)
    reg({-4096,+,8}<nuw><nsw><%for.body11>)
    reg({-1024,+,2}<nuw><nsw><%for.body11>)
    -1024 + reg({0,+,2}<nuw><nsw><%for.body11>)
    -4096 + reg({0,+,8}<nuw><nsw><%for.body11>)
New best at 4 instructions 4 regs, with addrec cost 4, plus 12 imm cost, plus 7 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
- {(4 + %b)<nsw>,+,8}<nsw><%for.body11>
- {1024,+,-2}<nw><%for.body11>

New best at 3 instructions 4 regs, with addrec cost 3, plus 1 scale cost, plus 25 imm cost, plus 7 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
- {0,+,8}<nuw><nsw><%for.body11>
- (4 + %b)<nsw>

New best at 3 instructions 4 regs, with addrec cost 3, plus 1 scale cost, plus 24 imm cost, plus 6 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
- {1,+,2}<nuw><nsw><%for.body11>
- %b

New best at 3 instructions 4 regs, with addrec cost 3, plus 1 scale cost, plus 23 imm cost, plus 7 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {(4 + %c)<nsw>,+,8}<nsw><%for.body11>
- {0,+,2}<nuw><nsw><%for.body11>
- (4 + %b)<nsw>

New best at 2 instructions 4 regs, with addrec cost 2, plus 2 scale cost, plus 25 imm cost, plus 7 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {0,+,8}<nuw><nsw><%for.body11>
- (4 + %c)<nsw>
- (4 + %b)<nsw>

New best at 2 instructions 4 regs, with addrec cost 2, plus 2 scale cost, plus 24 imm cost, plus 5 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {1,+,2}<nuw><nsw><%for.body11>
- %c
- %b

New best at 2 instructions 4 regs, with addrec cost 2, plus 2 scale cost, plus 23 imm cost, plus 7 setup cost.
Regs:
- {(4 + %a)<nsw>,+,8}<nsw><%for.body11>
- {0,+,2}<nuw><nsw><%for.body11>
- (4 + %c)<nsw>
- (4 + %b)<nsw>

New best at 1 instruction 4 regs, with addrec cost 1, plus 3 scale cost, plus 25 imm cost, plus 7 setup cost.
Regs:
- {0,+,8}<nuw><nsw><%for.body11>
- (4 + %a)<nsw>
- (4 + %c)<nsw>
- (4 + %b)<nsw>

New best at 1 instruction 4 regs, with addrec cost 1, plus 3 scale cost, plus 24 imm cost, plus 4 setup cost.
Regs:
- {1,+,2}<nuw><nsw><%for.body11>
- %a
- %c
- %b

New best at 1 instruction 4 regs, with addrec cost 1, plus 3 scale cost, plus 23 imm cost, plus 7 setup cost.
Regs:
- {0,+,2}<nuw><nsw><%for.body11>
- (4 + %a)<nsw>
- (4 + %c)<nsw>
- (4 + %b)<nsw>


The chosen solution requires 1 instruction 4 regs, with addrec cost 1, plus 3 scale cost, plus 23 imm cost, plus 7 setup cost:
  LSR Use: Kind=Address of i32 in addrspace(0), Offsets={4,0}, widest fixup type: i32*
    -4 + reg((4 + %a)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of void in addrspace(0), Offsets={4,4,0,0}, widest fixup type: float*
    -4 + reg((4 + %c)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=Address of float in addrspace(0), Offsets={4,0}, widest fixup type: float*
    -4 + reg((4 + %b)<nsw>) + 4*reg({0,+,2}<nuw><nsw><%for.body11>)
  LSR Use: Kind=ICmpZero, Offsets={0}, widest fixup type: i64
    -1024 + reg({0,+,2}<nuw><nsw><%for.body11>)
FOUND USER:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
   OF SCEV: {1,+,1}<nuw><nsw><%for.cond8.preheader>

LSR on loop %for.cond8.preheader:
  Change loop exiting icmp to use postinc iv:   %exitcond81 = icmp eq i32 %inc24, 20000000, !dbg !50
LSR skipping outer loop Loop at depth 1 containing: %for.cond8.preheader<header>,%for.body11,%if.then,%for.inc,%if.then.1,%for.inc.1,%for.cond.cleanup10<latch><exiting>
    Loop at depth 2 containing: %for.body11<header>,%if.then,%for.inc,%if.then.1,%for.inc.1<latch><exiting>

MergeICmpsLegacyPass: _Z5test2PfS_S_i
processPhi()
skip: non-constant value not from cmp or not from last block.
processPhi()
skip: non-constant value not from cmp or not from last block.
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc.1 if.then.1 for.inc if.then for.body11 for.cond8.preheader
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %if.then.1
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc.1
8: %for.inc
9: %if.then
10: %for.body11
11: %for.cond8.preheader
12: %_ZL7gettimev.exit
13: %if.then.1
14: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %if.then.1
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond.cleanup10
set edge for.cond.cleanup10 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond.cleanup10 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.inc.1
set edge for.inc.1 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.inc.1 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for if.then.1
Computing probabilities for for.inc
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond8.preheader
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond8.preheader
 - 4: for.body11
 - 5: if.then
 - 6: for.inc
 - 7: if.then.1
 - 8: for.inc.1
 - 9: for.cond.cleanup10
 - 10: for.cond.cleanup
 - 11: cond.false.i64
 - 12: _ZL7gettimev.exit70
loop-detection
 - loop = for.cond8.preheader
 - loop = for.body11
 - loop = for.body11: member = if.then
 - loop = for.body11: member = for.inc
 - loop = for.body11: member = if.then.1
 - loop = for.body11: member = for.inc.1
 - loop = for.cond8.preheader: member = for.cond.cleanup10
compute-mass-in-loop: for.body11*
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then
  => assign 8000000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc
 - node: for.inc
  => [ local  ] weight = 1073741824, succ = if.then.1
  => [ local  ] weight = 1073741824, succ = for.inc.1
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then.1
  => assign 8000000000000000 (0000000000000000) to for.inc.1
 - node: if.then.1
  => [ local  ] weight = 2147483648, succ = for.inc.1
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc.1
 - node: for.inc.1
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.body11
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup10
compute-loop-scale: for.body11*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.body11*
 - node: for.body11
 - node: if.then
 - node: for.inc
 - node: if.then.1
 - node: for.inc.1
compute-mass-in-loop: for.cond8.preheader*
 - node: for.cond8.preheader
  => [ local  ] weight = 2147483648, succ = for.body11
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.cond8.preheader
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup
compute-loop-scale: for.cond8.preheader*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.cond8.preheader*
 - node: for.cond8.preheader
 - node: for.body11
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond8.preheader
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond8.preheader
 - node: for.cond8.preheader
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond8.preheader*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond8.preheader: 1.0 => 31.99999999
 - for.body11: 32.0 => 1024.0
 - for.cond.cleanup10: 1.0 => 31.99999999
unwrap-loop-package: for.body11*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - for.body11: 1.0 => 1024.0
 - if.then: 0.5 => 511.9999998
 - for.inc: 1.0 => 1024.0
 - if.then.1: 0.5 => 511.9999998
 - for.inc.1: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond8.preheader: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.body11: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then.1: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc.1: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - for.cond.cleanup10: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond8.preheader: float = 32.0, int = 549755813823
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond.cleanup10: float = 32.0, int = 549755813823
 - for.body11: float = 1024.0, int = 17592186042367
 - if.then: float = 512.0, int = 8796093021183
 - for.inc: float = 1024.0, int = 17592186042367
 - if.then.1: float = 512.0, int = 8796093021183
 - for.inc.1: float = 1024.0, int = 17592186042367

********** Begin Constant Hoisting **********
********** Function: _Z5test2PfS_S_i
********** End Constant Hoisting **********
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
*** Interleaved Access Pass: _Z5test2PfS_S_i
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc.1 if.then.1 for.inc if.then for.body11 for.cond8.preheader
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %if.then.1
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc.1
8: %for.inc
9: %if.then
10: %for.body11
11: %for.cond8.preheader
12: %_ZL7gettimev.exit
13: %if.then.1
14: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %if.then.1
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond.cleanup10
set edge for.cond.cleanup10 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond.cleanup10 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.inc.1
set edge for.inc.1 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.inc.1 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for if.then.1
Computing probabilities for for.inc
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond8.preheader
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: entry
 - 1: cond.false.i
 - 2: _ZL7gettimev.exit
 - 3: for.cond8.preheader
 - 4: for.body11
 - 5: if.then
 - 6: for.inc
 - 7: if.then.1
 - 8: for.inc.1
 - 9: for.cond.cleanup10
 - 10: for.cond.cleanup
 - 11: cond.false.i64
 - 12: _ZL7gettimev.exit70
loop-detection
 - loop = for.cond8.preheader
 - loop = for.body11
 - loop = for.body11: member = if.then
 - loop = for.body11: member = for.inc
 - loop = for.body11: member = if.then.1
 - loop = for.body11: member = for.inc.1
 - loop = for.cond8.preheader: member = for.cond.cleanup10
compute-mass-in-loop: for.body11*
 - node: for.body11
  => [ local  ] weight = 1073741824, succ = if.then
  => [ local  ] weight = 1073741824, succ = for.inc
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then
  => assign 8000000000000000 (0000000000000000) to for.inc
 - node: if.then
  => [ local  ] weight = 2147483648, succ = for.inc
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc
 - node: for.inc
  => [ local  ] weight = 1073741824, succ = if.then.1
  => [ local  ] weight = 1073741824, succ = for.inc.1
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to if.then.1
  => assign 8000000000000000 (0000000000000000) to for.inc.1
 - node: if.then.1
  => [ local  ] weight = 2147483648, succ = for.inc.1
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to for.inc.1
 - node: for.inc.1
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup10
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.body11
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup10
compute-loop-scale: for.body11*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.body11*
 - node: for.body11
 - node: if.then
 - node: for.inc
 - node: if.then.1
 - node: for.inc.1
compute-mass-in-loop: for.cond8.preheader*
 - node: for.cond8.preheader
  => [ local  ] weight = 2147483648, succ = for.body11
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.body11
 - node: for.body11
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup10
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to for.cond.cleanup10
 - node: for.cond.cleanup10
  => [  exit  ] weight = 67108864, succ = for.cond.cleanup
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to for.cond8.preheader
  => assign 0800000000000000 (0000000000000000) [exit] to for.cond.cleanup
compute-loop-scale: for.cond8.preheader*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: for.cond8.preheader*
 - node: for.cond8.preheader
 - node: for.body11
 - node: for.cond.cleanup10
compute-mass-in-function
 - node: entry
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit
  => [ local  ] weight = 1, succ = cond.false.i
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to cond.false.i
  => assign fffffffe00000000 (0000000000000000) to _ZL7gettimev.exit
 - node: cond.false.i
  => mass:  00000001ffffffff
 - node: _ZL7gettimev.exit
  => [ local  ] weight = 2147483648, succ = for.cond8.preheader
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond8.preheader
 - node: for.cond8.preheader
  => [ local  ] weight = 576460752303423488, succ = for.cond.cleanup
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to for.cond.cleanup
 - node: for.cond.cleanup
  => [ local  ] weight = 2147483647, succ = _ZL7gettimev.exit70
  => [ local  ] weight = 1, succ = cond.false.i64
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to cond.false.i64
  => assign fffffffc00000004 (0000000000000000) to _ZL7gettimev.exit70
 - node: cond.false.i64
  => mass:  00000001fffffffc
 - node: _ZL7gettimev.exit70
  => mass:  fffffffc00000004
unwrap-loop-package: for.cond8.preheader*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - for.cond8.preheader: 1.0 => 31.99999999
 - for.body11: 32.0 => 1024.0
 - for.cond.cleanup10: 1.0 => 31.99999999
unwrap-loop-package: for.body11*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - for.body11: 1.0 => 1024.0
 - if.then: 0.5 => 511.9999998
 - for.inc: 1.0 => 1024.0
 - if.then.1: 0.5 => 511.9999998
 - for.inc.1: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - entry: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - cond.false.i: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - _ZL7gettimev.exit: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - for.cond8.preheader: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.body11: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - if.then.1: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - for.inc.1: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - for.cond.cleanup10: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - for.cond.cleanup: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - cond.false.i64: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - _ZL7gettimev.exit70: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - entry: float = 1.0, int = 17179869190
 - cond.false.i: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit: float = 1.0, int = 17179869182
 - for.cond8.preheader: float = 32.0, int = 549755813823
 - for.cond.cleanup: float = 1.0, int = 17179869182
 - cond.false.i64: float = 0.00000000046566, int = 8
 - _ZL7gettimev.exit70: float = 1.0, int = 17179869174
 - for.cond.cleanup10: float = 32.0, int = 549755813823
 - for.body11: float = 1024.0, int = 17592186042367
 - if.then: float = 512.0, int = 8796093021183
 - for.inc: float = 1024.0, int = 17592186042367
 - if.then.1: float = 512.0, int = 8796093021183
 - for.inc.1: float = 1024.0, int = 17592186042367

CGP: Found      local addrmode: [inbounds Base:%retval.i]
CGP: Found      local addrmode: [inbounds 8 + Base:%retval.i]
CGP: Found      local addrmode: [inbounds Base:%retval.i61]
CGP: Found      local addrmode: [inbounds 8 + Base:%retval.i61]
CGP: SINKING nonlocal addrmode: [Base:%a + 4*%indvars.iv] for   %6 = load i32, i32* %scevgep86, align 8, !dbg !53, !tbaa !54
CGP: SINKING nonlocal addrmode: [Base:%c + 4*%indvars.iv] for   store i32 %8, i32* %scevgep93, align 8, !dbg !58, !tbaa !54
CGP: SINKING nonlocal addrmode: [Base:%b + 4*%indvars.iv] for   %11 = load float, float* %scevgep99, align 8, !dbg !59, !tbaa !54
CGP: SINKING nonlocal addrmode: [Base:%c + 4*%indvars.iv] for   store float %13, float* %scevgep95, align 8, !dbg !62, !tbaa !54
CGP: SINKING nonlocal addrmode: [4 + Base:%a + 4*%indvars.iv] for   %16 = load i32, i32* %scevgep8283, align 4, !dbg !53, !tbaa !54
CGP: SINKING nonlocal addrmode: [4 + Base:%c + 4*%indvars.iv] for   store i32 %18, i32* %scevgep8990, align 4, !dbg !58, !tbaa !54
CGP: SINKING nonlocal addrmode: [4 + Base:%b + 4*%indvars.iv] for   %21 = load float, float* %scevgep97, align 4, !dbg !59, !tbaa !54
CGP: SINKING nonlocal addrmode: [4 + Base:%c + 4*%indvars.iv] for   store float %23, float* %scevgep88, align 4, !dbg !62, !tbaa !54
CGP: Found      local addrmode: [inbounds Base:%retval.i]
CGP: Found      local addrmode: [inbounds 8 + Base:%retval.i]
CGP: Found      local addrmode: [inbounds Base:%retval.i61]
CGP: Found      local addrmode: [inbounds 8 + Base:%retval.i61]
CGP: Found      local addrmode: [Base:%a + 4*%indvars.iv]
CGP: Found      local addrmode: [Base:%c + 4*%indvars.iv]
CGP: Found      local addrmode: [Base:%b + 4*%indvars.iv]
CGP: Found      local addrmode: [Base:%c + 4*%indvars.iv]
CGP: Found      local addrmode: [4 + Base:%a + 4*%indvars.iv]
CGP: Found      local addrmode: [4 + Base:%c + 4*%indvars.iv]
CGP: Found      local addrmode: [4 + Base:%b + 4*%indvars.iv]
CGP: Found      local addrmode: [4 + Base:%c + 4*%indvars.iv]
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %entry
MergeICmpsLegacyPass: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8

********** Begin Constant Hoisting **********
********** Function: _GLOBAL__sub_I_test2.cpp
********** End Constant Hoisting **********
	discovered a new reachable node %entry
*** Interleaved Access Pass: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: entry
loop-detection
compute-mass-in-function
 - node: entry
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - entry: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - entry: float = 1.0, int = 8

	discovered a new reachable node %entry
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
[SafeStack] Function: _Z5test2PfS_S_i
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %for.body11
	discovered a new reachable node %if.then
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then.1
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %_ZL7gettimev.exit70
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %cond.false.i
---- Branch Probability Info : _Z5test2PfS_S_i ----

BPI: SCC 3: for.cond.cleanup10 for.inc.1 if.then.1 for.inc if.then for.body11 for.cond8.preheader
		Looking for trivial roots
Found a new trivial root: %cond.false.i
Last visited node: %entry
Found a new trivial root: %cond.false.i64
Last visited node: %if.then.1
Found a new trivial root: %_ZL7gettimev.exit70
Last visited node: %_ZL7gettimev.exit70
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %cond.false.i
3: %entry
4: %cond.false.i64
5: %for.cond.cleanup
6: %for.cond.cleanup10
7: %for.inc.1
8: %for.inc
9: %if.then
10: %for.body11
11: %for.cond8.preheader
12: %_ZL7gettimev.exit
13: %if.then.1
14: %_ZL7gettimev.exit70
Found roots: %cond.false.i %cond.false.i64 %_ZL7gettimev.exit70 
	discovered a new reachable node nullptr
	discovered a new reachable node %cond.false.i
	discovered a new reachable node %entry
	discovered a new reachable node %cond.false.i64
	discovered a new reachable node %for.cond.cleanup
	discovered a new reachable node %for.cond.cleanup10
	discovered a new reachable node %for.inc.1
	discovered a new reachable node %for.inc
	discovered a new reachable node %if.then
	discovered a new reachable node %for.body11
	discovered a new reachable node %for.cond8.preheader
	discovered a new reachable node %_ZL7gettimev.exit
	discovered a new reachable node %if.then.1
	discovered a new reachable node %_ZL7gettimev.exit70
Computing probabilities for _ZL7gettimev.exit70
Computing probabilities for cond.false.i64
Computing probabilities for for.cond.cleanup
set edge for.cond.cleanup -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge for.cond.cleanup -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%
Computing probabilities for for.cond.cleanup10
set edge for.cond.cleanup10 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.cond.cleanup10 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for for.inc.1
set edge for.inc.1 -> 1 successor probability to 0x7c000000 / 0x80000000 = 96.88%
set edge for.inc.1 -> 0 successor probability to 0x04000000 / 0x80000000 = 3.12%
Computing probabilities for if.then.1
Computing probabilities for for.inc
Computing probabilities for if.then
Computing probabilities for for.body11
Computing probabilities for for.cond8.preheader
Computing probabilities for _ZL7gettimev.exit
Computing probabilities for cond.false.i
Computing probabilities for entry
set edge entry -> 1 successor probability to 0x00000001 / 0x80000000 = 0.00%
set edge entry -> 0 successor probability to 0x7fffffff / 0x80000000 = 100.00%



=== _Z5test2PfS_S_i
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %8
Creating new node: t4: i64,ch = CopyFromReg t0, Register:i64 %9
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %10
Creating new node: t8: i32,ch = CopyFromReg t0, Register:i32 %11
Creating constant: t9: i32 = Constant<1024>
Creating new node: t11: i1 = setcc t8, Constant:i32<1024>, seteq:ch, test2.cpp:8:22
Creating constant: t12: i64 = Constant<63>
Creating new node: t13: i64 = and t2, Constant:i64<63>, test2.cpp:13:16
Creating constant: t14: i64 = Constant<0>
Creating new node: t15: i1 = setcc t13, Constant:i64<0>, seteq:ch, test2.cpp:13:16
Creating new node: t16: i64 = and t4, Constant:i64<63>, test2.cpp:14:16
Creating new node: t17: i1 = setcc t16, Constant:i64<0>, seteq:ch, test2.cpp:14:16
Creating new node: t18: i64 = and t6, Constant:i64<63>, test2.cpp:15:16
Creating new node: t19: i1 = setcc t18, Constant:i64<0>, seteq:ch, test2.cpp:15:16
Creating new node: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating constant: t24: i32 = Constant<1>
Creating constant: t25: i64 = TargetConstant<0>
Creating new node: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating new node: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating new node: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating new node: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating new node: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating new node: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Creating constant: t37: i32 = Constant<0>
Creating new node: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Initial selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 43 nodes:
  t0: ch = EntryToken
    t8: i32,ch = CopyFromReg t0, Register:i32 %11
  t11: i1 = setcc t8, Constant:i32<1024>, seteq:ch, test2.cpp:8:22
      t2: i64,ch = CopyFromReg t0, Register:i64 %8
    t13: i64 = and t2, Constant:i64<63>, test2.cpp:13:16
  t15: i1 = setcc t13, Constant:i64<0>, seteq:ch, test2.cpp:13:16
      t4: i64,ch = CopyFromReg t0, Register:i64 %9
    t16: i64 = and t4, Constant:i64<63>, test2.cpp:14:16
  t17: i1 = setcc t16, Constant:i64<0>, seteq:ch, test2.cpp:14:16
      t6: i64,ch = CopyFromReg t0, Register:i64 %10
    t18: i64 = and t6, Constant:i64<63>, test2.cpp:15:16
  t19: i1 = setcc t18, Constant:i64<0>, seteq:ch, test2.cpp:15:16
  t23: i64 = GlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Combining: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t41: ch = BasicBlock<cond.false.i 0x556181f19348>

Combining: t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>

Combining: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t37: i32 = Constant<0>

Combining: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t35: i32 = Register $eax

Combining: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t32: Untyped = RegisterMask

Combining: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t29: i64 = Register $rsi

Combining: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t27: i32 = Register $edi

Combining: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t25: i64 = TargetConstant<0>

Combining: t24: i32 = Constant<1>

Combining: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t21: i64 = TargetFrameIndex<1>

Combining: t20: i64 = FrameIndex<1>

Combining: t10: ch = seteq

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Legalizing node: t41: ch = BasicBlock<cond.false.i 0x556181f19348>
Analyzing result type: ch
Legal result type
Legally typed node: t41: ch = BasicBlock<cond.false.i 0x556181f19348>

Legalizing node: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>
Analyzing result type: ch
Legal result type
Legally typed node: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>

Legalizing node: t37: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t37: i32 = Constant<0>

Legalizing node: t35: i32 = Register $eax
Ignoring node results
Legally typed node: t35: i32 = Register $eax

Legalizing node: t32: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t32: Untyped = RegisterMask

Legalizing node: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t29: i64 = Register $rsi
Ignoring node results
Legally typed node: t29: i64 = Register $rsi

Legalizing node: t27: i32 = Register $edi
Ignoring node results
Legally typed node: t27: i32 = Register $edi

Legalizing node: t25: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t25: i64 = TargetConstant<0>

Legalizing node: t24: i32 = Constant<1>
Analyzing result type: i32
Legal result type
Legally typed node: t24: i32 = Constant<1>

Legalizing node: t21: i64 = TargetFrameIndex<1>
Analyzing result type: i64
Legal result type
Legally typed node: t21: i64 = TargetFrameIndex<1>

Legalizing node: t20: i64 = FrameIndex<1>
Analyzing result type: i64
Legal result type
Legally typed node: t20: i64 = FrameIndex<1>

Legalizing node: t10: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t10: ch = seteq

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t21: i64 = TargetFrameIndex<1>
Legal operand
Legally typed node: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t24: i32 = Constant<1>
Legal operand
Legally typed node: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t20: i64 = FrameIndex<1>
Legal operand
Analyzing operand: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t32: Untyped = RegisterMask
Legal operand
Analyzing operand: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing node: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i1
Promote integer result: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Creating new node: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legalizing node: t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Promote integer operand: t40: ch = brcond t36:1, t38, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Creating new node: t44: i8 = zero_extend t38, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legalizing node: t44: i8 = zero_extend t38, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t38: i1 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Promote integer operand: t44: i8 = zero_extend t38, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Creating constant: t45: i8 = Constant<1>
Creating new node: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Replacing: t44: i8 = zero_extend t38, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     with: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legalizing node: t45: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t45: i8 = Constant<1>

Legalizing node: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t37: i32 = Constant<0>
Legal operand
Analyzing operand: t10: ch = seteq
Legal operand
Legally typed node: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t45: i8 = Constant<1>
Legal operand
Legally typed node: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t40: ch = brcond t36:1, t46, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>
Legal operand
Legally typed node: t40: ch = brcond t36:1, t46, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t40: ch = brcond t36:1, t46, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t41: ch = BasicBlock<cond.false.i 0x556181f19348>
Legal operand
Legally typed node: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t65535: ch = handlenode t42
Analyzing result type: ch
Legal result type
Analyzing operand: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t65535: ch = handlenode t42

Type-legalized selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 26 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
        t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
      t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t40: ch = brcond t36:1, t46, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Combining: t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Replacing.2 t46: i8 = and t43, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

With: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Combining: t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t41: ch = BasicBlock<cond.false.i 0x556181f19348>

Combining: t40: ch = brcond t36:1, t43, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>

Combining: t37: i32 = Constant<0>

Combining: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t35: i32 = Register $eax

Combining: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t32: Untyped = RegisterMask

Combining: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t29: i64 = Register $rsi

Combining: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t27: i32 = Register $edi

Combining: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t25: i64 = TargetConstant<0>

Combining: t24: i32 = Constant<1>

Combining: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t21: i64 = TargetFrameIndex<1>

Combining: t20: i64 = FrameIndex<1>

Combining: t10: ch = seteq

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t43: i8 = setcc t36, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t40: ch = brcond t36:1, t43, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Legalizing: t42: ch = br t40, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t40: ch = brcond t36:1, t43, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Trying custom legalization
Creating new node: t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating constant: t48: i8 = TargetConstant<4>
Creating new node: t49: i8 = X86ISD::SETCC TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Successfully custom legalized node
 ... replacing: t40: ch = brcond t36:1, t43, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     with:      t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t41: ch = BasicBlock<cond.false.i 0x556181f19348>
Legal node: nothing to do

Legalizing: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>
Legal node: nothing to do

Legalizing: t37: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t35: i32 = Register $eax

Legalizing: t32: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t29: i64 = Register $rsi

Legalizing: t27: i32 = Register $edi

Legalizing: t25: i64 = TargetConstant<0>

Legalizing: t24: i32 = Constant<1>
Legal node: nothing to do

Legalizing: t21: i64 = TargetFrameIndex<1>
Legal node: nothing to do

Legalizing: t20: i64 = FrameIndex<1>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t48: i8 = TargetConstant<4>

Legalizing: t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do
Legalized selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t50, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Legalizing: t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t48: i8 = TargetConstant<4>

Combining: t48: i8 = TargetConstant<4>

Legalizing: t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t42: ch = br t50, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t42: ch = br t50, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Combining: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t41: ch = BasicBlock<cond.false.i 0x556181f19348>
Legal node: nothing to do

Combining: t41: ch = BasicBlock<cond.false.i 0x556181f19348>

Legalizing: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>
Legal node: nothing to do

Combining: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>

Legalizing: t37: i32 = Constant<0>
Legal node: nothing to do

Combining: t37: i32 = Constant<0>

Legalizing: t35: i32 = Register $eax

Combining: t35: i32 = Register $eax

Legalizing: t32: Untyped = RegisterMask
Legal node: nothing to do

Combining: t32: Untyped = RegisterMask

Legalizing: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

Legalizing: t29: i64 = Register $rsi

Combining: t29: i64 = Register $rsi

Legalizing: t27: i32 = Register $edi

Combining: t27: i32 = Register $edi

Legalizing: t25: i64 = TargetConstant<0>

Combining: t25: i64 = TargetConstant<0>

Legalizing: t24: i32 = Constant<1>
Legal node: nothing to do

Combining: t24: i32 = Constant<1>

Legalizing: t21: i64 = TargetFrameIndex<1>
Legal node: nothing to do

Combining: t21: i64 = TargetFrameIndex<1>

Legalizing: t20: i64 = FrameIndex<1>
Legal node: nothing to do

Combining: t20: i64 = FrameIndex<1>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
      t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = br t50, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


===== Instruction selection begins: %bb.0 'entry'

ISEL: Starting selection on root node: t42: ch = br t50, BasicBlock:ch<cond.false.i 0x556181f19348>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Morphed node: t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t50: ch = X86ISD::BRCOND t36:1, BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  Morphed node: t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t47: i32 = X86ISD::CMP t36, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 21399
  Match failed at index 21403
  Continuing at 21975
  Skipped scope entry (due to false predicate) at index 21980, continuing at 22011
  Skipped scope entry (due to false predicate) at index 22012, continuing at 22043
  Match failed at index 22047
  Continuing at 22075
  Match failed at index 22076
  Continuing at 22107
  Continuing at 22108
  Match failed at index 22110
  Continuing at 22209
  Skipped scope entry (due to false predicate) at index 22214, continuing at 22288
  Skipped scope entry (due to false predicate) at index 22289, continuing at 22363
  Match failed at index 22212
  Continuing at 22364
  Match failed at index 22367
  Continuing at 22570
  Skipped scope entry (due to false predicate) at index 22575, continuing at 22619
  Skipped scope entry (due to false predicate) at index 22620, continuing at 22686
  Morphed node: t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t36: i32,ch,glue = CopyFromReg t34, Register:i32 $eax, t34:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t34: ch,glue = callseq_end t33, TargetConstant:i64<0>, TargetConstant:i64<0>, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t33: ch,glue = X86ISD::CALL t30, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch,glue = CopyToReg t28, Register:i64 $rsi, FrameIndex:i64<1>, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t28: ch,glue = CopyToReg t26, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t26: ch,glue = callseq_start t22, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
Creating constant: t53: i32 = TargetConstant<0>
  Morphed node: t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t48: i8 = TargetConstant<4>

ISEL: Starting selection on root node: t41: ch = BasicBlock<cond.false.i 0x556181f19348>

ISEL: Starting selection on root node: t39: ch = BasicBlock<_ZL7gettimev.exit 0x556181f19408>

ISEL: Starting selection on root node: t35: i32 = Register $eax

ISEL: Starting selection on root node: t32: Untyped = RegisterMask

ISEL: Starting selection on root node: t31: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t29: i64 = Register $rsi

ISEL: Starting selection on root node: t27: i32 = Register $edi

ISEL: Starting selection on root node: t25: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t24: i32 = Constant<1>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  TypeSwitch[i32] from 119208 to 119211
  Match failed at index 119211
  Continuing at 119243
  Match failed at index 119244
  Continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Match failed at index 119299
  Continuing at 119310
Creating constant: t54: i32 = TargetConstant<1>
  Morphed node: t24: i32 = MOV32ri TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t21: i64 = TargetFrameIndex<1>

ISEL: Starting selection on root node: t20: i64 = FrameIndex<1>
ISEL: Starting pattern match
  Initial Opcode index to 118312
  TypeSwitch[i64] from 118313 to 118354
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t56: i8 = TargetConstant<1>
  Morphed node: t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '_Z5test2PfS_S_i:entry'
SelectionDAG has 31 nodes:
        t0: ch = EntryToken
      t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t24: i32 = MOV32ri TargetConstant:i32<1>
  t28: ch,glue = CopyToReg t26:1, Register:i32 $edi, t24, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
  t30: ch,glue = CopyToReg t28, Register:i64 $rsi, t20, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  t36: i32,ch,glue = CopyFromReg t34:1, Register:i32 $eax, t34:2, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t55: i32 = Register $noreg
    t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


********** List Scheduling %bb.0 'entry' **********
SU(0): t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Ord  Latency=1 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t36: i32,ch,glue = CopyFromReg t34:1, Register:i32 $eax, t34:2, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t28: ch,glue = CopyToReg t26:1, Register:i32 $edi, t24, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t30: ch,glue = CopyToReg t28, Register:i64 $rsi, t20, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
    SU(6): Ord  Latency=1 Barrier
    SU(5): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
    SU(2): Data Latency=1
SU(4): t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(5): t24: i32 = MOV32ri TargetConstant:i32<1>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
  Successors:
    SU(3): Ord  Latency=1 Barrier
SU(7): t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [0]: SU(0): t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(1): t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [1]: SU(1): t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 2: SU(2): t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [2]: SU(2): t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 3: SU(3): t36: i32,ch,glue = CopyFromReg t34:1, Register:i32 $eax, t34:2, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t28: ch,glue = CopyToReg t26:1, Register:i32 $edi, t24, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t30: ch,glue = CopyToReg t28, Register:i64 $rsi, t20, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


*** Scheduling [3]: SU(3): t36: i32,ch,glue = CopyFromReg t34:1, Register:i32 $eax, t34:2, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t28: ch,glue = CopyToReg t26:1, Register:i32 $edi, t24, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t30: ch,glue = CopyToReg t28, Register:i64 $rsi, t20, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


Examining Available:
Height 4: SU(4): t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

Height 4: SU(5): t24: i32 = MOV32ri TargetConstant:i32<1>

Height 4: SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


*** Scheduling [4]: SU(4): t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg


Examining Available:
Height 4: SU(5): t24: i32 = MOV32ri TargetConstant:i32<1>

Height 4: SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


*** Scheduling [5]: SU(5): t24: i32 = MOV32ri TargetConstant:i32<1>


Examining Available:
Height 4: SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


*** Scheduling [6]: SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


Examining Available:
Height 7: SU(7): t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]


*** Scheduling [7]: SU(7): t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

*** Final schedule ***
SU(7): t22: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<1>, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

SU(6): t26: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t22, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

SU(5): t24: i32 = MOV32ri TargetConstant:i32<1>

SU(4): t20: i64 = LEA64r TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

SU(3): t36: i32,ch,glue = CopyFromReg t34:1, Register:i32 $eax, t34:2, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t28: ch,glue = CopyToReg t26:1, Register:i32 $edi, t24, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t30: ch,glue = CopyToReg t28, Register:i64 $rsi, t20, t28:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t33: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t30, t30:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

    t34: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t33, t33:1, ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

SU(2): t47: i32 = TEST32rr t36, t36, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(1): t50: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit 0x556181f19408>, TargetConstant:i8<4>, t52, t52:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t52: ch,glue = CopyToReg t36:1, Register:i32 $eflags, t47, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(0): t42: ch = JMP_1 BasicBlock:ch<cond.false.i 0x556181f19348>, t50, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Total amount of phi nodes to update: 0
Creating constant: t4: i32 = Constant<75>
Creating constant: t6: i64 = TargetConstant<0>
Creating new node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Creating new node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Initial selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 20 nodes:
  t1: i64 = GlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Combining: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t17: Untyped = RegisterMask

Combining: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t14: i64 = Register $rcx

Combining: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t12: i32 = Register $edx

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t8: i64 = Register $rdi

Combining: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t6: i64 = TargetConstant<0>

Combining: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t4: i32 = Constant<75>

Combining: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 19 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Legalizing node: t17: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t17: Untyped = RegisterMask

Legalizing node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t14: i64 = Register $rcx
Ignoring node results
Legally typed node: t14: i64 = Register $rcx

Legalizing node: t12: i32 = Register $edx
Ignoring node results
Legally typed node: t12: i32 = Register $edx

Legalizing node: t10: i64 = Register $rsi
Ignoring node results
Legally typed node: t10: i64 = Register $rsi

Legalizing node: t8: i64 = Register $rdi
Ignoring node results
Legally typed node: t8: i64 = Register $rdi

Legalizing node: t6: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t6: i64 = TargetConstant<0>

Legalizing node: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t4: i32 = Constant<75>
Analyzing result type: i32
Legal result type
Legally typed node: t4: i32 = Constant<75>

Legalizing node: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t4: i32 = Constant<75>
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t17: Untyped = RegisterMask
Legal operand
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing node: t65535: ch = handlenode t19
Analyzing result type: ch
Legal result type
Analyzing operand: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t65535: ch = handlenode t19

Type-legalized selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 19 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Legalizing: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t17: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t14: i64 = Register $rcx

Legalizing: t12: i32 = Register $edx

Legalizing: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Legalizing: t6: i64 = TargetConstant<0>

Legalizing: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Trying custom legalization
Creating new node: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Successfully custom legalized node
 ... replacing: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     with:      t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t4: i32 = Constant<75>
Legal node: nothing to do

Legalizing: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Trying custom legalization
Creating new node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Successfully custom legalized node
 ... replacing: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     with:      t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Trying custom legalization
Creating new node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Successfully custom legalized node
 ... replacing: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     with:      t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do
Legalized selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 22 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]



Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Combining: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t17: Untyped = RegisterMask
Legal node: nothing to do

Combining: t17: Untyped = RegisterMask

Legalizing: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Legalizing: t14: i64 = Register $rcx

Combining: t14: i64 = Register $rcx

Legalizing: t12: i32 = Register $edx

Combining: t12: i32 = Register $edx

Legalizing: t10: i64 = Register $rsi

Combining: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Combining: t8: i64 = Register $rdi

Legalizing: t6: i64 = TargetConstant<0>

Combining: t6: i64 = TargetConstant<0>

Legalizing: t4: i32 = Constant<75>
Legal node: nothing to do

Combining: t4: i32 = Constant<75>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 22 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


===== Instruction selection begins: %bb.1 'cond.false.i'

ISEL: Starting selection on root node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
Creating constant: t26: i32 = TargetConstant<0>
  Morphed node: t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t17: Untyped = RegisterMask

ISEL: Starting selection on root node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t14: i64 = Register $rcx

ISEL: Starting selection on root node: t12: i32 = Register $edx

ISEL: Starting selection on root node: t10: i64 = Register $rsi

ISEL: Starting selection on root node: t8: i64 = Register $rdi

ISEL: Starting selection on root node: t6: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t4: i32 = Constant<75>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Match failed at index 119299
  Continuing at 119310
Creating constant: t27: i32 = TargetConstant<75>
  Morphed node: t4: i32 = MOV32ri TargetConstant:i32<75>
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.1 '_Z5test2PfS_S_i:cond.false.i'
SelectionDAG has 24 nodes:
      t0: ch = EntryToken
    t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t4: i32 = MOV32ri TargetConstant:i32<75>
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


********** List Scheduling %bb.1 'cond.false.i' **********
SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
    SU(5): Ord  Latency=1 Barrier
    SU(4): Data Latency=1
SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [0]: SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

Height 1: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [1]: SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>


Examining Available:
Height 1: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [2]: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [3]: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [4]: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


*** Scheduling [5]: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

*** Final schedule ***
SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:17:22 ]


Total amount of phi nodes to update: 0
Creating constant: t2: i64 = Constant<0>
Creating new node: t3: i64 = undef
Creating new node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating new node: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating constant: t7: i64 = Constant<8>
Creating new node: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating new node: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating new node: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating new node: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating new node: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Creating constant: t15: i32 = Constant<0>
Creating new node: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
Creating new node: t18: ch = TokenFactor t6, t11, t17, t14
Initial selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
  t2: i64 = Constant<0>
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14



Combining: t18: ch = TokenFactor t6, t11, t17, t14

Combining: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>

Combining: t16: i32 = Register %19

Combining: t15: i32 = Constant<0>

Combining: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t13: i64 = TargetFrameIndex<1>

Combining: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t10: i64 = Register %1

Combining: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t7: i64 = Constant<8>

Combining: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t5: i64 = Register %0

Combining: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Combining: t3: i64 = undef

Combining: t1: i64 = FrameIndex<1>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14


Legalizing node: t16: i32 = Register %19
Ignoring node results
Legally typed node: t16: i32 = Register %19

Legalizing node: t15: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t15: i32 = Constant<0>

Legalizing node: t13: i64 = TargetFrameIndex<1>
Analyzing result type: i64
Legal result type
Legally typed node: t13: i64 = TargetFrameIndex<1>

Legalizing node: t10: i64 = Register %1
Ignoring node results
Legally typed node: t10: i64 = Register %1

Legalizing node: t7: i64 = Constant<8>
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = Constant<8>

Legalizing node: t5: i64 = Register %0
Ignoring node results
Legally typed node: t5: i64 = Register %0

Legalizing node: t3: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = undef

Legalizing node: t1: i64 = FrameIndex<1>
Analyzing result type: i64
Legal result type
Legally typed node: t1: i64 = FrameIndex<1>

Legalizing node: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Analyzing operand: t1: i64 = FrameIndex<1>
Legal operand
Analyzing operand: t7: i64 = Constant<8>
Legal operand
Legally typed node: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t1: i64 = FrameIndex<1>
Legal operand
Analyzing operand: t3: i64 = undef
Legal operand
Legally typed node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t3: i64 = undef
Legal operand
Legally typed node: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t13: i64 = TargetFrameIndex<1>
Legal operand
Legally typed node: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing node: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t15: i32 = Constant<0>
Legal operand
Legally typed node: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>

Legalizing node: t18: ch = TokenFactor t6, t11, t17, t14
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Analyzing operand: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
Legal operand
Analyzing operand: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal operand
Legally typed node: t18: ch = TokenFactor t6, t11, t17, t14

Legalizing node: t65535: ch = handlenode t18
Analyzing result type: ch
Legal result type
Analyzing operand: t18: ch = TokenFactor t6, t11, t17, t14
Legal operand
Legally typed node: t65535: ch = handlenode t18

Type-legalized selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14



Legalizing: t18: ch = TokenFactor t6, t11, t17, t14
Legal node: nothing to do

Legalizing: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legalizing non-extending load operation

Legalizing: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
Legal node: nothing to do

Legalizing: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Legalizing: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legalizing non-extending load operation

Legalizing: t16: i32 = Register %19

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t13: i64 = TargetFrameIndex<1>
Legal node: nothing to do

Legalizing: t10: i64 = Register %1

Legalizing: t7: i64 = Constant<8>
Legal node: nothing to do

Legalizing: t5: i64 = Register %0

Legalizing: t3: i64 = undef
Legal node: nothing to do

Legalizing: t1: i64 = FrameIndex<1>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14



Legalizing: t18: ch = TokenFactor t6, t11, t17, t14
Legal node: nothing to do

Combining: t18: ch = TokenFactor t6, t11, t17, t14

Legalizing: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legalizing non-extending load operation

Combining: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
Legal node: nothing to do

Combining: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>

Legalizing: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legal node: nothing to do

Combining: t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
Legalizing non-extending load operation

Combining: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Legalizing: t16: i32 = Register %19

Combining: t16: i32 = Register %19

Legalizing: t15: i32 = Constant<0>
Legal node: nothing to do

Combining: t15: i32 = Constant<0>

Legalizing: t13: i64 = TargetFrameIndex<1>
Legal node: nothing to do

Combining: t13: i64 = TargetFrameIndex<1>

Legalizing: t10: i64 = Register %1

Combining: t10: i64 = Register %1

Legalizing: t7: i64 = Constant<8>
Legal node: nothing to do

Combining: t7: i64 = Constant<8>

Legalizing: t5: i64 = Register %0

Combining: t5: i64 = Register %0

Legalizing: t3: i64 = undef
Legal node: nothing to do

Combining: t3: i64 = undef

Legalizing: t1: i64 = FrameIndex<1>
Legal node: nothing to do

Combining: t1: i64 = FrameIndex<1>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 18 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t8: i64 = add nuw FrameIndex:i64<1>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14


===== Instruction selection begins: %bb.2 '_ZL7gettimev.exit'

ISEL: Starting selection on root node: t18: ch = TokenFactor t6, t11, t17, t14

ISEL: Starting selection on root node: t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t9: i64,ch = load<(dereferenceable load 8 from %ir.2)> t0, t8, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Base.FrameIndex 1
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t19: i8 = TargetConstant<1>
Creating constant: t21: i32 = TargetConstant<8>
  Morphed node: t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

ISEL: Starting selection on root node: t17: ch = CopyToReg t0, Register:i32 %19, Constant:i32<0>

ISEL: Starting selection on root node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i100)> t0, FrameIndex:i64<1>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t23: i32 = TargetConstant<0>
  Morphed node: t4: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t16: i32 = Register %19

ISEL: Starting selection on root node: t15: i32 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  TypeSwitch[i32] from 119130 to 119133
  Morphed node: t15: i32,i32 = MOV32r0
ISEL: Match complete!

ISEL: Starting selection on root node: t13: i64 = TargetFrameIndex<1>

ISEL: Starting selection on root node: t10: i64 = Register %1

ISEL: Starting selection on root node: t5: i64 = Register %0

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.2 '_Z5test2PfS_S_i:_ZL7gettimev.exit'
SelectionDAG has 19 nodes:
  t0: ch = EntryToken
  t4: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t17: ch = CopyToReg t0, Register:i32 %19, MOV32r0:i32,i32
      t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  t18: ch = TokenFactor t6, t11, t17, t14


********** List Scheduling %bb.2 '_ZL7gettimev.exit' **********
SU(0): t18: ch = TokenFactor t6, t11, t17, t14

  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
    SU(6): Ord  Latency=1 Barrier
    SU(4): Ord  Latency=1 Barrier
    SU(1): Ord  Latency=1 Barrier
SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Ord  Latency=0 Barrier
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Ord  Latency=1 Barrier
  Successors:
    SU(1): Ord  Latency=0 Barrier
SU(3): t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 2
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Ord  Latency=1 Barrier
    SU(6): Data Latency=1
    SU(7): Data Latency=1
SU(4): t17: ch = CopyToReg t0, Register:i32 %19, MOV32r0:i32,i32

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(5): t15: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Data Latency=1
SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t18: ch = TokenFactor t6, t11, t17, t14


*** Scheduling [0]: SU(0): t18: ch = TokenFactor t6, t11, t17, t14


Examining Available:
Height 1: SU(4): t17: ch = CopyToReg t0, Register:i32 %19, MOV32r0:i32,i32

Height 1: SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [1]: SU(4): t17: ch = CopyToReg t0, Register:i32 %19, MOV32r0:i32,i32


Examining Available:
Height 2: SU(5): t15: i32,i32 = MOV32r0

Height 1: SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [2]: SU(5): t15: i32,i32 = MOV32r0


Examining Available:
Height 1: SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [3]: SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


Examining Available:
Height 3: SU(2): t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [4]: SU(2): t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [5]: SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


Examining Available:
Height 1: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [6]: SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


Examining Available:
Height 7: SU(3): t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]


*** Scheduling [7]: SU(3): t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

*** Final schedule ***
SU(3): t9: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.2)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i100)> TargetFrameIndex:i64<1>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

SU(7): t6: ch = CopyToReg t0, Register:i64 %0, t4, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

SU(6): t11: ch = CopyToReg t0, Register:i64 %1, t9, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

SU(2): t12: ch = TokenFactor t4:1, t9:1, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

SU(1): t14: ch = lifetime.end<0 to 16> t12, TargetFrameIndex:i64<1>, ./fasttime.h:78:1 @[ test2.cpp:17:22 ]

SU(5): t15: i32,i32 = MOV32r0

SU(4): t17: ch = CopyToReg t0, Register:i32 %19, MOV32r0:i32,i32

SU(0): t18: ch = TokenFactor t6, t11, t17, t14


Total amount of phi nodes to update: 1
Node 0 : (0x556181f19588, 2147483667)
Creating constant: t1: i64 = Constant<0>
Creating new node: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
Creating new node: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Initial selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
  t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Combining: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Combining: t4: ch = BasicBlock<for.body11 0x556181f198f0>

Combining: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>

Combining: t2: i64 = Register %20

Combining: t1: i64 = Constant<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
  t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5


Legalizing node: t4: ch = BasicBlock<for.body11 0x556181f198f0>
Analyzing result type: ch
Legal result type
Legally typed node: t4: ch = BasicBlock<for.body11 0x556181f198f0>

Legalizing node: t2: i64 = Register %20
Ignoring node results
Legally typed node: t2: i64 = Register %20

Legalizing node: t1: i64 = Constant<0>
Analyzing result type: i64
Legal result type
Legally typed node: t1: i64 = Constant<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t1: i64 = Constant<0>
Legal operand
Legally typed node: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>

Legalizing node: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Analyzing result type: ch
Legal result type
Analyzing operand: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
Legal operand
Analyzing operand: t4: ch = BasicBlock<for.body11 0x556181f198f0>
Legal operand
Legally typed node: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Legalizing node: t65535: ch = handlenode t5
Analyzing result type: ch
Legal result type
Analyzing operand: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal operand
Legally typed node: t65535: ch = handlenode t5

Type-legalized selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
  t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Legalizing: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal node: nothing to do

Legalizing: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
Legal node: nothing to do

Legalizing: t4: ch = BasicBlock<for.body11 0x556181f198f0>
Legal node: nothing to do

Legalizing: t2: i64 = Register %20

Legalizing: t1: i64 = Constant<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do
Legalized selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
  t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Legalizing: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal node: nothing to do

Combining: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Legalizing: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
Legal node: nothing to do

Combining: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>

Legalizing: t4: ch = BasicBlock<for.body11 0x556181f198f0>
Legal node: nothing to do

Combining: t4: ch = BasicBlock<for.body11 0x556181f198f0>

Legalizing: t2: i64 = Register %20

Combining: t2: i64 = Register %20

Legalizing: t1: i64 = Constant<0>
Legal node: nothing to do

Combining: t1: i64 = Constant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 6 nodes:
      t0: ch = EntryToken
    t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>
  t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5


===== Instruction selection begins: %bb.3 'for.cond8.preheader'

ISEL: Starting selection on root node: t5: ch = br t3, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5
ISEL: Match complete!

ISEL: Starting selection on root node: t3: ch = CopyToReg t0, Register:i64 %20, Constant:i64<0>

ISEL: Starting selection on root node: t4: ch = BasicBlock<for.body11 0x556181f198f0>

ISEL: Starting selection on root node: t2: i64 = Register %20

ISEL: Starting selection on root node: t1: i64 = Constant<0>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  TypeSwitch[i64] from 119130 to 119182
Creating constant: t6: i64 = TargetConstant<0>
Creating new machine node: t7: i32,i32 = MOV32r0
  Created node: t7: i32,i32 = MOV32r0
Creating constant: t8: i32 = TargetConstant<6>
  Morphed node: t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.3 '_Z5test2PfS_S_i:for.cond8.preheader'
SelectionDAG has 9 nodes:
      t0: ch = EntryToken
      t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>
    t3: ch = CopyToReg t0, Register:i64 %20, t1
  t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5


********** List Scheduling %bb.3 'for.cond8.preheader' **********
SU(0): t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t3: ch = CopyToReg t0, Register:i64 %20, t1

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1
SU(3): t7: i32,i32 = MOV32r0

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=1

Examining Available:
Height 0: SU(0): t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5


*** Scheduling [0]: SU(0): t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5


Examining Available:
Height 1: SU(1): t3: ch = CopyToReg t0, Register:i64 %20, t1


*** Scheduling [1]: SU(1): t3: ch = CopyToReg t0, Register:i64 %20, t1


Examining Available:
Height 2: SU(2): t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>


*** Scheduling [2]: SU(2): t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>


Examining Available:
Height 3: SU(3): t7: i32,i32 = MOV32r0


*** Scheduling [3]: SU(3): t7: i32,i32 = MOV32r0

*** Final schedule ***
SU(3): t7: i32,i32 = MOV32r0

SU(2): t1: i64 = SUBREG_TO_REG TargetConstant:i64<0>, MOV32r0:i32,i32, TargetConstant:i32<6>

SU(1): t3: ch = CopyToReg t0, Register:i64 %20, t1

SU(0): t5: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t3, test2.cpp:22:5


Total amount of phi nodes to update: 1
Node 0 : (0x556181f199b0, 2147483668)
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Creating constant: t3: i64 = Constant<4>
Creating new node: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Creating new node: t7: i64 = add t6, t4, test2.cpp:32:21
Creating constant: t8: i64 = Constant<0>
Creating new node: t9: i64 = undef
Creating new node: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Creating new node: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Creating new node: t13: i64 = add t12, t4, test2.cpp:32:12
Creating new node: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Creating new node: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Creating new node: t17: i64 = add t16, t4, test2.cpp:34:11
Creating new node: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Creating new node: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
Creating new node: t21: f32 = bitcast t10, test2.cpp:34:18
Creating new node: t23: i1 = setcc t18, t21, setogt:ch, test2.cpp:34:16
Creating constant: t24: i1 = Constant<-1>
Creating new node: t25: i1 = xor t23, Constant:i1<-1>, test2.cpp:34:11
Creating new node: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Creating new node: t28: ch = brcond t27, t25, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Creating new node: t30: ch = br t28, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
Initial selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 31 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
  t8: i64 = Constant<0>
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t4, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t4, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t4, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
          t21: f32 = bitcast t10, test2.cpp:34:18
        t23: i1 = setcc t18, t21, setogt:ch, test2.cpp:34:16
      t25: i1 = xor t23, Constant:i1<-1>, test2.cpp:34:11
    t28: ch = brcond t27, t25, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
  t30: ch = br t28, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11



Combining: t30: ch = br t28, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11

Combining: t29: ch = BasicBlock<if.then 0x556181f19a18>

Combining: t28: ch = brcond t27, t25, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Creating new node: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16
Creating new node: t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
 ... into: t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11

Combining: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11

Combining: t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11

Combining: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16

Combining: t31: ch = setule

Combining: t27: ch = TokenFactor t20, t14, test2.cpp:34:11

Combining: t26: ch = BasicBlock<for.inc 0x556181f19ad8>

Combining: t21: f32 = bitcast t10, test2.cpp:34:18

Combining: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

Combining: t19: f32 = Register %5

Combining: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11

Combining: t17: i64 = add t16, t4, test2.cpp:34:11

Combining: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Combining: t15: i64 = Register %9

Combining: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12

Combining: t13: i64 = add t12, t4, test2.cpp:32:12

Combining: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Combining: t11: i64 = Register %10

Combining: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21

Combining: t9: i64 = undef

Combining: t7: i64 = add t6, t4, test2.cpp:32:21

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Combining: t5: i64 = Register %8

Combining: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
Creating constant: t34: i64 = Constant<61>
Creating constant: t35: i64 = Constant<63>
Creating constant: t36: i64 = Constant<2>
Creating new node: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
 ... into: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t17: i64 = add t16, t37, test2.cpp:34:11

Combining: t13: i64 = add t12, t37, test2.cpp:32:12

Combining: t7: i64 = add t6, t37, test2.cpp:32:21

Combining: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t36: i64 = Constant<2>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t37, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t37, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t37, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
        t21: f32 = bitcast t10, test2.cpp:34:18
      t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16
    t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
  t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11


Legalizing node: t36: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t36: i64 = Constant<2>

Legalizing node: t31: ch = setule
Analyzing result type: ch
Legal result type
Legally typed node: t31: ch = setule

Legalizing node: t29: ch = BasicBlock<if.then 0x556181f19a18>
Analyzing result type: ch
Legal result type
Legally typed node: t29: ch = BasicBlock<if.then 0x556181f19a18>

Legalizing node: t26: ch = BasicBlock<for.inc 0x556181f19ad8>
Analyzing result type: ch
Legal result type
Legally typed node: t26: ch = BasicBlock<for.inc 0x556181f19ad8>

Legalizing node: t19: f32 = Register %5
Ignoring node results
Legally typed node: t19: f32 = Register %5

Legalizing node: t15: i64 = Register %9
Ignoring node results
Legally typed node: t15: i64 = Register %9

Legalizing node: t11: i64 = Register %10
Ignoring node results
Legally typed node: t11: i64 = Register %10

Legalizing node: t9: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t9: i64 = undef

Legalizing node: t5: i64 = Register %8
Ignoring node results
Legally typed node: t5: i64 = Register %8

Legalizing node: t1: i64 = Register %4
Ignoring node results
Legally typed node: t1: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Legalizing node: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal operand
Analyzing operand: t36: i64 = Constant<2>
Legal operand
Legally typed node: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Legalizing node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Legalizing node: t7: i64 = add t6, t37, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing operand: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal operand
Analyzing operand: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t7: i64 = add t6, t37, test2.cpp:32:21

Legalizing node: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t7: i64 = add t6, t37, test2.cpp:32:21
Legal operand
Analyzing operand: t9: i64 = undef
Legal operand
Legally typed node: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21

Legalizing node: t21: f32 = bitcast t10, test2.cpp:34:18
Analyzing result type: f32
Legal result type
Analyzing operand: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Legal operand
Legally typed node: t21: f32 = bitcast t10, test2.cpp:34:18

Legalizing node: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Legalizing node: t13: i64 = add t12, t37, test2.cpp:32:12
Analyzing result type: i64
Legal result type
Analyzing operand: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal operand
Analyzing operand: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t13: i64 = add t12, t37, test2.cpp:32:12

Legalizing node: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Analyzing result type: ch
Legal result type
Analyzing operand: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Legal operand
Analyzing operand: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Legal operand
Analyzing operand: t13: i64 = add t12, t37, test2.cpp:32:12
Legal operand
Analyzing operand: t9: i64 = undef
Legal operand
Legally typed node: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12

Legalizing node: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Legalizing node: t17: i64 = add t16, t37, test2.cpp:34:11
Analyzing result type: i64
Legal result type
Analyzing operand: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal operand
Analyzing operand: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t17: i64 = add t16, t37, test2.cpp:34:11

Legalizing node: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Analyzing result type: f32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Legal operand
Analyzing operand: t17: i64 = add t16, t37, test2.cpp:34:11
Legal operand
Analyzing operand: t9: i64 = undef
Legal operand
Legally typed node: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11

Legalizing node: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Legal operand
Legally typed node: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

Legalizing node: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
Legal operand
Analyzing operand: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Legal operand
Legally typed node: t27: ch = TokenFactor t20, t14, test2.cpp:34:11

Legalizing node: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16
Analyzing result type: i1
Promote integer result: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16

Creating new node: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16
Legalizing node: t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Legal operand
Analyzing operand: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16
Promote integer operand: t33: ch = brcond t27, t32, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11

Creating new node: t39: i8 = zero_extend t32, test2.cpp:34:16
Legalizing node: t39: i8 = zero_extend t32, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t32: i1 = setcc t18, t21, setule:ch, test2.cpp:34:16
Promote integer operand: t39: i8 = zero_extend t32, test2.cpp:34:16

Creating constant: t40: i8 = Constant<1>
Creating new node: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16
Replacing: t39: i8 = zero_extend t32, test2.cpp:34:16
     with: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16
Legalizing node: t40: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t40: i8 = Constant<1>

Legalizing node: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Legal operand
Analyzing operand: t21: f32 = bitcast t10, test2.cpp:34:18
Legal operand
Analyzing operand: t31: ch = setule
Legal operand
Legally typed node: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16

Legalizing node: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16
Legal operand
Analyzing operand: t40: i8 = Constant<1>
Legal operand
Legally typed node: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16

Legalizing node: t33: ch = brcond t27, t41, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Legal operand
Analyzing operand: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16
Legal operand
Analyzing operand: t26: ch = BasicBlock<for.inc 0x556181f19ad8>
Legal operand
Legally typed node: t33: ch = brcond t27, t41, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11

Legalizing node: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t33: ch = brcond t27, t41, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Legal operand
Analyzing operand: t29: ch = BasicBlock<if.then 0x556181f19a18>
Legal operand
Legally typed node: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11

Legalizing node: t65535: ch = handlenode t30
Analyzing result type: ch
Legal result type
Analyzing operand: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
Legal operand
Legally typed node: t65535: ch = handlenode t30

Type-legalized selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 30 nodes:
  t0: ch = EntryToken
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t37, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t37, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t37, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
          t21: f32 = bitcast t10, test2.cpp:34:18
        t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16
      t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16
    t33: ch = brcond t27, t41, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
  t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11



Combining: t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16

Replacing.2 t41: i8 = and t38, Constant:i8<1>, test2.cpp:34:16

With: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16


Combining: t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16

Combining: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t36: i64 = Constant<2>

Combining: t33: ch = brcond t27, t38, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11

Combining: t31: ch = setule

Combining: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11

Combining: t29: ch = BasicBlock<if.then 0x556181f19a18>

Combining: t27: ch = TokenFactor t20, t14, test2.cpp:34:11

Combining: t26: ch = BasicBlock<for.inc 0x556181f19ad8>

Combining: t21: f32 = bitcast t10, test2.cpp:34:18

Combining: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

Combining: t19: f32 = Register %5

Combining: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11

Combining: t17: i64 = add t16, t37, test2.cpp:34:11

Combining: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Combining: t15: i64 = Register %9

Combining: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12

Combining: t13: i64 = add t12, t37, test2.cpp:32:12

Combining: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Combining: t11: i64 = Register %10

Combining: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21

Combining: t9: i64 = undef

Combining: t7: i64 = add t6, t37, test2.cpp:32:21

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Combining: t5: i64 = Register %8

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t37, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t37, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t37, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
        t21: f32 = bitcast t10, test2.cpp:34:18
      t38: i8 = setcc t18, t21, setule:ch, test2.cpp:34:16
    t33: ch = brcond t27, t38, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
  t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11



Legalizing: t30: ch = br t33, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t33: ch = brcond t27, t38, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
Trying custom legalization
Creating new node: t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
Creating constant: t43: i8 = TargetConstant<6>
Creating new node: t44: i8 = X86ISD::SETCC TargetConstant:i8<6>, t42, test2.cpp:34:16
Creating new node: t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
Successfully custom legalized node
 ... replacing: t33: ch = brcond t27, t38, BasicBlock:ch<for.inc 0x556181f19ad8>, test2.cpp:34:11
     with:      t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11

Legalizing: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Legalizing non-extending load operation

Legalizing: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t21: f32 = bitcast t10, test2.cpp:34:18
Legal node: nothing to do

Legalizing: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Legalizing non-extending load operation

Legalizing: t17: i64 = add t16, t37, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t13: i64 = add t12, t37, test2.cpp:32:12
Legal node: nothing to do

Legalizing: t7: i64 = add t6, t37, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t37: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Creating constant: t46: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal node: nothing to do

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t29: ch = BasicBlock<if.then 0x556181f19a18>
Legal node: nothing to do

Legalizing: t26: ch = BasicBlock<for.inc 0x556181f19ad8>
Legal node: nothing to do

Legalizing: t19: f32 = Register %5

Legalizing: t15: i64 = Register %9

Legalizing: t11: i64 = Register %10

Legalizing: t9: i64 = undef
Legal node: nothing to do

Legalizing: t5: i64 = Register %8

Legalizing: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t46: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t43: i8 = TargetConstant<6>

Legalizing: t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
Legal node: nothing to do
Legalized selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t37: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t37, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t37, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t37, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
        t21: f32 = bitcast t10, test2.cpp:34:18
      t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
    t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
  t30: ch = br t45, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11



Legalizing: t46: i8 = Constant<2>
Legal node: nothing to do

Combining: t46: i8 = Constant<2>

Legalizing: t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
Legal node: nothing to do

Combining: t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11

Legalizing: t43: i8 = TargetConstant<6>

Combining: t43: i8 = TargetConstant<6>

Legalizing: t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
Legal node: nothing to do

Combining: t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16

Legalizing: t30: ch = br t45, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
Legal node: nothing to do

Combining: t30: ch = br t45, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11

Legalizing: t27: ch = TokenFactor t20, t14, test2.cpp:34:11
Legal node: nothing to do

Combining: t27: ch = TokenFactor t20, t14, test2.cpp:34:11

Legalizing: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
Legal node: nothing to do

Combining: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

Legalizing: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
Legalizing non-extending load operation

Combining: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11

Legalizing: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12

Legalizing: t21: f32 = bitcast t10, test2.cpp:34:18
Legal node: nothing to do

Combining: t21: f32 = bitcast t10, test2.cpp:34:18

Legalizing: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
Legalizing non-extending load operation

Combining: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21

Legalizing: t17: i64 = add t16, t37, test2.cpp:34:11
Legal node: nothing to do

Combining: t17: i64 = add t16, t37, test2.cpp:34:11

Legalizing: t13: i64 = add t12, t37, test2.cpp:32:12
Legal node: nothing to do

Combining: t13: i64 = add t12, t37, test2.cpp:32:12

Legalizing: t7: i64 = add t6, t37, test2.cpp:32:21
Legal node: nothing to do

Combining: t7: i64 = add t6, t37, test2.cpp:32:21

Legalizing: t37: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
Legal node: nothing to do

Combining: t37: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21

Legalizing: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal node: nothing to do

Combining: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Legalizing: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal node: nothing to do

Combining: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal node: nothing to do

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Legalizing: t29: ch = BasicBlock<if.then 0x556181f19a18>
Legal node: nothing to do

Combining: t29: ch = BasicBlock<if.then 0x556181f19a18>

Legalizing: t26: ch = BasicBlock<for.inc 0x556181f19ad8>
Legal node: nothing to do

Combining: t26: ch = BasicBlock<for.inc 0x556181f19ad8>

Legalizing: t19: f32 = Register %5

Combining: t19: f32 = Register %5

Legalizing: t15: i64 = Register %9

Combining: t15: i64 = Register %9

Legalizing: t11: i64 = Register %10

Combining: t11: i64 = Register %10

Legalizing: t9: i64 = undef
Legal node: nothing to do

Combining: t9: i64 = undef

Legalizing: t5: i64 = Register %8

Combining: t5: i64 = Register %8

Legalizing: t1: i64 = Register %4

Combining: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 28 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t37: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
      t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
    t7: i64 = add t6, t37, test2.cpp:32:21
  t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
      t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
    t13: i64 = add t12, t37, test2.cpp:32:12
  t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
      t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
    t17: i64 = add t16, t37, test2.cpp:34:11
  t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
        t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
      t27: ch = TokenFactor t20, t14, test2.cpp:34:11
        t21: f32 = bitcast t10, test2.cpp:34:18
      t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
    t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
  t30: ch = br t45, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11


===== Instruction selection begins: %bb.8 'for.body11'

ISEL: Starting selection on root node: t30: ch = br t45, BasicBlock:ch<if.then 0x556181f19a18>, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t45: ch = X86ISD::BRCOND t27, BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t42, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11
  Morphed node: t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t27: ch = TokenFactor t20, t14, test2.cpp:34:11

ISEL: Starting selection on root node: t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

ISEL: Starting selection on root node: t42: i32 = X86ISD::CMP t18, t21, test2.cpp:34:16
ISEL: Starting pattern match
  Initial Opcode index to 21399
  OpcodeSwitch from 21403 to 21754
  Match failed at index 21756
  Continuing at 21975
  Skipped scope entry (due to false predicate) at index 21980, continuing at 22011
  Skipped scope entry (due to false predicate) at index 22012, continuing at 22043
  Skipped scope entry (due to false predicate) at index 22044, continuing at 22075
  Skipped scope entry (due to false predicate) at index 22076, continuing at 22107
  Match failed at index 21978
  Continuing at 22108
  Match failed at index 22115
  Continuing at 22209
  Match failed at index 22217
  Continuing at 22288
  Match failed at index 22289
  Continuing at 22363
  Continuing at 22364
  Match failed at index 22367
  Continuing at 22570
  Skipped scope entry (due to false predicate) at index 22575, continuing at 22619
  Skipped scope entry (due to false predicate) at index 22620, continuing at 22686
  Skipped scope entry (due to false predicate) at index 22687, continuing at 22753
  Skipped scope entry (due to false predicate) at index 22754, continuing at 22822
  Skipped scope entry (due to false predicate) at index 22828, continuing at 22838
  Skipped scope entry (due to false predicate) at index 22839, continuing at 22849
  Morphed node: t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16
ISEL: Match complete!

ISEL: Starting selection on root node: t18: f32,ch = load<(load 4 from %ir.12, align 8, !tbaa !54)> t14, t17, undef:i64, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
  Match failed at index 109017
  Continuing at 109034
  Match failed at index 109035
  Continuing at 109077
  Match failed at index 109078
  Continuing at 109120
  Match failed at index 109121
  Continuing at 109183
  Match failed at index 109186
  Continuing at 109205
  Match failed at index 109206
  Continuing at 109246
  Match failed at index 109247
  Continuing at 109330
  Match failed at index 109332
  Continuing at 109506
  Match failed at index 109507
  Continuing at 109571
  Match failed at index 109572
  Continuing at 109606
  Match failed at index 109607
  Continuing at 109712
  Match failed at index 109713
  Continuing at 109745
  Match failed at index 109746
  Continuing at 109778
  TypeSwitch[f32] from 109781 to 109784
  Match failed at index 109784
  Continuing at 109841
  Match failed at index 109842
  Continuing at 109910
  TypeSwitch[f32] from 109914 to 109917
  Skipped scope entry (due to false predicate) at index 109919, continuing at 109936
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t49: i8 = TargetConstant<4>
Creating constant: t50: i32 = TargetConstant<0>
  Morphed node: t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t14: ch = store<(store 4 into %ir.10, align 8, !tbaa !54)> t10:1, t10, t13, undef:i64, test2.cpp:32:12
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 13, continuing at 80
  Skipped scope entry (due to false predicate) at index 81, continuing at 148
  Skipped scope entry (due to false predicate) at index 149, continuing at 198
  Skipped scope entry (due to false predicate) at index 199, continuing at 248
  Skipped scope entry (due to false predicate) at index 249, continuing at 316
  Skipped scope entry (due to false predicate) at index 317, continuing at 366
  Match failed at index 374
  Continuing at 393
  Match failed at index 394
  Continuing at 420
  Match failed at index 421
  Continuing at 470
  Match failed at index 471
  Continuing at 520
  Match failed at index 521
  Continuing at 570
  Match failed at index 571
  Continuing at 638
  Match failed at index 639
  Continuing at 706
  Match failed at index 707
  Continuing at 774
  Match failed at index 775
  Continuing at 803
  Match failed at index 804
  Continuing at 832
  Match failed at index 833
  Continuing at 861
  Match failed at index 862
  Continuing at 890
  Match failed at index 891
  Continuing at 919
  Match failed at index 920
  Continuing at 948
  Match failed at index 949
  Continuing at 986
  Match failed at index 987
  Continuing at 1024
  Continuing at 1025
  Match failed at index 1028
  Continuing at 11390
  Match failed at index 11394
  Continuing at 12456
  Match failed at index 12459
  Continuing at 12946
  Match failed at index 12947
  Continuing at 13044
  Match failed at index 13046
  Continuing at 13179
  TypeSwitch[i32] from 13182 to 13241
  Match failed at index 13249
  Continuing at 13300
  Match failed at index 13302
  Continuing at 13383
  Skipped scope entry (due to false predicate) at index 13388, continuing at 13470
  Skipped scope entry (due to false predicate) at index 13471, continuing at 13579
  Skipped scope entry (due to false predicate) at index 13580, continuing at 13649
  Skipped scope entry (due to false predicate) at index 13650, continuing at 13672
  Skipped scope entry (due to false predicate) at index 13673, continuing at 13695
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12
ISEL: Match complete!

ISEL: Starting selection on root node: t21: f32 = bitcast t10, test2.cpp:34:18
ISEL: Starting pattern match
  Initial Opcode index to 120859
  Match failed at index 120862
  Continuing at 120884
  Skipped scope entry (due to false predicate) at index 120889, continuing at 120904
  Skipped scope entry (due to false predicate) at index 120905, continuing at 120920
  Skipped scope entry (due to false predicate) at index 120921, continuing at 120970
  Skipped scope entry (due to false predicate) at index 120971, continuing at 121007
  Skipped scope entry (due to false predicate) at index 121008, continuing at 121021
  Skipped scope entry (due to false predicate) at index 121022, continuing at 121035
  Skipped scope entry (due to false predicate) at index 121036, continuing at 121062
  Skipped scope entry (due to false predicate) at index 121063, continuing at 121089
  Match failed at index 120887
  Continuing at 121090
  Match failed at index 121093
  Continuing at 121227
  TypeSwitch[f32] from 121229 to 121300
  Skipped scope entry (due to false predicate) at index 121306, continuing at 121315
  Morphed node: t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18
ISEL: Match complete!

ISEL: Starting selection on root node: t10: i32,ch = load<(load 4 from %ir.7, align 8, !tbaa !54)> t0, t7, undef:i64, test2.cpp:32:21
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21
ISEL: Match complete!

ISEL: Starting selection on root node: t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

ISEL: Starting selection on root node: t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

ISEL: Starting selection on root node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

ISEL: Starting selection on root node: t43: i8 = TargetConstant<6>

ISEL: Starting selection on root node: t29: ch = BasicBlock<if.then 0x556181f19a18>

ISEL: Starting selection on root node: t26: ch = BasicBlock<for.inc 0x556181f19ad8>

ISEL: Starting selection on root node: t19: f32 = Register %5

ISEL: Starting selection on root node: t15: i64 = Register %9

ISEL: Starting selection on root node: t11: i64 = Register %10

ISEL: Starting selection on root node: t5: i64 = Register %8

ISEL: Starting selection on root node: t1: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.8 '_Z5test2PfS_S_i:for.body11'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
    t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
  t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21
    t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
  t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12
    t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
  t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11
      t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11
    t27: ch = TokenFactor t20, t14, test2.cpp:34:11
      t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18
    t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16
  t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11
    t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11
  t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11


********** List Scheduling %bb.8 'for.body11' **********
SU(0): t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11

    t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(11): Ord  Latency=0 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(2): Data Latency=1
SU(4): t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1
    SU(5): Data Latency=1
  Successors:
    SU(3): Data Latency=1
    SU(8): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1
    SU(7): Data Latency=1
    SU(8): Data Latency=1
SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1
SU(7): t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1
    SU(5): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(2): Data Latency=1
    SU(12): Data Latency=1
SU(8): t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1
    SU(5): Data Latency=1
    SU(4): Data Latency=1
    SU(4): Ord  Latency=1 Barrier
  Successors:
    SU(7): Ord  Latency=1 Barrier
    SU(11): Ord  Latency=1 Barrier
SU(9): t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=1
SU(10): t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=1
SU(11): t27: ch = TokenFactor t20, t14, test2.cpp:34:11

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(12): Ord  Latency=1 Barrier
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(1): Ord  Latency=0 Barrier
SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
  Successors:
    SU(11): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11


*** Scheduling [0]: SU(0): t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11


Examining Available:
Height 1: SU(1): t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11

    t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11


*** Scheduling [1]: SU(1): t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11

    t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11


Examining Available:
Height 1: SU(11): t27: ch = TokenFactor t20, t14, test2.cpp:34:11

Height 2: SU(2): t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16


*** Scheduling [2]: SU(11): t27: ch = TokenFactor t20, t14, test2.cpp:34:11


Examining Available:
Height 2: SU(2): t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16

Height 3: SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11


*** Scheduling [3]: SU(2): t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16


Examining Available:
Height 4: SU(3): t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18

Height 3: SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11


*** Scheduling [4]: SU(3): t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18


Examining Available:
Height 3: SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11


*** Scheduling [5]: SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11


Examining Available:
Height 6: SU(7): t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11


*** Scheduling [6]: SU(7): t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11


Examining Available:
Height 7: SU(10): t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Height 7: SU(8): t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12


*** Scheduling [7]: SU(10): t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11


Examining Available:
Height 7: SU(8): t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12


*** Scheduling [8]: SU(8): t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12


Examining Available:
Height 9: SU(9): t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Height 9: SU(4): t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21


*** Scheduling [9]: SU(9): t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12


Examining Available:
Height 9: SU(4): t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21


*** Scheduling [10]: SU(4): t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21


Examining Available:
Height 11: SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Height 11: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21


*** Scheduling [11]: SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21


Examining Available:
Height 11: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21


*** Scheduling [12]: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

*** Final schedule ***
SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

SU(4): t10: i32,ch = MOV32rm<Mem:(load 4 from %ir.7, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t0, test2.cpp:32:21

SU(9): t12: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

SU(8): t14: ch = MOV32mr<Mem:(store 4 into %ir.10, align 8, !tbaa !54)> t12, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t10, t10:1, test2.cpp:32:12

SU(10): t16: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

SU(7): t18: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.12, align 8, !tbaa !54)> t16, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t14, test2.cpp:34:11

SU(12): t20: ch = CopyToReg t0, Register:f32 %5, t18, test2.cpp:34:11

SU(3): t21: f32 = MOVDI2SSrr t10, test2.cpp:34:18

SU(2): t42: i32 = UCOMISSrr nofpexcept t18, t21, test2.cpp:34:16

SU(11): t27: ch = TokenFactor t20, t14, test2.cpp:34:11

SU(1): t45: ch = JCC_1 BasicBlock:ch<for.inc 0x556181f19ad8>, TargetConstant:i8<6>, t48, t48:1, test2.cpp:34:11

    t48: ch,glue = CopyToReg t27, Register:i32 $eflags, t42, test2.cpp:34:11

SU(0): t30: ch = JMP_1 BasicBlock:ch<if.then 0x556181f19a18>, t45, test2.cpp:34:11


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Creating constant: t3: i64 = Constant<4>
Creating new node: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Creating new node: t7: i64 = add t6, t4, test2.cpp:35:14
Creating new node: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
Creating constant: t10: i64 = Constant<0>
Creating new node: t11: i64 = undef
Creating new node: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
Initial selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 13 nodes:
  t0: ch = EntryToken
  t10: i64 = Constant<0>
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
      t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
        t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
      t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
    t7: i64 = add t6, t4, test2.cpp:35:14
  t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14



Combining: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14

Combining: t11: i64 = undef

Combining: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

Combining: t8: f32 = Register %5

Combining: t7: i64 = add t6, t4, test2.cpp:35:14

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Combining: t5: i64 = Register %10

Combining: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
Creating constant: t13: i64 = Constant<61>
Creating constant: t14: i64 = Constant<63>
Creating constant: t15: i64 = Constant<2>
Creating new node: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
 ... into: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Combining: t7: i64 = add t6, t16, test2.cpp:35:14

Combining: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Combining: t15: i64 = Constant<2>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
      t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
        t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
      t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
    t7: i64 = add t6, t16, test2.cpp:35:14
  t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14


Legalizing node: t15: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t15: i64 = Constant<2>

Legalizing node: t11: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t11: i64 = undef

Legalizing node: t8: f32 = Register %5
Ignoring node results
Legally typed node: t8: f32 = Register %5

Legalizing node: t5: i64 = Register %10
Ignoring node results
Legally typed node: t5: i64 = Register %10

Legalizing node: t1: i64 = Register %4
Ignoring node results
Legally typed node: t1: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Legalizing node: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal operand
Analyzing operand: t15: i64 = Constant<2>
Legal operand
Legally typed node: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Legalizing node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Legalizing node: t7: i64 = add t6, t16, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing operand: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal operand
Analyzing operand: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Legal operand
Legally typed node: t7: i64 = add t6, t16, test2.cpp:35:14

Legalizing node: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
Analyzing result type: f32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

Legalizing node: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
Legal operand
Analyzing operand: t7: i64 = add t6, t16, test2.cpp:35:14
Legal operand
Analyzing operand: t11: i64 = undef
Legal operand
Legally typed node: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14

Legalizing node: t65535: ch = handlenode t12
Analyzing result type: ch
Legal result type
Analyzing operand: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
Legal operand
Legally typed node: t65535: ch = handlenode t12

Type-legalized selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
      t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
        t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
      t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
    t7: i64 = add t6, t16, test2.cpp:35:14
  t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14



Legalizing: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t7: i64 = add t6, t16, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t16: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Creating constant: t17: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t11: i64 = undef
Legal node: nothing to do

Legalizing: t8: f32 = Register %5

Legalizing: t5: i64 = Register %10

Legalizing: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t17: i8 = Constant<2>
Legal node: nothing to do
Legalized selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
      t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
        t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
      t16: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
    t7: i64 = add t6, t16, test2.cpp:35:14
  t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14



Legalizing: t17: i8 = Constant<2>
Legal node: nothing to do

Combining: t17: i8 = Constant<2>

Legalizing: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14

Legalizing: t7: i64 = add t6, t16, test2.cpp:35:14
Legal node: nothing to do

Combining: t7: i64 = add t6, t16, test2.cpp:35:14

Legalizing: t16: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
Legal node: nothing to do

Combining: t16: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14

Legalizing: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
Legal node: nothing to do

Combining: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal node: nothing to do

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Legalizing: t11: i64 = undef
Legal node: nothing to do

Combining: t11: i64 = undef

Legalizing: t8: f32 = Register %5

Combining: t8: f32 = Register %5

Legalizing: t5: i64 = Register %10

Combining: t5: i64 = Register %10

Legalizing: t1: i64 = Register %4

Combining: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 12 nodes:
  t0: ch = EntryToken
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
      t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
        t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
      t16: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
    t7: i64 = add t6, t16, test2.cpp:35:14
  t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14


===== Instruction selection begins: %bb.9 'if.then'

ISEL: Starting selection on root node: t12: ch = store<(store 4 into %ir.15, align 8, !tbaa !54)> t0, t9, t7, undef:i64, test2.cpp:35:14
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 13, continuing at 80
  Skipped scope entry (due to false predicate) at index 81, continuing at 148
  Skipped scope entry (due to false predicate) at index 149, continuing at 198
  Skipped scope entry (due to false predicate) at index 199, continuing at 248
  Skipped scope entry (due to false predicate) at index 249, continuing at 316
  Skipped scope entry (due to false predicate) at index 317, continuing at 366
  Skipped scope entry (due to false predicate) at index 367, continuing at 393
  Skipped scope entry (due to false predicate) at index 394, continuing at 420
  Skipped scope entry (due to false predicate) at index 421, continuing at 470
  Skipped scope entry (due to false predicate) at index 471, continuing at 520
  Skipped scope entry (due to false predicate) at index 521, continuing at 570
  Skipped scope entry (due to false predicate) at index 571, continuing at 638
  Skipped scope entry (due to false predicate) at index 639, continuing at 706
  Skipped scope entry (due to false predicate) at index 707, continuing at 774
  Skipped scope entry (due to false predicate) at index 775, continuing at 803
  Skipped scope entry (due to false predicate) at index 804, continuing at 832
  Skipped scope entry (due to false predicate) at index 833, continuing at 861
  Skipped scope entry (due to false predicate) at index 862, continuing at 890
  Skipped scope entry (due to false predicate) at index 891, continuing at 919
  Skipped scope entry (due to false predicate) at index 920, continuing at 948
  Match failed at index 956
  Continuing at 986
  Match failed at index 987
  Continuing at 1024
  Continuing at 1025
  Match failed at index 1028
  Continuing at 11390
  Match failed at index 11394
  Continuing at 12456
  Match failed at index 12459
  Continuing at 12946
  Match failed at index 12947
  Continuing at 13044
  Match failed at index 13046
  Continuing at 13179
  Match failed at index 13182
  Continuing at 13300
  Match failed at index 13302
  Continuing at 13383
  Skipped scope entry (due to false predicate) at index 13397, continuing at 13415
  Skipped scope entry (due to false predicate) at index 13416, continuing at 13433
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t18: i8 = TargetConstant<4>
Creating constant: t19: i32 = TargetConstant<0>
  Morphed node: t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14
ISEL: Match complete!

ISEL: Starting selection on root node: t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

ISEL: Starting selection on root node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

ISEL: Starting selection on root node: t8: f32 = Register %5

ISEL: Starting selection on root node: t5: i64 = Register %10

ISEL: Starting selection on root node: t1: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.9 '_Z5test2PfS_S_i:if.then'
SelectionDAG has 11 nodes:
  t0: ch = EntryToken
    t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
    t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14
  t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14


********** List Scheduling %bb.9 'if.then' **********
SU(0): t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1
    SU(2): Data Latency=1
    SU(1): Data Latency=1
SU(1): t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14


*** Scheduling [0]: SU(0): t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14


Examining Available:
Height 1: SU(1): t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

Height 1: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [1]: SU(1): t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14


Examining Available:
Height 1: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [2]: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14


Examining Available:
Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [3]: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

*** Final schedule ***
SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

SU(1): t9: f32,ch = CopyFromReg t0, Register:f32 %5, test2.cpp:35:14

SU(0): t12: ch = MOVSSmr<Mem:(store 4 into %ir.15, align 8, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<0>, Register:i16 $noreg, t9, t0, test2.cpp:35:14


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Creating constant: t3: i64 = Constant<4>
Creating new node: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Creating new node: t7: i64 = add t6, t4, test2.cpp:32:21
Creating new node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
Creating constant: t9: i64 = Constant<0>
Creating new node: t10: i64 = undef
Creating new node: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Creating new node: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Creating new node: t14: i64 = add t13, t4, test2.cpp:32:12
Creating new node: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
Creating new node: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Creating new node: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Creating new node: t19: i64 = add t18, t4, test2.cpp:34:11
Creating new node: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
Creating new node: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Creating new node: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
Creating new node: t24: f32 = bitcast t11, test2.cpp:34:18
Creating new node: t26: i1 = setcc t21, t24, setogt:ch, test2.cpp:34:16
Creating constant: t27: i1 = Constant<-1>
Creating new node: t28: i1 = xor t26, Constant:i1<-1>, test2.cpp:34:11
Creating new node: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Creating new node: t31: ch = brcond t30, t28, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Creating new node: t33: ch = br t31, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
Initial selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 34 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
  t9: i64 = Constant<0>
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t4, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t4, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t4, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
          t24: f32 = bitcast t11, test2.cpp:34:18
        t26: i1 = setcc t21, t24, setogt:ch, test2.cpp:34:16
      t28: i1 = xor t26, Constant:i1<-1>, test2.cpp:34:11
    t31: ch = brcond t30, t28, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
  t33: ch = br t31, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11



Combining: t33: ch = br t31, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11

Combining: t32: ch = BasicBlock<if.then.1 0x556181f19b98>

Combining: t31: ch = brcond t30, t28, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Creating new node: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16
Creating new node: t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
 ... into: t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11

Combining: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11

Combining: t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11

Combining: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16

Combining: t34: ch = setule

Combining: t30: ch = TokenFactor t23, t16, test2.cpp:34:11

Combining: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>

Combining: t24: f32 = bitcast t11, test2.cpp:34:18

Combining: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

Combining: t22: f32 = Register %6

Combining: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11

Combining: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11

Combining: t19: i64 = add t18, t4, test2.cpp:34:11

Combining: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Combining: t17: i64 = Register %9

Combining: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12

Combining: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12

Combining: t14: i64 = add t13, t4, test2.cpp:32:12

Combining: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Combining: t12: i64 = Register %10

Combining: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21

Combining: t10: i64 = undef

Combining: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21

Combining: t7: i64 = add t6, t4, test2.cpp:32:21

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Combining: t5: i64 = Register %8

Combining: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:32:21
Creating constant: t37: i64 = Constant<61>
Creating constant: t38: i64 = Constant<63>
Creating constant: t39: i64 = Constant<2>
Creating new node: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
 ... into: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t19: i64 = add t18, t40, test2.cpp:34:11

Combining: t14: i64 = add t13, t40, test2.cpp:32:12

Combining: t7: i64 = add t6, t40, test2.cpp:32:21

Combining: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t39: i64 = Constant<2>

Combining: t3: i64 = Constant<4>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t40, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t40, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t40, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
        t24: f32 = bitcast t11, test2.cpp:34:18
      t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16
    t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
  t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11


Legalizing node: t39: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t39: i64 = Constant<2>

Legalizing node: t34: ch = setule
Analyzing result type: ch
Legal result type
Legally typed node: t34: ch = setule

Legalizing node: t32: ch = BasicBlock<if.then.1 0x556181f19b98>
Analyzing result type: ch
Legal result type
Legally typed node: t32: ch = BasicBlock<if.then.1 0x556181f19b98>

Legalizing node: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>
Analyzing result type: ch
Legal result type
Legally typed node: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>

Legalizing node: t22: f32 = Register %6
Ignoring node results
Legally typed node: t22: f32 = Register %6

Legalizing node: t17: i64 = Register %9
Ignoring node results
Legally typed node: t17: i64 = Register %9

Legalizing node: t12: i64 = Register %10
Ignoring node results
Legally typed node: t12: i64 = Register %10

Legalizing node: t10: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t10: i64 = undef

Legalizing node: t5: i64 = Register %8
Ignoring node results
Legally typed node: t5: i64 = Register %8

Legalizing node: t3: i64 = Constant<4>
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = Constant<4>

Legalizing node: t1: i64 = Register %4
Ignoring node results
Legally typed node: t1: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Legalizing node: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal operand
Analyzing operand: t39: i64 = Constant<2>
Legal operand
Legally typed node: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Legalizing node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Legalizing node: t7: i64 = add t6, t40, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing operand: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal operand
Analyzing operand: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t7: i64 = add t6, t40, test2.cpp:32:21

Legalizing node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
Analyzing result type: i64
Legal result type
Analyzing operand: t7: i64 = add t6, t40, test2.cpp:32:21
Legal operand
Analyzing operand: t3: i64 = Constant<4>
Legal operand
Legally typed node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21

Legalizing node: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
Legal operand
Analyzing operand: t10: i64 = undef
Legal operand
Legally typed node: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21

Legalizing node: t24: f32 = bitcast t11, test2.cpp:34:18
Analyzing result type: f32
Legal result type
Analyzing operand: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Legal operand
Legally typed node: t24: f32 = bitcast t11, test2.cpp:34:18

Legalizing node: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Legalizing node: t14: i64 = add t13, t40, test2.cpp:32:12
Analyzing result type: i64
Legal result type
Analyzing operand: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal operand
Analyzing operand: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t14: i64 = add t13, t40, test2.cpp:32:12

Legalizing node: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
Analyzing result type: i64
Legal result type
Analyzing operand: t14: i64 = add t13, t40, test2.cpp:32:12
Legal operand
Analyzing operand: t3: i64 = Constant<4>
Legal operand
Legally typed node: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12

Legalizing node: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Analyzing result type: ch
Legal result type
Analyzing operand: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Legal operand
Analyzing operand: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Legal operand
Analyzing operand: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
Legal operand
Analyzing operand: t10: i64 = undef
Legal operand
Legally typed node: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12

Legalizing node: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Legalizing node: t19: i64 = add t18, t40, test2.cpp:34:11
Analyzing result type: i64
Legal result type
Analyzing operand: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal operand
Analyzing operand: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Legal operand
Legally typed node: t19: i64 = add t18, t40, test2.cpp:34:11

Legalizing node: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
Analyzing result type: i64
Legal result type
Analyzing operand: t19: i64 = add t18, t40, test2.cpp:34:11
Legal operand
Analyzing operand: t3: i64 = Constant<4>
Legal operand
Legally typed node: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11

Legalizing node: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Analyzing result type: f32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Legal operand
Analyzing operand: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
Legal operand
Analyzing operand: t10: i64 = undef
Legal operand
Legally typed node: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11

Legalizing node: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Legal operand
Legally typed node: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

Legalizing node: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
Legal operand
Analyzing operand: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Legal operand
Legally typed node: t30: ch = TokenFactor t23, t16, test2.cpp:34:11

Legalizing node: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16
Analyzing result type: i1
Promote integer result: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16

Creating new node: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16
Legalizing node: t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Legal operand
Analyzing operand: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16
Promote integer operand: t36: ch = brcond t30, t35, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11

Creating new node: t42: i8 = zero_extend t35, test2.cpp:34:16
Legalizing node: t42: i8 = zero_extend t35, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t35: i1 = setcc t21, t24, setule:ch, test2.cpp:34:16
Promote integer operand: t42: i8 = zero_extend t35, test2.cpp:34:16

Creating constant: t43: i8 = Constant<1>
Creating new node: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16
Replacing: t42: i8 = zero_extend t35, test2.cpp:34:16
     with: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16
Legalizing node: t43: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t43: i8 = Constant<1>

Legalizing node: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Legal operand
Analyzing operand: t24: f32 = bitcast t11, test2.cpp:34:18
Legal operand
Analyzing operand: t34: ch = setule
Legal operand
Legally typed node: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16

Legalizing node: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16
Analyzing result type: i8
Legal result type
Analyzing operand: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16
Legal operand
Analyzing operand: t43: i8 = Constant<1>
Legal operand
Legally typed node: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16

Legalizing node: t36: ch = brcond t30, t44, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Legal operand
Analyzing operand: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16
Legal operand
Analyzing operand: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>
Legal operand
Legally typed node: t36: ch = brcond t30, t44, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11

Legalizing node: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
Analyzing result type: ch
Legal result type
Analyzing operand: t36: ch = brcond t30, t44, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Legal operand
Analyzing operand: t32: ch = BasicBlock<if.then.1 0x556181f19b98>
Legal operand
Legally typed node: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11

Legalizing node: t65535: ch = handlenode t33
Analyzing result type: ch
Legal result type
Analyzing operand: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
Legal operand
Legally typed node: t65535: ch = handlenode t33

Type-legalized selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 34 nodes:
  t0: ch = EntryToken
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t40, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t40, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t40, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
          t24: f32 = bitcast t11, test2.cpp:34:18
        t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16
      t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16
    t36: ch = brcond t30, t44, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
  t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11



Combining: t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16

Replacing.2 t44: i8 = and t41, Constant:i8<1>, test2.cpp:34:16

With: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16


Combining: t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16

Combining: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21

Combining: t39: i64 = Constant<2>

Combining: t36: ch = brcond t30, t41, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11

Combining: t34: ch = setule

Combining: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11

Combining: t32: ch = BasicBlock<if.then.1 0x556181f19b98>

Combining: t30: ch = TokenFactor t23, t16, test2.cpp:34:11

Combining: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>

Combining: t24: f32 = bitcast t11, test2.cpp:34:18

Combining: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

Combining: t22: f32 = Register %6

Combining: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11

Combining: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11

Combining: t19: i64 = add t18, t40, test2.cpp:34:11

Combining: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Combining: t17: i64 = Register %9

Combining: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12

Combining: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12

Combining: t14: i64 = add t13, t40, test2.cpp:32:12

Combining: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Combining: t12: i64 = Register %10

Combining: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21

Combining: t10: i64 = undef

Combining: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21

Combining: t7: i64 = add t6, t40, test2.cpp:32:21

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Combining: t5: i64 = Register %8

Combining: t3: i64 = Constant<4>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t40, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t40, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t40, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
        t24: f32 = bitcast t11, test2.cpp:34:18
      t41: i8 = setcc t21, t24, setule:ch, test2.cpp:34:16
    t36: ch = brcond t30, t41, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
  t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11



Legalizing: t33: ch = br t36, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t36: ch = brcond t30, t41, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
Trying custom legalization
Creating new node: t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
Creating constant: t46: i8 = TargetConstant<6>
Creating new node: t47: i8 = X86ISD::SETCC TargetConstant:i8<6>, t45, test2.cpp:34:16
Creating new node: t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
Successfully custom legalized node
 ... replacing: t36: ch = brcond t30, t41, BasicBlock:ch<for.inc.1 0x556181f19c58>, test2.cpp:34:11
     with:      t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11

Legalizing: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Legalizing non-extending load operation

Legalizing: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t24: f32 = bitcast t11, test2.cpp:34:18
Legal node: nothing to do

Legalizing: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Legalizing non-extending load operation

Legalizing: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
Legal node: nothing to do

Legalizing: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t19: i64 = add t18, t40, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t14: i64 = add t13, t40, test2.cpp:32:12
Legal node: nothing to do

Legalizing: t7: i64 = add t6, t40, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t40: i64 = shl t2, Constant:i64<2>, test2.cpp:32:21
Creating constant: t49: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal node: nothing to do

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal node: nothing to do

Legalizing: t32: ch = BasicBlock<if.then.1 0x556181f19b98>
Legal node: nothing to do

Legalizing: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>
Legal node: nothing to do

Legalizing: t22: f32 = Register %6

Legalizing: t17: i64 = Register %9

Legalizing: t12: i64 = Register %10

Legalizing: t10: i64 = undef
Legal node: nothing to do

Legalizing: t5: i64 = Register %8

Legalizing: t3: i64 = Constant<4>
Legal node: nothing to do

Legalizing: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t49: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
Legal node: nothing to do

Legalizing: t46: i8 = TargetConstant<6>

Legalizing: t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
Legal node: nothing to do
Legalized selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t40: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t40, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t40, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t40, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
        t24: f32 = bitcast t11, test2.cpp:34:18
      t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
    t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
  t33: ch = br t48, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11



Legalizing: t49: i8 = Constant<2>
Legal node: nothing to do

Combining: t49: i8 = Constant<2>

Legalizing: t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
Legal node: nothing to do

Combining: t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11

Legalizing: t46: i8 = TargetConstant<6>

Combining: t46: i8 = TargetConstant<6>

Legalizing: t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
Legal node: nothing to do

Combining: t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16

Legalizing: t33: ch = br t48, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
Legal node: nothing to do

Combining: t33: ch = br t48, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11

Legalizing: t30: ch = TokenFactor t23, t16, test2.cpp:34:11
Legal node: nothing to do

Combining: t30: ch = TokenFactor t23, t16, test2.cpp:34:11

Legalizing: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
Legal node: nothing to do

Combining: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

Legalizing: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
Legalizing non-extending load operation

Combining: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11

Legalizing: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12

Legalizing: t24: f32 = bitcast t11, test2.cpp:34:18
Legal node: nothing to do

Combining: t24: f32 = bitcast t11, test2.cpp:34:18

Legalizing: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
Legalizing non-extending load operation

Combining: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21

Legalizing: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
Legal node: nothing to do

Combining: t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11

Legalizing: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
Legal node: nothing to do

Combining: t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12

Legalizing: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
Legal node: nothing to do

Combining: t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21

Legalizing: t19: i64 = add t18, t40, test2.cpp:34:11
Legal node: nothing to do

Combining: t19: i64 = add t18, t40, test2.cpp:34:11

Legalizing: t14: i64 = add t13, t40, test2.cpp:32:12
Legal node: nothing to do

Combining: t14: i64 = add t13, t40, test2.cpp:32:12

Legalizing: t7: i64 = add t6, t40, test2.cpp:32:21
Legal node: nothing to do

Combining: t7: i64 = add t6, t40, test2.cpp:32:21

Legalizing: t40: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
Legal node: nothing to do

Combining: t40: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21

Legalizing: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
Legal node: nothing to do

Combining: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Legalizing: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
Legal node: nothing to do

Combining: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
Legal node: nothing to do

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

Legalizing: t32: ch = BasicBlock<if.then.1 0x556181f19b98>
Legal node: nothing to do

Combining: t32: ch = BasicBlock<if.then.1 0x556181f19b98>

Legalizing: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>
Legal node: nothing to do

Combining: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>

Legalizing: t22: f32 = Register %6

Combining: t22: f32 = Register %6

Legalizing: t17: i64 = Register %9

Combining: t17: i64 = Register %9

Legalizing: t12: i64 = Register %10

Combining: t12: i64 = Register %10

Legalizing: t10: i64 = undef
Legal node: nothing to do

Combining: t10: i64 = undef

Legalizing: t5: i64 = Register %8

Combining: t5: i64 = Register %8

Legalizing: t3: i64 = Constant<4>
Legal node: nothing to do

Combining: t3: i64 = Constant<4>

Legalizing: t1: i64 = Register %4

Combining: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 32 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
  t40: i64 = shl t2, Constant:i8<2>, test2.cpp:32:21
        t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
      t7: i64 = add t6, t40, test2.cpp:32:21
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:32:21
  t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
        t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
      t14: i64 = add t13, t40, test2.cpp:32:12
    t15: i64 = add t14, Constant:i64<4>, test2.cpp:32:12
  t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
        t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
      t19: i64 = add t18, t40, test2.cpp:34:11
    t20: i64 = add t19, Constant:i64<4>, test2.cpp:34:11
  t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
        t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
      t30: ch = TokenFactor t23, t16, test2.cpp:34:11
        t24: f32 = bitcast t11, test2.cpp:34:18
      t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
    t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
  t33: ch = br t48, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11


===== Instruction selection begins: %bb.10 'for.inc'

ISEL: Starting selection on root node: t33: ch = br t48, BasicBlock:ch<if.then.1 0x556181f19b98>, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t48: ch = X86ISD::BRCOND t30, BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t45, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11
  Morphed node: t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t30: ch = TokenFactor t23, t16, test2.cpp:34:11

ISEL: Starting selection on root node: t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

ISEL: Starting selection on root node: t45: i32 = X86ISD::CMP t21, t24, test2.cpp:34:16
ISEL: Starting pattern match
  Initial Opcode index to 21399
  OpcodeSwitch from 21403 to 21754
  Match failed at index 21756
  Continuing at 21975
  Skipped scope entry (due to false predicate) at index 21980, continuing at 22011
  Skipped scope entry (due to false predicate) at index 22012, continuing at 22043
  Skipped scope entry (due to false predicate) at index 22044, continuing at 22075
  Skipped scope entry (due to false predicate) at index 22076, continuing at 22107
  Match failed at index 21978
  Continuing at 22108
  Match failed at index 22115
  Continuing at 22209
  Match failed at index 22217
  Continuing at 22288
  Match failed at index 22289
  Continuing at 22363
  Continuing at 22364
  Match failed at index 22367
  Continuing at 22570
  Skipped scope entry (due to false predicate) at index 22575, continuing at 22619
  Skipped scope entry (due to false predicate) at index 22620, continuing at 22686
  Skipped scope entry (due to false predicate) at index 22687, continuing at 22753
  Skipped scope entry (due to false predicate) at index 22754, continuing at 22822
  Skipped scope entry (due to false predicate) at index 22828, continuing at 22838
  Skipped scope entry (due to false predicate) at index 22839, continuing at 22849
  Morphed node: t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16
ISEL: Match complete!

ISEL: Starting selection on root node: t21: f32,ch = load<(load 4 from %ir.22, !tbaa !54)> t16, t20, undef:i64, test2.cpp:34:11
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
  Match failed at index 109017
  Continuing at 109034
  Match failed at index 109035
  Continuing at 109077
  Match failed at index 109078
  Continuing at 109120
  Match failed at index 109121
  Continuing at 109183
  Match failed at index 109186
  Continuing at 109205
  Match failed at index 109206
  Continuing at 109246
  Match failed at index 109247
  Continuing at 109330
  Match failed at index 109332
  Continuing at 109506
  Match failed at index 109507
  Continuing at 109571
  Match failed at index 109572
  Continuing at 109606
  Match failed at index 109607
  Continuing at 109712
  Match failed at index 109713
  Continuing at 109745
  Match failed at index 109746
  Continuing at 109778
  TypeSwitch[f32] from 109781 to 109784
  Match failed at index 109784
  Continuing at 109841
  Match failed at index 109842
  Continuing at 109910
  TypeSwitch[f32] from 109914 to 109917
  Skipped scope entry (due to false predicate) at index 109919, continuing at 109936
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
 Scale 4
IndexReg t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t52: i8 = TargetConstant<4>
Creating constant: t53: i32 = TargetConstant<4>
  Morphed node: t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11
ISEL: Match complete!

ISEL: Starting selection on root node: t16: ch = store<(store 4 into %ir.20, !tbaa !54)> t11:1, t11, t15, undef:i64, test2.cpp:32:12
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 13, continuing at 80
  Skipped scope entry (due to false predicate) at index 81, continuing at 148
  Skipped scope entry (due to false predicate) at index 149, continuing at 198
  Skipped scope entry (due to false predicate) at index 199, continuing at 248
  Skipped scope entry (due to false predicate) at index 249, continuing at 316
  Skipped scope entry (due to false predicate) at index 317, continuing at 366
  Match failed at index 374
  Continuing at 393
  Match failed at index 394
  Continuing at 420
  Match failed at index 421
  Continuing at 470
  Match failed at index 471
  Continuing at 520
  Match failed at index 521
  Continuing at 570
  Match failed at index 571
  Continuing at 638
  Match failed at index 639
  Continuing at 706
  Match failed at index 707
  Continuing at 774
  Match failed at index 775
  Continuing at 803
  Match failed at index 804
  Continuing at 832
  Match failed at index 833
  Continuing at 861
  Match failed at index 862
  Continuing at 890
  Match failed at index 891
  Continuing at 919
  Match failed at index 920
  Continuing at 948
  Match failed at index 949
  Continuing at 986
  Match failed at index 987
  Continuing at 1024
  Continuing at 1025
  Match failed at index 1028
  Continuing at 11390
  Match failed at index 11394
  Continuing at 12456
  Match failed at index 12459
  Continuing at 12946
  Match failed at index 12947
  Continuing at 13044
  Match failed at index 13046
  Continuing at 13179
  TypeSwitch[i32] from 13182 to 13241
  Match failed at index 13249
  Continuing at 13300
  Match failed at index 13302
  Continuing at 13383
  Skipped scope entry (due to false predicate) at index 13388, continuing at 13470
  Skipped scope entry (due to false predicate) at index 13471, continuing at 13579
  Skipped scope entry (due to false predicate) at index 13580, continuing at 13649
  Skipped scope entry (due to false predicate) at index 13650, continuing at 13672
  Skipped scope entry (due to false predicate) at index 13673, continuing at 13695
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
 Scale 4
IndexReg t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12
ISEL: Match complete!

ISEL: Starting selection on root node: t24: f32 = bitcast t11, test2.cpp:34:18
ISEL: Starting pattern match
  Initial Opcode index to 120859
  Match failed at index 120862
  Continuing at 120884
  Skipped scope entry (due to false predicate) at index 120889, continuing at 120904
  Skipped scope entry (due to false predicate) at index 120905, continuing at 120920
  Skipped scope entry (due to false predicate) at index 120921, continuing at 120970
  Skipped scope entry (due to false predicate) at index 120971, continuing at 121007
  Skipped scope entry (due to false predicate) at index 121008, continuing at 121021
  Skipped scope entry (due to false predicate) at index 121022, continuing at 121035
  Skipped scope entry (due to false predicate) at index 121036, continuing at 121062
  Skipped scope entry (due to false predicate) at index 121063, continuing at 121089
  Match failed at index 120887
  Continuing at 121090
  Match failed at index 121093
  Continuing at 121227
  TypeSwitch[f32] from 121229 to 121300
  Skipped scope entry (due to false predicate) at index 121306, continuing at 121315
  Morphed node: t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18
ISEL: Match complete!

ISEL: Starting selection on root node: t11: i32,ch = load<(load 4 from %ir.17, !tbaa !54)> t0, t8, undef:i64, test2.cpp:32:21
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
 Scale 4
IndexReg t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21
ISEL: Match complete!

ISEL: Starting selection on root node: t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

ISEL: Starting selection on root node: t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

ISEL: Starting selection on root node: t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

ISEL: Starting selection on root node: t46: i8 = TargetConstant<6>

ISEL: Starting selection on root node: t32: ch = BasicBlock<if.then.1 0x556181f19b98>

ISEL: Starting selection on root node: t29: ch = BasicBlock<for.inc.1 0x556181f19c58>

ISEL: Starting selection on root node: t22: f32 = Register %6

ISEL: Starting selection on root node: t17: i64 = Register %9

ISEL: Starting selection on root node: t12: i64 = Register %10

ISEL: Starting selection on root node: t5: i64 = Register %8

ISEL: Starting selection on root node: t1: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.10 '_Z5test2PfS_S_i:for.inc'
SelectionDAG has 27 nodes:
  t0: ch = EntryToken
  t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21
    t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21
  t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21
    t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12
  t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12
    t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11
  t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11
      t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11
    t30: ch = TokenFactor t23, t16, test2.cpp:34:11
      t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18
    t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16
  t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11
    t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11
  t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11


********** List Scheduling %bb.10 'for.inc' **********
SU(0): t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11

    t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(11): Ord  Latency=0 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(2): Data Latency=1
SU(4): t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21

  # preds left       : 2
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(6): Data Latency=1
    SU(5): Data Latency=1
  Successors:
    SU(3): Data Latency=1
    SU(8): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1
    SU(7): Data Latency=1
    SU(8): Data Latency=1
SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(4): Data Latency=1
SU(7): t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(10): Data Latency=1
    SU(5): Data Latency=1
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(2): Data Latency=1
    SU(12): Data Latency=1
SU(8): t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12

  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(9): Data Latency=1
    SU(5): Data Latency=1
    SU(4): Data Latency=1
    SU(4): Ord  Latency=1 Barrier
  Successors:
    SU(7): Ord  Latency=1 Barrier
    SU(11): Ord  Latency=1 Barrier
SU(9): t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=1
SU(10): t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(7): Data Latency=1
SU(11): t30: ch = TokenFactor t23, t16, test2.cpp:34:11

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(12): Ord  Latency=1 Barrier
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(1): Ord  Latency=0 Barrier
SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 2
  Predecessors:
    SU(7): Data Latency=1
  Successors:
    SU(11): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11


*** Scheduling [0]: SU(0): t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11


Examining Available:
Height 1: SU(1): t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11

    t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11


*** Scheduling [1]: SU(1): t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11

    t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11


Examining Available:
Height 1: SU(11): t30: ch = TokenFactor t23, t16, test2.cpp:34:11

Height 2: SU(2): t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16


*** Scheduling [2]: SU(11): t30: ch = TokenFactor t23, t16, test2.cpp:34:11


Examining Available:
Height 2: SU(2): t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16

Height 3: SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11


*** Scheduling [3]: SU(2): t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16


Examining Available:
Height 4: SU(3): t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18

Height 3: SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11


*** Scheduling [4]: SU(3): t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18


Examining Available:
Height 3: SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11


*** Scheduling [5]: SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11


Examining Available:
Height 6: SU(7): t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11


*** Scheduling [6]: SU(7): t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11


Examining Available:
Height 7: SU(10): t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

Height 7: SU(8): t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12


*** Scheduling [7]: SU(10): t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11


Examining Available:
Height 7: SU(8): t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12


*** Scheduling [8]: SU(8): t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12


Examining Available:
Height 9: SU(9): t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

Height 9: SU(4): t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21


*** Scheduling [9]: SU(9): t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12


Examining Available:
Height 9: SU(4): t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21


*** Scheduling [10]: SU(4): t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21


Examining Available:
Height 11: SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

Height 11: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21


*** Scheduling [11]: SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21


Examining Available:
Height 11: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21


*** Scheduling [12]: SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

*** Final schedule ***
SU(5): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:32:21

SU(6): t6: i64,ch = CopyFromReg t0, Register:i64 %8, test2.cpp:32:21

SU(4): t11: i32,ch = MOV32rm<Mem:(load 4 from %ir.17, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t0, test2.cpp:32:21

SU(9): t13: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:32:12

SU(8): t16: ch = MOV32mr<Mem:(store 4 into %ir.20, !tbaa !54)> t13, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t11, t11:1, test2.cpp:32:12

SU(10): t18: i64,ch = CopyFromReg t0, Register:i64 %9, test2.cpp:34:11

SU(7): t21: f32,ch = MOVSSrm_alt<Mem:(load 4 from %ir.22, !tbaa !54)> t18, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t16, test2.cpp:34:11

SU(12): t23: ch = CopyToReg t0, Register:f32 %6, t21, test2.cpp:34:11

SU(3): t24: f32 = MOVDI2SSrr t11, test2.cpp:34:18

SU(2): t45: i32 = UCOMISSrr nofpexcept t21, t24, test2.cpp:34:16

SU(11): t30: ch = TokenFactor t23, t16, test2.cpp:34:11

SU(1): t48: ch = JCC_1 BasicBlock:ch<for.inc.1 0x556181f19c58>, TargetConstant:i8<6>, t51, t51:1, test2.cpp:34:11

    t51: ch,glue = CopyToReg t30, Register:i32 $eflags, t45, test2.cpp:34:11

SU(0): t33: ch = JMP_1 BasicBlock:ch<if.then.1 0x556181f19b98>, t48, test2.cpp:34:11


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Creating constant: t3: i64 = Constant<4>
Creating new node: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
Creating new node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Creating new node: t7: i64 = add t6, t4, test2.cpp:35:14
Creating new node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
Creating new node: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
Creating constant: t11: i64 = Constant<0>
Creating new node: t12: i64 = undef
Creating new node: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
Initial selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
  t11: i64 = Constant<0>
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
        t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
          t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
        t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
      t7: i64 = add t6, t4, test2.cpp:35:14
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
  t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14



Combining: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14

Combining: t12: i64 = undef

Combining: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

Combining: t9: f32 = Register %6

Combining: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14

Combining: t7: i64 = add t6, t4, test2.cpp:35:14

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Combining: t5: i64 = Register %10

Combining: t4: i64 = mul t2, Constant:i64<4>, test2.cpp:35:14
Creating constant: t14: i64 = Constant<61>
Creating constant: t15: i64 = Constant<63>
Creating constant: t16: i64 = Constant<2>
Creating new node: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
 ... into: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Combining: t7: i64 = add t6, t17, test2.cpp:35:14

Combining: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Combining: t16: i64 = Constant<2>

Combining: t3: i64 = Constant<4>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
        t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
          t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
        t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
      t7: i64 = add t6, t17, test2.cpp:35:14
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
  t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14


Legalizing node: t16: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t16: i64 = Constant<2>

Legalizing node: t12: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = undef

Legalizing node: t9: f32 = Register %6
Ignoring node results
Legally typed node: t9: f32 = Register %6

Legalizing node: t5: i64 = Register %10
Ignoring node results
Legally typed node: t5: i64 = Register %10

Legalizing node: t3: i64 = Constant<4>
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = Constant<4>

Legalizing node: t1: i64 = Register %4
Ignoring node results
Legally typed node: t1: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Legalizing node: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal operand
Analyzing operand: t16: i64 = Constant<2>
Legal operand
Legally typed node: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14

Legalizing node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Legalizing node: t7: i64 = add t6, t17, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing operand: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal operand
Analyzing operand: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Legal operand
Legally typed node: t7: i64 = add t6, t17, test2.cpp:35:14

Legalizing node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
Analyzing result type: i64
Legal result type
Analyzing operand: t7: i64 = add t6, t17, test2.cpp:35:14
Legal operand
Analyzing operand: t3: i64 = Constant<4>
Legal operand
Legally typed node: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14

Legalizing node: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
Analyzing result type: f32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

Legalizing node: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
Legal operand
Analyzing operand: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
Legal operand
Analyzing operand: t12: i64 = undef
Legal operand
Legally typed node: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
        t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
          t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
        t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
      t7: i64 = add t6, t17, test2.cpp:35:14
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
  t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14



Legalizing: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
Legalizing store operation
Optimizing float store operations
Legal store

Legalizing: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t7: i64 = add t6, t17, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t17: i64 = shl t2, Constant:i64<2>, test2.cpp:35:14
Creating constant: t18: i8 = Constant<2>
Legal node: nothing to do

Legalizing: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal node: nothing to do

Legalizing: t12: i64 = undef
Legal node: nothing to do

Legalizing: t9: f32 = Register %6

Legalizing: t5: i64 = Register %10

Legalizing: t3: i64 = Constant<4>
Legal node: nothing to do

Legalizing: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t18: i8 = Constant<2>
Legal node: nothing to do
Legalized selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
        t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
          t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
        t17: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
      t7: i64 = add t6, t17, test2.cpp:35:14
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
  t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14



Legalizing: t18: i8 = Constant<2>
Legal node: nothing to do

Combining: t18: i8 = Constant<2>

Legalizing: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
Legalizing store operation
Optimizing float store operations
Legal store

Combining: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14

Legalizing: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
Legal node: nothing to do

Combining: t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14

Legalizing: t7: i64 = add t6, t17, test2.cpp:35:14
Legal node: nothing to do

Combining: t7: i64 = add t6, t17, test2.cpp:35:14

Legalizing: t17: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
Legal node: nothing to do

Combining: t17: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14

Legalizing: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
Legal node: nothing to do

Combining: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

Legalizing: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
Legal node: nothing to do

Combining: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

Legalizing: t12: i64 = undef
Legal node: nothing to do

Combining: t12: i64 = undef

Legalizing: t9: f32 = Register %6

Combining: t9: f32 = Register %6

Legalizing: t5: i64 = Register %10

Combining: t5: i64 = Register %10

Legalizing: t3: i64 = Constant<4>
Legal node: nothing to do

Combining: t3: i64 = Constant<4>

Legalizing: t1: i64 = Register %4

Combining: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
        t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
          t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
        t17: i64 = shl t2, Constant:i8<2>, test2.cpp:35:14
      t7: i64 = add t6, t17, test2.cpp:35:14
    t8: i64 = add t7, Constant:i64<4>, test2.cpp:35:14
  t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14


===== Instruction selection begins: %bb.11 'if.then.1'

ISEL: Starting selection on root node: t13: ch = store<(store 4 into %ir.25, !tbaa !54)> t0, t10, t8, undef:i64, test2.cpp:35:14
ISEL: Starting pattern match
  Initial Opcode index to 5
  Skipped scope entry (due to false predicate) at index 13, continuing at 80
  Skipped scope entry (due to false predicate) at index 81, continuing at 148
  Skipped scope entry (due to false predicate) at index 149, continuing at 198
  Skipped scope entry (due to false predicate) at index 199, continuing at 248
  Skipped scope entry (due to false predicate) at index 249, continuing at 316
  Skipped scope entry (due to false predicate) at index 317, continuing at 366
  Skipped scope entry (due to false predicate) at index 367, continuing at 393
  Skipped scope entry (due to false predicate) at index 394, continuing at 420
  Skipped scope entry (due to false predicate) at index 421, continuing at 470
  Skipped scope entry (due to false predicate) at index 471, continuing at 520
  Skipped scope entry (due to false predicate) at index 521, continuing at 570
  Skipped scope entry (due to false predicate) at index 571, continuing at 638
  Skipped scope entry (due to false predicate) at index 639, continuing at 706
  Skipped scope entry (due to false predicate) at index 707, continuing at 774
  Skipped scope entry (due to false predicate) at index 775, continuing at 803
  Skipped scope entry (due to false predicate) at index 804, continuing at 832
  Skipped scope entry (due to false predicate) at index 833, continuing at 861
  Skipped scope entry (due to false predicate) at index 862, continuing at 890
  Skipped scope entry (due to false predicate) at index 891, continuing at 919
  Skipped scope entry (due to false predicate) at index 920, continuing at 948
  Match failed at index 956
  Continuing at 986
  Match failed at index 987
  Continuing at 1024
  Continuing at 1025
  Match failed at index 1028
  Continuing at 11390
  Match failed at index 11394
  Continuing at 12456
  Match failed at index 12459
  Continuing at 12946
  Match failed at index 12947
  Continuing at 13044
  Match failed at index 13046
  Continuing at 13179
  Match failed at index 13182
  Continuing at 13300
  Match failed at index 13302
  Continuing at 13383
  Skipped scope entry (due to false predicate) at index 13397, continuing at 13415
  Skipped scope entry (due to false predicate) at index 13416, continuing at 13433
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
 Scale 4
IndexReg t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t19: i8 = TargetConstant<4>
Creating constant: t20: i32 = TargetConstant<4>
  Morphed node: t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14
ISEL: Match complete!

ISEL: Starting selection on root node: t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

ISEL: Starting selection on root node: t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

ISEL: Starting selection on root node: t9: f32 = Register %6

ISEL: Starting selection on root node: t5: i64 = Register %10

ISEL: Starting selection on root node: t1: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.11 '_Z5test2PfS_S_i:if.then.1'
SelectionDAG has 11 nodes:
  t0: ch = EntryToken
    t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14
    t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14
  t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14


********** List Scheduling %bb.11 'if.then.1' **********
SU(0): t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14

  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1
    SU(2): Data Latency=1
    SU(1): Data Latency=1
SU(1): t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1

Examining Available:
Height 0: SU(0): t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14


*** Scheduling [0]: SU(0): t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14


Examining Available:
Height 1: SU(1): t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

Height 1: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [1]: SU(1): t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14


Examining Available:
Height 1: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [2]: SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14


Examining Available:
Height 1: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14


*** Scheduling [3]: SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

*** Final schedule ***
SU(2): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:35:14

SU(3): t6: i64,ch = CopyFromReg t0, Register:i64 %10, test2.cpp:35:14

SU(1): t10: f32,ch = CopyFromReg t0, Register:f32 %6, test2.cpp:35:14

SU(0): t13: ch = MOVSSmr<Mem:(store 4 into %ir.25, !tbaa !54)> t6, TargetConstant:i8<4>, t2, TargetConstant:i32<4>, Register:i16 $noreg, t10, t0, test2.cpp:35:14


Total amount of phi nodes to update: 0
Creating new node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
Creating constant: t3: i64 = Constant<2>
Creating new node: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Creating new node: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Creating constant: t7: i64 = Constant<1024>
Creating new node: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Creating new node: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
Creating new node: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Initial selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
      t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
    t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
  t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Combining: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Combining: t12: ch = BasicBlock<for.body11 0x556181f198f0>

Combining: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5

Combining: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>

Combining: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23

Combining: t8: ch = seteq

Combining: t7: i64 = Constant<1024>

Combining: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

Combining: t5: i64 = Register %7

Combining: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29

Combining: t3: i64 = Constant<2>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
      t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
    t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
  t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5


Legalizing node: t12: ch = BasicBlock<for.body11 0x556181f198f0>
Analyzing result type: ch
Legal result type
Legally typed node: t12: ch = BasicBlock<for.body11 0x556181f198f0>

Legalizing node: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>
Analyzing result type: ch
Legal result type
Legally typed node: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>

Legalizing node: t8: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t8: ch = seteq

Legalizing node: t7: i64 = Constant<1024>
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = Constant<1024>

Legalizing node: t5: i64 = Register %7
Ignoring node results
Legally typed node: t5: i64 = Register %7

Legalizing node: t3: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = Constant<2>

Legalizing node: t1: i64 = Register %4
Ignoring node results
Legally typed node: t1: i64 = Register %4

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

Legalizing node: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Analyzing result type: i64
Legal result type
Analyzing operand: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
Legal operand
Analyzing operand: t3: i64 = Constant<2>
Legal operand
Legally typed node: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29

Legalizing node: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Legal operand
Legally typed node: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

Legalizing node: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Analyzing result type: i1
Promote integer result: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23

Creating new node: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Legalizing node: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Legal operand
Analyzing operand: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Promote integer operand: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5

Creating new node: t15: i8 = zero_extend t9, test2.cpp:22:23
Legalizing node: t15: i8 = zero_extend t9, test2.cpp:22:23
Analyzing result type: i8
Legal result type
Analyzing operand: t9: i1 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Promote integer operand: t15: i8 = zero_extend t9, test2.cpp:22:23

Creating constant: t16: i8 = Constant<1>
Creating new node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23
Replacing: t15: i8 = zero_extend t9, test2.cpp:22:23
     with: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23
Legalizing node: t16: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t16: i8 = Constant<1>

Legalizing node: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Analyzing result type: i8
Legal result type
Analyzing operand: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Legal operand
Analyzing operand: t7: i64 = Constant<1024>
Legal operand
Analyzing operand: t8: ch = seteq
Legal operand
Legally typed node: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23

Legalizing node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23
Analyzing result type: i8
Legal result type
Analyzing operand: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
Legal operand
Analyzing operand: t16: i8 = Constant<1>
Legal operand
Legally typed node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23

Legalizing node: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Legal operand
Analyzing operand: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23
Legal operand
Analyzing operand: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>
Legal operand
Legally typed node: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5

Legalizing node: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
Legal operand
Analyzing operand: t12: ch = BasicBlock<for.body11 0x556181f198f0>
Legal operand
Legally typed node: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 16 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
        t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
      t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23
    t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
  t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Combining: t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23

Replacing.2 t17: i8 = and t14, Constant:i8<1>, test2.cpp:22:23

With: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23


Combining: t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23

Combining: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Combining: t12: ch = BasicBlock<for.body11 0x556181f198f0>

Combining: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5

Combining: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>

Combining: t8: ch = seteq

Combining: t7: i64 = Constant<1024>

Combining: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

Combining: t5: i64 = Register %7

Combining: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29

Combining: t3: i64 = Constant<2>

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

Combining: t1: i64 = Register %4

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
      t14: i8 = setcc t4, Constant:i64<1024>, seteq:ch, test2.cpp:22:23
    t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
  t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Legalizing: t13: ch = br t11, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal node: nothing to do

Legalizing: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
Trying custom legalization
Creating new node: t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
Creating constant: t19: i8 = TargetConstant<4>
Creating new node: t20: i8 = X86ISD::SETCC TargetConstant:i8<4>, t18:1, test2.cpp:22:23
Creating new node: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
Successfully custom legalized node
 ... replacing: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, test2.cpp:22:5
     with:      t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5

Legalizing: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Legal node: nothing to do

Legalizing: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Legal node: nothing to do

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
Legal node: nothing to do

Legalizing: t12: ch = BasicBlock<for.body11 0x556181f198f0>
Legal node: nothing to do

Legalizing: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>
Legal node: nothing to do

Legalizing: t7: i64 = Constant<1024>
Legal node: nothing to do

Legalizing: t5: i64 = Register %7

Legalizing: t3: i64 = Constant<2>
Legal node: nothing to do

Legalizing: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
Legal node: nothing to do

Legalizing: t19: i8 = TargetConstant<4>

Legalizing: t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
Legal node: nothing to do
Legalized selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
      t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
    t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
  t13: ch = br t21, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5



Legalizing: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
Legal node: nothing to do

Combining: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5

Legalizing: t19: i8 = TargetConstant<4>

Combining: t19: i8 = TargetConstant<4>

Legalizing: t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
Legal node: nothing to do

Combining: t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23

Legalizing: t13: ch = br t21, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
Legal node: nothing to do

Combining: t13: ch = br t21, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5

Legalizing: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
Legal node: nothing to do

Combining: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

Legalizing: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
Legal node: nothing to do

Combining: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29

Legalizing: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
Legal node: nothing to do

Combining: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

Legalizing: t12: ch = BasicBlock<for.body11 0x556181f198f0>
Legal node: nothing to do

Combining: t12: ch = BasicBlock<for.body11 0x556181f198f0>

Legalizing: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>
Legal node: nothing to do

Combining: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>

Legalizing: t7: i64 = Constant<1024>
Legal node: nothing to do

Combining: t7: i64 = Constant<1024>

Legalizing: t5: i64 = Register %7

Combining: t5: i64 = Register %7

Legalizing: t3: i64 = Constant<2>
Legal node: nothing to do

Combining: t3: i64 = Constant<2>

Legalizing: t1: i64 = Register %4

Combining: t1: i64 = Register %4

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
      t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
      t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
    t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
  t13: ch = br t21, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5


===== Instruction selection begins: %bb.12 'for.inc.1'

ISEL: Starting selection on root node: t13: ch = br t21, BasicBlock:ch<for.body11 0x556181f198f0>, test2.cpp:22:5
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5
ISEL: Match complete!

ISEL: Starting selection on root node: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t18:1, test2.cpp:22:5
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5
  Morphed node: t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

ISEL: Starting selection on root node: t18: i64,i32 = X86ISD::SUB t4, Constant:i64<1024>, test2.cpp:22:23
ISEL: Starting pattern match
  Initial Opcode index to 83097
  Match failed at index 83104
  Continuing at 83207
  Match failed at index 83208
  Continuing at 83254
  Match failed at index 83255
  Continuing at 83318
  Continuing at 83319
  Match failed at index 83320
  Continuing at 83365
  Skipped scope entry (due to false predicate) at index 83380, continuing at 83398
  Skipped scope entry (due to false predicate) at index 83399, continuing at 83417
  Skipped scope entry (due to false predicate) at index 83418, continuing at 83436
  Match failed at index 83378
  Continuing at 83437
  Match failed at index 83441
  Continuing at 83455
  Match failed at index 83459
  Continuing at 83473
  Match failed at index 83477
  Continuing at 83491
Creating constant: t24: i64 = TargetConstant<1024>
  Morphed node: t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i64 = add nuw nsw t2, Constant:i64<2>, test2.cpp:22:29
ISEL: Starting pattern match
  Initial Opcode index to 91015
  Match failed at index 91019
  Continuing at 91122
  Match failed at index 91124
  Continuing at 91231
  TypeSwitch[i64] from 91233 to 91274
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Match failed at index 91274
  Continuing at 91289
  Match failed at index 91292
  Continuing at 91313
  Match failed at index 91315
  Continuing at 91337
  Skipped scope entry (due to false predicate) at index 91342, continuing at 91394
  Skipped scope entry (due to false predicate) at index 91395, continuing at 91456
  Skipped scope entry (due to false predicate) at index 91457, continuing at 91531
  Skipped scope entry (due to false predicate) at index 91532, continuing at 91561
  Match failed at index 91575
  Continuing at 91588
  Match failed at index 91592
  Continuing at 91605
Creating constant: t26: i64 = TargetConstant<2>
  Morphed node: t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

ISEL: Starting selection on root node: t19: i8 = TargetConstant<4>

ISEL: Starting selection on root node: t12: ch = BasicBlock<for.body11 0x556181f198f0>

ISEL: Starting selection on root node: t10: ch = BasicBlock<for.cond.cleanup10 0x556181f19830>

ISEL: Starting selection on root node: t5: i64 = Register %7

ISEL: Starting selection on root node: t1: i64 = Register %4

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.12 '_Z5test2PfS_S_i:for.inc.1'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29
  t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29
    t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29
    t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23
  t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5
  t25: i32 = Register $noreg
    t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5
  t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5


********** List Scheduling %bb.12 'for.inc.1' **********
SU(0): t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(2): Data Latency=1
    SU(5): Data Latency=1
SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(5): t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5


*** Scheduling [0]: SU(0): t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5


Examining Available:
Height 1: SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5


*** Scheduling [1]: SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5


Examining Available:
Height 2: SU(2): t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23

Height 2: SU(5): t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29


*** Scheduling [2]: SU(2): t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23


Examining Available:
Height 2: SU(5): t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29


*** Scheduling [3]: SU(5): t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29


Examining Available:
Height 4: SU(3): t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29


*** Scheduling [4]: SU(3): t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29


Examining Available:
Height 5: SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29


*** Scheduling [5]: SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

*** Final schedule ***
SU(4): t2: i64,ch = CopyFromReg t0, Register:i64 %4, test2.cpp:22:29

SU(3): t4: i64,i32 = ADD64ri8 nuw nsw t2, TargetConstant:i64<2>, test2.cpp:22:29

SU(5): t6: ch = CopyToReg t0, Register:i64 %7, t4, test2.cpp:22:29

SU(2): t18: i64,i32 = SUB64ri32 t4, TargetConstant:i64<1024>, test2.cpp:22:23

SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup10 0x556181f19830>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:22:5

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:22:5

SU(0): t13: ch = JMP_1 BasicBlock:ch<for.body11 0x556181f198f0>, t21, test2.cpp:22:5


Total amount of phi nodes to update: 1
Node 0 : (0x556181f199b0, 2147483655)
Creating new node: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
Creating constant: t3: i32 = Constant<1>
Creating new node: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Creating new node: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Creating constant: t7: i32 = Constant<20000000>
Creating new node: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Creating new node: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
Creating new node: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
Initial selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
      t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
    t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
  t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3



Combining: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3

Combining: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>

Combining: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3

Combining: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>

Combining: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21

Combining: t8: ch = seteq

Combining: t7: i32 = Constant<20000000>

Combining: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

Combining: t5: i32 = Register %3

Combining: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27

Combining: t3: i32 = Constant<1>

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

Combining: t1: i32 = Register %2

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
      t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
    t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
  t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3


Legalizing node: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>
Analyzing result type: ch
Legal result type
Legally typed node: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>

Legalizing node: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>
Analyzing result type: ch
Legal result type
Legally typed node: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>

Legalizing node: t8: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t8: ch = seteq

Legalizing node: t7: i32 = Constant<20000000>
Analyzing result type: i32
Legal result type
Legally typed node: t7: i32 = Constant<20000000>

Legalizing node: t5: i32 = Register %3
Ignoring node results
Legally typed node: t5: i32 = Register %3

Legalizing node: t3: i32 = Constant<1>
Analyzing result type: i32
Legal result type
Legally typed node: t3: i32 = Constant<1>

Legalizing node: t1: i32 = Register %2
Ignoring node results
Legally typed node: t1: i32 = Register %2

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

Legalizing node: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Analyzing result type: i32
Legal result type
Analyzing operand: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
Legal operand
Analyzing operand: t3: i32 = Constant<1>
Legal operand
Legally typed node: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27

Legalizing node: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Legal operand
Legally typed node: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

Legalizing node: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Analyzing result type: i1
Promote integer result: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21

Creating new node: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Legalizing node: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Legal operand
Analyzing operand: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Promote integer operand: t11: ch = brcond t6, t9, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3

Creating new node: t15: i8 = zero_extend t9, test2.cpp:18:21
Legalizing node: t15: i8 = zero_extend t9, test2.cpp:18:21
Analyzing result type: i8
Legal result type
Analyzing operand: t9: i1 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Promote integer operand: t15: i8 = zero_extend t9, test2.cpp:18:21

Creating constant: t16: i8 = Constant<1>
Creating new node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21
Replacing: t15: i8 = zero_extend t9, test2.cpp:18:21
     with: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21
Legalizing node: t16: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t16: i8 = Constant<1>

Legalizing node: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Analyzing result type: i8
Legal result type
Analyzing operand: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Legal operand
Analyzing operand: t7: i32 = Constant<20000000>
Legal operand
Analyzing operand: t8: ch = seteq
Legal operand
Legally typed node: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21

Legalizing node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21
Analyzing result type: i8
Legal result type
Analyzing operand: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
Legal operand
Analyzing operand: t16: i8 = Constant<1>
Legal operand
Legally typed node: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21

Legalizing node: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
Analyzing result type: ch
Legal result type
Analyzing operand: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Legal operand
Analyzing operand: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21
Legal operand
Analyzing operand: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>
Legal operand
Legally typed node: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3

Legalizing node: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
Analyzing result type: ch
Legal result type
Analyzing operand: t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
Legal operand
Analyzing operand: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>
Legal operand
Legally typed node: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3

Legalizing node: t65535: ch = handlenode t13
Analyzing result type: ch
Legal result type
Analyzing operand: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
Legal operand
Legally typed node: t65535: ch = handlenode t13

Type-legalized selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 16 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
        t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
      t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21
    t11: ch = brcond t6, t17, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
  t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3



Combining: t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21

Replacing.2 t17: i8 = and t14, Constant:i8<1>, test2.cpp:18:21

With: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21


Combining: t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21

Combining: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3

Combining: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>

Combining: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3

Combining: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>

Combining: t8: ch = seteq

Combining: t7: i32 = Constant<20000000>

Combining: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

Combining: t5: i32 = Register %3

Combining: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27

Combining: t3: i32 = Constant<1>

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

Combining: t1: i32 = Register %2

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
      t14: i8 = setcc t4, Constant:i32<20000000>, seteq:ch, test2.cpp:18:21
    t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
  t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3



Legalizing: t13: ch = br t11, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
Legal node: nothing to do

Legalizing: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
Trying custom legalization
Creating new node: t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
Creating constant: t19: i8 = TargetConstant<4>
Creating new node: t20: i8 = X86ISD::SETCC TargetConstant:i8<4>, t18:1, test2.cpp:18:21
Creating new node: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
Successfully custom legalized node
 ... replacing: t11: ch = brcond t6, t14, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, test2.cpp:18:3
     with:      t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3

Legalizing: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Legal node: nothing to do

Legalizing: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Legal node: nothing to do

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
Legal node: nothing to do

Legalizing: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>
Legal node: nothing to do

Legalizing: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>
Legal node: nothing to do

Legalizing: t7: i32 = Constant<20000000>
Legal node: nothing to do

Legalizing: t5: i32 = Register %3

Legalizing: t3: i32 = Constant<1>
Legal node: nothing to do

Legalizing: t1: i32 = Register %2

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
Legal node: nothing to do

Legalizing: t19: i8 = TargetConstant<4>

Legalizing: t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
Legal node: nothing to do
Legalized selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
      t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
    t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
  t13: ch = br t21, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3



Legalizing: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
Legal node: nothing to do

Combining: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3

Legalizing: t19: i8 = TargetConstant<4>

Combining: t19: i8 = TargetConstant<4>

Legalizing: t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
Legal node: nothing to do

Combining: t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21

Legalizing: t13: ch = br t21, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
Legal node: nothing to do

Combining: t13: ch = br t21, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3

Legalizing: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
Legal node: nothing to do

Combining: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

Legalizing: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
Legal node: nothing to do

Combining: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27

Legalizing: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
Legal node: nothing to do

Combining: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

Legalizing: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>
Legal node: nothing to do

Combining: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>

Legalizing: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>
Legal node: nothing to do

Combining: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>

Legalizing: t7: i32 = Constant<20000000>
Legal node: nothing to do

Combining: t7: i32 = Constant<20000000>

Legalizing: t5: i32 = Register %3

Combining: t5: i32 = Register %3

Legalizing: t3: i32 = Constant<1>
Legal node: nothing to do

Combining: t3: i32 = Constant<1>

Legalizing: t1: i32 = Register %2

Combining: t1: i32 = Register %2

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 14 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
      t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
      t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
    t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
  t13: ch = br t21, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3


===== Instruction selection begins: %bb.7 'for.cond.cleanup10'

ISEL: Starting selection on root node: t13: ch = br t21, BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, test2.cpp:18:3
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3
ISEL: Match complete!

ISEL: Starting selection on root node: t21: ch = X86ISD::BRCOND t6, BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t18:1, test2.cpp:18:3
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3
  Morphed node: t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

ISEL: Starting selection on root node: t18: i32,i32 = X86ISD::SUB t4, Constant:i32<20000000>, test2.cpp:18:21
ISEL: Starting pattern match
  Initial Opcode index to 83097
  Match failed at index 83104
  Continuing at 83207
  Match failed at index 83208
  Continuing at 83254
  Match failed at index 83255
  Continuing at 83318
  Continuing at 83319
  Match failed at index 83320
  Continuing at 83365
  Skipped scope entry (due to false predicate) at index 83380, continuing at 83398
  Skipped scope entry (due to false predicate) at index 83399, continuing at 83417
  Skipped scope entry (due to false predicate) at index 83418, continuing at 83436
  Match failed at index 83378
  Continuing at 83437
  Match failed at index 83441
  Continuing at 83455
  Match failed at index 83459
  Continuing at 83473
Creating constant: t24: i32 = TargetConstant<20000000>
  Morphed node: t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21
ISEL: Match complete!

ISEL: Starting selection on root node: t4: i32 = add nuw nsw t2, Constant:i32<1>, test2.cpp:18:27
ISEL: Starting pattern match
  Initial Opcode index to 91015
  Match failed at index 91019
  Continuing at 91122
  Match failed at index 91124
  Continuing at 91231
  TypeSwitch[i32] from 91233 to 91236
  Skipped scope entry (due to false predicate) at index 91238, continuing at 91254
MatchAddress: X86ISelAddressMode 0x7ffc327b37e0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b37e0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b37e0
Base_Reg t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Match failed at index 91257
  Continuing at 91271
  Continuing at 91289
  Match failed at index 91292
  Continuing at 91313
  Match failed at index 91315
  Continuing at 91337
  TypeSwitch[i32] from 91344 to 91371
  Match failed at index 91371
  Continuing at 91394
  Match failed at index 91395
  Continuing at 91456
  Match failed at index 91457
  Continuing at 91531
  Match failed at index 91532
  Continuing at 91561
  Match failed at index 91575
  Continuing at 91588
Creating constant: t26: i32 = TargetConstant<1>
  Morphed node: t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

ISEL: Starting selection on root node: t19: i8 = TargetConstant<4>

ISEL: Starting selection on root node: t12: ch = BasicBlock<for.cond8.preheader 0x556181f194c8>

ISEL: Starting selection on root node: t10: ch = BasicBlock<for.cond.cleanup 0x556181f195f0>

ISEL: Starting selection on root node: t5: i32 = Register %3

ISEL: Starting selection on root node: t1: i32 = Register %2

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.7 '_Z5test2PfS_S_i:for.cond.cleanup10'
SelectionDAG has 17 nodes:
  t0: ch = EntryToken
    t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27
  t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27
    t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27
    t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21
  t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3
  t25: i32 = Register $noreg
    t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3
  t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3


********** List Scheduling %bb.7 'for.cond.cleanup10' **********
SU(0): t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27

  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
  Successors:
    SU(2): Data Latency=1
    SU(5): Data Latency=1
SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(5): t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3


*** Scheduling [0]: SU(0): t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3


Examining Available:
Height 1: SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3


*** Scheduling [1]: SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3


Examining Available:
Height 2: SU(2): t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21

Height 2: SU(5): t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27


*** Scheduling [2]: SU(2): t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21


Examining Available:
Height 2: SU(5): t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27


*** Scheduling [3]: SU(5): t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27


Examining Available:
Height 4: SU(3): t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27


*** Scheduling [4]: SU(3): t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27


Examining Available:
Height 5: SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27


*** Scheduling [5]: SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

*** Final schedule ***
SU(4): t2: i32,ch = CopyFromReg t0, Register:i32 %2, test2.cpp:18:27

SU(3): t4: i32,i32 = ADD32ri8 nuw nsw t2, TargetConstant:i32<1>, test2.cpp:18:27

SU(5): t6: ch = CopyToReg t0, Register:i32 %3, t4, test2.cpp:18:27

SU(2): t18: i32,i32 = SUB32ri t4, TargetConstant:i32<20000000>, test2.cpp:18:21

SU(1): t21: ch = JCC_1 BasicBlock:ch<for.cond.cleanup 0x556181f195f0>, TargetConstant:i8<4>, t23, t23:1, test2.cpp:18:3

    t23: ch,glue = CopyToReg t6, Register:i32 $eflags, t18:1, test2.cpp:18:3

SU(0): t13: ch = JMP_1 BasicBlock:ch<for.cond8.preheader 0x556181f194c8>, t21, test2.cpp:18:3


Total amount of phi nodes to update: 1
Node 0 : (0x556181f19588, 2147483651)
Creating new node: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating constant: t5: i32 = Constant<1>
Creating constant: t6: i64 = TargetConstant<0>
Creating new node: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating new node: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating new node: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating new node: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating new node: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Creating constant: t18: i32 = Constant<0>
Creating new node: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Initial selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 25 nodes:
  t4: i64 = GlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
      t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Combining: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>

Combining: t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>

Combining: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t19: ch = seteq

Combining: t18: i32 = Constant<0>

Combining: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t16: i32 = Register $eax

Combining: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t13: Untyped = RegisterMask

Combining: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t8: i32 = Register $edi

Combining: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t6: i64 = TargetConstant<0>

Combining: t5: i32 = Constant<1>

Combining: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t2: i64 = TargetFrameIndex<0>

Combining: t1: i64 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
      t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Legalizing node: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>
Analyzing result type: ch
Legal result type
Legally typed node: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>

Legalizing node: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>
Analyzing result type: ch
Legal result type
Legally typed node: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>

Legalizing node: t19: ch = seteq
Analyzing result type: ch
Legal result type
Legally typed node: t19: ch = seteq

Legalizing node: t18: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t18: i32 = Constant<0>

Legalizing node: t16: i32 = Register $eax
Ignoring node results
Legally typed node: t16: i32 = Register $eax

Legalizing node: t13: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t13: Untyped = RegisterMask

Legalizing node: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t10: i64 = Register $rsi
Ignoring node results
Legally typed node: t10: i64 = Register $rsi

Legalizing node: t8: i32 = Register $edi
Ignoring node results
Legally typed node: t8: i32 = Register $edi

Legalizing node: t6: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t6: i64 = TargetConstant<0>

Legalizing node: t5: i32 = Constant<1>
Analyzing result type: i32
Legal result type
Legally typed node: t5: i32 = Constant<1>

Legalizing node: t2: i64 = TargetFrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = TargetFrameIndex<0>

Legalizing node: t1: i64 = FrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t1: i64 = FrameIndex<0>

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t2: i64 = TargetFrameIndex<0>
Legal operand
Legally typed node: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t5: i32 = Constant<1>
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t1: i64 = FrameIndex<0>
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t13: Untyped = RegisterMask
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Analyzing result type: i32
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing node: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i1
Promote integer result: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Creating new node: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legalizing node: t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Promote integer operand: t22: ch = brcond t17:1, t20, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Creating new node: t26: i8 = zero_extend t20, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legalizing node: t26: i8 = zero_extend t20, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t20: i1 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Promote integer operand: t26: i8 = zero_extend t20, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Creating constant: t27: i8 = Constant<1>
Creating new node: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Replacing: t26: i8 = zero_extend t20, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     with: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legalizing node: t27: i8 = Constant<1>
Analyzing result type: i8
Legal result type
Legally typed node: t27: i8 = Constant<1>

Legalizing node: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t18: i32 = Constant<0>
Legal operand
Analyzing operand: t19: ch = seteq
Legal operand
Legally typed node: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i8
Legal result type
Analyzing operand: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t27: i8 = Constant<1>
Legal operand
Legally typed node: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t22: ch = brcond t17:1, t28, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>
Legal operand
Legally typed node: t22: ch = brcond t17:1, t28, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t22: ch = brcond t17:1, t28, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>
Legal operand
Legally typed node: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t65535: ch = handlenode t24
Analyzing result type: ch
Legal result type
Analyzing operand: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t65535: ch = handlenode t24

Type-legalized selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 26 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
        t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
      t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t22: ch = brcond t17:1, t28, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Combining: t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Replacing.2 t28: i8 = and t25, Constant:i8<1>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

With: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Combining: t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>

Combining: t22: ch = brcond t17:1, t25, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>

Combining: t19: ch = seteq

Combining: t18: i32 = Constant<0>

Combining: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t16: i32 = Register $eax

Combining: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t13: Untyped = RegisterMask

Combining: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t8: i32 = Register $edi

Combining: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t6: i64 = TargetConstant<0>

Combining: t5: i32 = Constant<1>

Combining: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t2: i64 = TargetFrameIndex<0>

Combining: t1: i64 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized type-legalized selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
      t25: i8 = setcc t17, Constant:i32<0>, seteq:ch, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t22: ch = brcond t17:1, t25, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Legalizing: t24: ch = br t22, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t22: ch = brcond t17:1, t25, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Trying custom legalization
Creating new node: t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating constant: t30: i8 = TargetConstant<4>
Creating new node: t31: i8 = X86ISD::SETCC TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Successfully custom legalized node
 ... replacing: t22: ch = brcond t17:1, t25, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     with:      t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>
Legal node: nothing to do

Legalizing: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>
Legal node: nothing to do

Legalizing: t18: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t16: i32 = Register $eax

Legalizing: t13: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t10: i64 = Register $rsi

Legalizing: t8: i32 = Register $edi

Legalizing: t6: i64 = TargetConstant<0>

Legalizing: t5: i32 = Constant<1>
Legal node: nothing to do

Legalizing: t2: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Legalizing: t1: i64 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t30: i8 = TargetConstant<4>

Legalizing: t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do
Legalized selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
      t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t32, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Legalizing: t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t30: i8 = TargetConstant<4>

Combining: t30: i8 = TargetConstant<4>

Legalizing: t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t24: ch = br t32, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t24: ch = br t32, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Combining: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>
Legal node: nothing to do

Combining: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>

Legalizing: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>
Legal node: nothing to do

Combining: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>

Legalizing: t18: i32 = Constant<0>
Legal node: nothing to do

Combining: t18: i32 = Constant<0>

Legalizing: t16: i32 = Register $eax

Combining: t16: i32 = Register $eax

Legalizing: t13: Untyped = RegisterMask
Legal node: nothing to do

Combining: t13: Untyped = RegisterMask

Legalizing: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

Legalizing: t10: i64 = Register $rsi

Combining: t10: i64 = Register $rsi

Legalizing: t8: i32 = Register $edi

Combining: t8: i32 = Register $edi

Legalizing: t6: i64 = TargetConstant<0>

Combining: t6: i64 = TargetConstant<0>

Legalizing: t5: i32 = Constant<1>
Legal node: nothing to do

Combining: t5: i32 = Constant<1>

Legalizing: t2: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Combining: t2: i64 = TargetFrameIndex<0>

Legalizing: t1: i64 = FrameIndex<0>
Legal node: nothing to do

Combining: t1: i64 = FrameIndex<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 24 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
      t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = br t32, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


===== Instruction selection begins: %bb.4 'for.cond.cleanup'

ISEL: Starting selection on root node: t24: ch = br t32, BasicBlock:ch<cond.false.i64 0x556181f196b0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124893
  Morphed node: t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t32: ch = X86ISD::BRCOND t17:1, BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124277
Creating new node: t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  Morphed node: t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t29: i32 = X86ISD::CMP t17, Constant:i32<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 21399
  Match failed at index 21403
  Continuing at 21975
  Skipped scope entry (due to false predicate) at index 21980, continuing at 22011
  Skipped scope entry (due to false predicate) at index 22012, continuing at 22043
  Match failed at index 22047
  Continuing at 22075
  Match failed at index 22076
  Continuing at 22107
  Continuing at 22108
  Match failed at index 22110
  Continuing at 22209
  Skipped scope entry (due to false predicate) at index 22214, continuing at 22288
  Skipped scope entry (due to false predicate) at index 22289, continuing at 22363
  Match failed at index 22212
  Continuing at 22364
  Match failed at index 22367
  Continuing at 22570
  Skipped scope entry (due to false predicate) at index 22575, continuing at 22619
  Skipped scope entry (due to false predicate) at index 22620, continuing at 22686
  Morphed node: t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t17: i32,ch,glue = CopyFromReg t15, Register:i32 $eax, t15:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t15: ch,glue = callseq_end t14, TargetConstant:i64<0>, TargetConstant:i64<0>, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t14: ch,glue = X86ISD::CALL t11, TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, FrameIndex:i64<0>, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t7, Register:i32 $edi, Constant:i32<1>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t7: ch,glue = callseq_start t3, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
Creating constant: t35: i32 = TargetConstant<0>
  Morphed node: t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t30: i8 = TargetConstant<4>

ISEL: Starting selection on root node: t23: ch = BasicBlock<cond.false.i64 0x556181f196b0>

ISEL: Starting selection on root node: t21: ch = BasicBlock<_ZL7gettimev.exit70 0x556181f19770>

ISEL: Starting selection on root node: t16: i32 = Register $eax

ISEL: Starting selection on root node: t13: Untyped = RegisterMask

ISEL: Starting selection on root node: t12: i64 = TargetGlobalAddress<i32 (i32, %struct.timespec*)* @clock_gettime> 0, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t10: i64 = Register $rsi

ISEL: Starting selection on root node: t8: i32 = Register $edi

ISEL: Starting selection on root node: t6: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t5: i32 = Constant<1>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  TypeSwitch[i32] from 119208 to 119211
  Match failed at index 119211
  Continuing at 119243
  Match failed at index 119244
  Continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Match failed at index 119299
  Continuing at 119310
Creating constant: t36: i32 = TargetConstant<1>
  Morphed node: t5: i32 = MOV32ri TargetConstant:i32<1>
ISEL: Match complete!

ISEL: Starting selection on root node: t2: i64 = TargetFrameIndex<0>

ISEL: Starting selection on root node: t1: i64 = FrameIndex<0>
ISEL: Starting pattern match
  Initial Opcode index to 118312
  TypeSwitch[i64] from 118313 to 118354
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t38: i8 = TargetConstant<1>
  Morphed node: t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.4 '_Z5test2PfS_S_i:for.cond.cleanup'
SelectionDAG has 31 nodes:
        t0: ch = EntryToken
      t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t5: i32 = MOV32ri TargetConstant:i32<1>
  t9: ch,glue = CopyToReg t7:1, Register:i32 $edi, t5, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t1, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  t17: i32,ch,glue = CopyFromReg t15:1, Register:i32 $eax, t15:2, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t37: i32 = Register $noreg
    t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


********** List Scheduling %bb.4 'for.cond.cleanup' **********
SU(0): t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(3): Ord  Latency=1 Barrier
    SU(2): Data Latency=1 Reg=$eflags
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1
  Successors:
    SU(1): Data Latency=1 Reg=$eflags
SU(3): t17: i32,ch,glue = CopyFromReg t15:1, Register:i32 $eax, t15:2, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i32 $edi, t5, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t1, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(4): Data Latency=1
    SU(6): Ord  Latency=1 Barrier
    SU(5): Data Latency=1
  Successors:
    SU(1): Ord  Latency=1 Barrier
    SU(2): Data Latency=1
SU(4): t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(5): t5: i32 = MOV32ri TargetConstant:i32<1>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=1
SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(7): Ord  Latency=1 Barrier
  Successors:
    SU(3): Ord  Latency=1 Barrier
SU(7): t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(6): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [0]: SU(0): t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 1: SU(1): t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [1]: SU(1): t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 2: SU(2): t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [2]: SU(2): t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 3: SU(3): t17: i32,ch,glue = CopyFromReg t15:1, Register:i32 $eax, t15:2, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i32 $edi, t5, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t1, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


*** Scheduling [3]: SU(3): t17: i32,ch,glue = CopyFromReg t15:1, Register:i32 $eax, t15:2, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i32 $edi, t5, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t1, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


Examining Available:
Height 4: SU(4): t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

Height 4: SU(5): t5: i32 = MOV32ri TargetConstant:i32<1>

Height 4: SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


*** Scheduling [4]: SU(4): t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg


Examining Available:
Height 4: SU(5): t5: i32 = MOV32ri TargetConstant:i32<1>

Height 4: SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


*** Scheduling [5]: SU(5): t5: i32 = MOV32ri TargetConstant:i32<1>


Examining Available:
Height 4: SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


*** Scheduling [6]: SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


Examining Available:
Height 7: SU(7): t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]


*** Scheduling [7]: SU(7): t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

*** Final schedule ***
SU(7): t3: ch = lifetime.start<0 to 16> t0, TargetFrameIndex:i64<0>, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

SU(6): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t3, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

SU(5): t5: i32 = MOV32ri TargetConstant:i32<1>

SU(4): t1: i64 = LEA64r TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg

SU(3): t17: i32,ch,glue = CopyFromReg t15:1, Register:i32 $eax, t15:2, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i32 $edi, t5, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t1, t9:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t14: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<i32 (i32, %struct.timespec*)* @clock_gettime> 0, Register:i32 $edi, Register:i64 $rsi, RegisterMask:Untyped, t11, t11:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

    t15: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t14, t14:1, ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

SU(2): t29: i32 = TEST32rr t17, t17, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(1): t32: ch = JCC_1 BasicBlock:ch<_ZL7gettimev.exit70 0x556181f19770>, TargetConstant:i8<4>, t34, t34:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t34: ch,glue = CopyToReg t17:1, Register:i32 $eflags, t29, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(0): t24: ch = JMP_1 BasicBlock:ch<cond.false.i64 0x556181f196b0>, t32, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Total amount of phi nodes to update: 0
Creating constant: t4: i32 = Constant<75>
Creating constant: t6: i64 = TargetConstant<0>
Creating new node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Creating new node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Initial selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 20 nodes:
  t1: i64 = GlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Combining: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t17: Untyped = RegisterMask

Combining: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t14: i64 = Register $rcx

Combining: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t12: i32 = Register $edx

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t10: i64 = Register $rsi

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t8: i64 = Register $rdi

Combining: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t6: i64 = TargetConstant<0>

Combining: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t4: i32 = Constant<75>

Combining: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 19 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Legalizing node: t17: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t17: Untyped = RegisterMask

Legalizing node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t14: i64 = Register $rcx
Ignoring node results
Legally typed node: t14: i64 = Register $rcx

Legalizing node: t12: i32 = Register $edx
Ignoring node results
Legally typed node: t12: i32 = Register $edx

Legalizing node: t10: i64 = Register $rsi
Ignoring node results
Legally typed node: t10: i64 = Register $rsi

Legalizing node: t8: i64 = Register $rdi
Ignoring node results
Legally typed node: t8: i64 = Register $rdi

Legalizing node: t6: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t6: i64 = TargetConstant<0>

Legalizing node: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t4: i32 = Constant<75>
Analyzing result type: i32
Legal result type
Legally typed node: t4: i32 = Constant<75>

Legalizing node: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t4: i32 = Constant<75>
Legal operand
Analyzing operand: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t17: Untyped = RegisterMask
Legal operand
Analyzing operand: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing node: t65535: ch = handlenode t19
Analyzing result type: ch
Legal result type
Analyzing operand: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t65535: ch = handlenode t19

Type-legalized selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 19 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Legalizing: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, GlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, GlobalAddress:i64<[13 x i8]* @.str.5> 0, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, GlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t17: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t14: i64 = Register $rcx

Legalizing: t12: i32 = Register $edx

Legalizing: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Legalizing: t6: i64 = TargetConstant<0>

Legalizing: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Trying custom legalization
Creating new node: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Successfully custom legalized node
 ... replacing: t5: i64 = GlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     with:      t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t4: i32 = Constant<75>
Legal node: nothing to do

Legalizing: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Trying custom legalization
Creating new node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Successfully custom legalized node
 ... replacing: t3: i64 = GlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     with:      t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Trying custom legalization
Creating new node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Successfully custom legalized node
 ... replacing: t2: i64 = GlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     with:      t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do
Legalized selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 22 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]



Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Combining: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t17: Untyped = RegisterMask
Legal node: nothing to do

Combining: t17: Untyped = RegisterMask

Legalizing: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Legalizing: t14: i64 = Register $rcx

Combining: t14: i64 = Register $rcx

Legalizing: t12: i32 = Register $edx

Combining: t12: i32 = Register $edx

Legalizing: t10: i64 = Register $rsi

Combining: t10: i64 = Register $rsi

Legalizing: t8: i64 = Register $rdi

Combining: t8: i64 = Register $rdi

Legalizing: t6: i64 = TargetConstant<0>

Combining: t6: i64 = TargetConstant<0>

Legalizing: t4: i32 = Constant<75>
Legal node: nothing to do

Combining: t4: i32 = Constant<75>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 22 nodes:
      t0: ch = EntryToken
    t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


===== Instruction selection begins: %bb.5 'cond.false.i64'

ISEL: Starting selection on root node: t19: ch,glue = callseq_end t18, TargetConstant:i64<0>, TargetConstant:i64<0>, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t18: ch,glue = X86ISD::CALL t15, TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t13: ch,glue = CopyToReg t11, Register:i32 $edx, Constant:i32<75>, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t9: ch,glue = CopyToReg t7, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t21: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t7: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
Creating constant: t26: i32 = TargetConstant<0>
  Morphed node: t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t24: i64 = TargetGlobalAddress<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t22: i64 = TargetGlobalAddress<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t20: i64 = TargetGlobalAddress<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t17: Untyped = RegisterMask

ISEL: Starting selection on root node: t16: i64 = TargetGlobalAddress<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t14: i64 = Register $rcx

ISEL: Starting selection on root node: t12: i32 = Register $edx

ISEL: Starting selection on root node: t10: i64 = Register $rsi

ISEL: Starting selection on root node: t8: i64 = Register $rdi

ISEL: Starting selection on root node: t6: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t4: i32 = Constant<75>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Match failed at index 119299
  Continuing at 119310
Creating constant: t27: i32 = TargetConstant<75>
  Morphed node: t4: i32 = MOV32ri TargetConstant:i32<75>
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.5 '_Z5test2PfS_S_i:cond.false.i64'
SelectionDAG has 24 nodes:
      t0: ch = EntryToken
    t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t4: i32 = MOV32ri TargetConstant:i32<75>
  t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


********** List Scheduling %bb.5 'cond.false.i64' **********
SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(3): Data Latency=1
    SU(5): Ord  Latency=1 Barrier
    SU(4): Data Latency=1
SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [0]: SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 1: SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

Height 1: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [1]: SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>


Examining Available:
Height 1: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [2]: SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 1: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [3]: SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 1: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [4]: SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Examining Available:
Height 1: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


*** Scheduling [5]: SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

*** Final schedule ***
SU(5): t7: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(4): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<[7 x i8]* @.str.4> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(3): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<[13 x i8]* @.str.5> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(1): t21: i64 = MOV32ri64 TargetGlobalAddress:i64<[21 x i8]* @__PRETTY_FUNCTION__._ZL7gettimev> 0, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

SU(2): t4: i32 = MOV32ri TargetConstant:i32<75>

SU(0): t19: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t18, t18:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t9: ch,glue = CopyToReg t7:1, Register:i64 $rdi, t25, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t11: ch,glue = CopyToReg t9, Register:i64 $rsi, t23, t9:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t13: ch,glue = CopyToReg t11, Register:i32 $edx, t4, t11:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t15: ch,glue = CopyToReg t13, Register:i64 $rcx, t21, t13:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

    t18: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (i8*, i8*, i32, i8*)* @__assert_fail> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i32 $edx, Register:i64 $rcx, RegisterMask:Untyped, t15, t15:1, ./fasttime.h:75:3 @[ test2.cpp:60:22 ]


Total amount of phi nodes to update: 0
Creating constant: t2: i64 = Constant<0>
Creating new node: t3: i64 = undef
Creating new node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Creating constant: t5: i64 = Constant<8>
Creating new node: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Creating new node: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Creating new node: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Creating new node: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Creating new node: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Creating new node: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Creating new node: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Creating new node: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Creating new node: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Creating new node: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Creating fp constant: t19: f64 = ConstantFP<1.000000e-09>
Creating new node: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Creating new node: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Creating constant: t25: i64 = Constant<47>
Creating constant: t26: i64 = TargetConstant<0>
Creating new node: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Creating new node: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Creating new node: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating new node: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Creating constant: t58: i32 = Constant<1024>
Creating new node: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
Creating new node: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Creating new node: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Creating new node: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Creating new node: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
Creating new node: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Creating constant: t68: i64 = Constant<5>
Creating new node: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating new node: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Creating constant: t76: i32 = Constant<20000000>
Creating new node: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
Creating new node: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Creating new node: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Creating new node: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Creating new node: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
Creating new node: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Creating constant: t84: i64 = Constant<2>
Creating new node: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating new node: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Creating constant: t92: i32 = TargetConstant<0>
Creating new node: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
Initial selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 94 nodes:
  t0: ch = EntryToken
  t2: i64 = Constant<0>
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t22: i64 = GlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t40: i64 = GlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
      t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
      t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t57: i64 = GlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
      t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
  t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
  t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
    t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
  t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
  t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
    t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1



Combining: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1

Combining: t92: i32 = TargetConstant<0>

Combining: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t84: i64 = Constant<2>

Combining: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55

Combining: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55

Combining: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55

Combining: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55

Combining: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55

Combining: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55

Combining: t76: i32 = Constant<20000000>

Combining: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t68: i64 = Constant<5>

Combining: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39

Combining: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39

Combining: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39

Combining: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39

Combining: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39

Combining: t61: i32 = Register $esi

Combining: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39

Combining: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39

Combining: t58: i32 = Constant<1024>

Combining: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t43: f64 = Register $xmm0

Combining: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t38: i64 = Register $rax

Combining: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t35: Untyped = RegisterMask

Combining: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t32: i64 = Register $rdx

Combining: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t30: i64 = Register $rsi

Combining: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t28: i64 = Register $rdi

Combining: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t26: i64 = TargetConstant<0>

Combining: t25: i64 = Constant<47>

Combining: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

Combining: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

Combining: t19: f64 = ConstantFP<1.000000e-09>

Combining: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

Combining: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Combining: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Combining: t15: i64 = Register %1

Combining: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Combining: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Combining: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Combining: t11: i64 = Register %0

Combining: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Combining: t9: i64 = TargetFrameIndex<0>

Combining: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Combining: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Combining: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Combining: t5: i64 = Constant<8>

Combining: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Combining: t3: i64 = undef

Combining: t1: i64 = FrameIndex<0>

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 90 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
      t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
      t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
      t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
  t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
  t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
    t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
  t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
  t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
    t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1


Legalizing node: t92: i32 = TargetConstant<0>
Ignoring node results
Legally typed node: t92: i32 = TargetConstant<0>

Legalizing node: t84: i64 = Constant<2>
Analyzing result type: i64
Legal result type
Legally typed node: t84: i64 = Constant<2>

Legalizing node: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: i64
Legal result type
Legally typed node: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t76: i32 = Constant<20000000>
Analyzing result type: i32
Legal result type
Legally typed node: t76: i32 = Constant<20000000>

Legalizing node: t68: i64 = Constant<5>
Analyzing result type: i64
Legal result type
Legally typed node: t68: i64 = Constant<5>

Legalizing node: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: i64
Legal result type
Legally typed node: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
Analyzing result type: i64
Legal result type
Legally typed node: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39

Legalizing node: t61: i32 = Register $esi
Ignoring node results
Legally typed node: t61: i32 = Register $esi

Legalizing node: t58: i32 = Constant<1024>
Analyzing result type: i32
Legal result type
Legally typed node: t58: i32 = Constant<1024>

Legalizing node: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: i64
Legal result type
Legally typed node: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: i64
Legal result type
Legally typed node: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t43: f64 = Register $xmm0
Ignoring node results
Legally typed node: t43: f64 = Register $xmm0

Legalizing node: t38: i64 = Register $rax
Ignoring node results
Legally typed node: t38: i64 = Register $rax

Legalizing node: t35: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t35: Untyped = RegisterMask

Legalizing node: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: i64
Legal result type
Legally typed node: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t32: i64 = Register $rdx
Ignoring node results
Legally typed node: t32: i64 = Register $rdx

Legalizing node: t30: i64 = Register $rsi
Ignoring node results
Legally typed node: t30: i64 = Register $rsi

Legalizing node: t28: i64 = Register $rdi
Ignoring node results
Legally typed node: t28: i64 = Register $rdi

Legalizing node: t26: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t26: i64 = TargetConstant<0>

Legalizing node: t25: i64 = Constant<47>
Analyzing result type: i64
Legal result type
Legally typed node: t25: i64 = Constant<47>

Legalizing node: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: i64
Legal result type
Legally typed node: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: i64
Legal result type
Legally typed node: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t19: f64 = ConstantFP<1.000000e-09>
Analyzing result type: f64
Legal result type
Legally typed node: t19: f64 = ConstantFP<1.000000e-09>

Legalizing node: t15: i64 = Register %1
Ignoring node results
Legally typed node: t15: i64 = Register %1

Legalizing node: t11: i64 = Register %0
Ignoring node results
Legally typed node: t11: i64 = Register %0

Legalizing node: t9: i64 = TargetFrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t9: i64 = TargetFrameIndex<0>

Legalizing node: t5: i64 = Constant<8>
Analyzing result type: i64
Legal result type
Legally typed node: t5: i64 = Constant<8>

Legalizing node: t3: i64 = undef
Analyzing result type: i64
Legal result type
Legally typed node: t3: i64 = undef

Legalizing node: t1: i64 = FrameIndex<0>
Analyzing result type: i64
Legal result type
Legally typed node: t1: i64 = FrameIndex<0>

Legalizing node: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Analyzing operand: t1: i64 = FrameIndex<0>
Legal operand
Analyzing operand: t5: i64 = Constant<8>
Legal operand
Legally typed node: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t1: i64 = FrameIndex<0>
Legal operand
Analyzing operand: t3: i64 = undef
Legal operand
Legally typed node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing node: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Analyzing operand: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t3: i64 = undef
Legal operand
Legally typed node: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing node: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing node: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Analyzing result type: ch
Legal result type
Analyzing operand: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t9: i64 = TargetFrameIndex<0>
Legal operand
Legally typed node: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing node: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Legally typed node: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t25: i64 = Constant<47>
Legal operand
Analyzing operand: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing node: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Legally typed node: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Legalizing node: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Analyzing result type: i64
Legal result type
Analyzing operand: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal operand
Legally typed node: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Legalizing node: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Analyzing result type: f64
Legal result type
Analyzing operand: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal operand
Legally typed node: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Legalizing node: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Legalizing node: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Analyzing result type: i64
Legal result type
Analyzing operand: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal operand
Analyzing operand: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal operand
Legally typed node: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Legalizing node: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Analyzing result type: f64
Legal result type
Analyzing operand: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal operand
Legally typed node: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

Legalizing node: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Analyzing result type: f64
Legal result type
Analyzing operand: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Legal operand
Analyzing operand: t19: f64 = ConstantFP<1.000000e-09>
Legal operand
Legally typed node: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

Legalizing node: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Analyzing result type: f64
Legal result type
Analyzing operand: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Legal operand
Analyzing operand: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Legal operand
Legally typed node: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

Legalizing node: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Legal operand
Analyzing operand: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Analyzing operand: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing node: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t5: i64 = Constant<8>
Legal operand
Analyzing operand: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Analyzing operand: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing node: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal operand
Legally typed node: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39

Legalizing node: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
Legal operand
Analyzing operand: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal operand
Legally typed node: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39

Legalizing node: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Legal operand
Analyzing operand: t58: i32 = Constant<1024>
Legal operand
Analyzing operand: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Legal operand
Legally typed node: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39

Legalizing node: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Legal operand
Analyzing operand: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Legal operand
Legally typed node: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39

Legalizing node: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Legal operand
Analyzing operand: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Legal operand
Legally typed node: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39

Legalizing node: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
Legal operand
Analyzing operand: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
Legal operand
Legally typed node: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39

Legalizing node: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Legal operand
Legally typed node: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Legal operand
Legally typed node: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t68: i64 = Constant<5>
Legal operand
Analyzing operand: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Analyzing operand: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing node: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal operand
Legally typed node: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55

Legalizing node: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
Legal operand
Analyzing operand: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Legal operand
Legally typed node: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55

Legalizing node: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Legal operand
Analyzing operand: t76: i32 = Constant<20000000>
Legal operand
Analyzing operand: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Legal operand
Legally typed node: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55

Legalizing node: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Legal operand
Analyzing operand: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Legal operand
Legally typed node: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55

Legalizing node: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Legal operand
Analyzing operand: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Legal operand
Legally typed node: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55

Legalizing node: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
Legal operand
Analyzing operand: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
Legal operand
Legally typed node: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55

Legalizing node: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Legal operand
Legally typed node: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Legal operand
Legally typed node: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t84: i64 = Constant<2>
Legal operand
Analyzing operand: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal operand
Analyzing operand: t35: Untyped = RegisterMask
Legal operand
Analyzing operand: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Analyzing result type: i64
Legal result type
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Analyzing operand: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing node: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
Analyzing result type: ch
Legal result type
Analyzing operand: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal operand
Legally typed node: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1

Legalizing node: t65535: ch = handlenode t93
Analyzing result type: ch
Legal result type
Analyzing operand: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
Legal operand
Legally typed node: t65535: ch = handlenode t93

Type-legalized selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 90 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
      t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
      t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
      t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
  t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
  t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
    t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
  t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
  t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
    t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1



Legalizing: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
Legal node: nothing to do

Legalizing: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, GlobalAddress:i64<[3 x i8]* @.str.3> 0, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Legal node: nothing to do

Legalizing: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55

Legalizing: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Legal node: nothing to do

Legalizing: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Legal node: nothing to do

Legalizing: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Legal node: nothing to do

Legalizing: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55

Legalizing: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, GlobalAddress:i64<[6 x i8]* @.str.2> 0, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Legal node: nothing to do

Legalizing: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39

Legalizing: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Legal node: nothing to do

Legalizing: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Legal node: nothing to do

Legalizing: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Legal node: nothing to do

Legalizing: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39

Legalizing: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, GlobalAddress:i64<[9 x i8]* @.str.1> 0, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Legalizing: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Legalizing: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Legalizing: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Legalizing: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, GlobalAddress:i64<[48 x i8]* @.str> 0, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, GlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Trying custom legalization

Legalizing: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t20: f64 = fmul t18, ConstantFP:f64<1.000000e-09>, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Legalizing: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Trying custom legalization

Legalizing: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Trying custom legalization

Legalizing: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Legalizing: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Legalizing: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legalizing non-extending load operation

Legalizing: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Legalizing: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Legalizing: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Legalizing: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legalizing non-extending load operation

Legalizing: t92: i32 = TargetConstant<0>

Legalizing: t84: i64 = Constant<2>
Legal node: nothing to do

Legalizing: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Trying custom legalization
Creating new node: t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Successfully custom legalized node
 ... replacing: t83: i64 = GlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
     with:      t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t76: i32 = Constant<20000000>
Legal node: nothing to do

Legalizing: t68: i64 = Constant<5>
Legal node: nothing to do

Legalizing: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Trying custom legalization
Creating new node: t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Successfully custom legalized node
 ... replacing: t67: i64 = GlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
     with:      t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
Legal node: nothing to do

Legalizing: t61: i32 = Register $esi

Legalizing: t58: i32 = Constant<1024>
Legal node: nothing to do

Legalizing: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Trying custom legalization
Creating new node: t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Successfully custom legalized node
 ... replacing: t49: i64 = GlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
     with:      t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Legalizing: t43: f64 = Register $xmm0

Legalizing: t38: i64 = Register $rax

Legalizing: t35: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t32: i64 = Register $rdx

Legalizing: t30: i64 = Register $rsi

Legalizing: t28: i64 = Register $rdi

Legalizing: t26: i64 = TargetConstant<0>

Legalizing: t25: i64 = Constant<47>
Legal node: nothing to do

Legalizing: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Trying custom legalization
Creating new node: t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Successfully custom legalized node
 ... replacing: t24: i64 = GlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
     with:      t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Trying custom legalization
Creating new node: t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Successfully custom legalized node
 ... replacing: t23: i64 = GlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
     with:      t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t19: f64 = ConstantFP<1.000000e-09>
Trying to expand node
Creating new node: t105: f64,ch = load<(load 8 from constant-pool)> t0, ConstantPool:i64<double 1.000000e-09> 0, undef:i64
Successfully expanded node
 ... replacing: t19: f64 = ConstantFP<1.000000e-09>
     with:      t105: f64,ch = load<(load 8 from constant-pool)> t0, ConstantPool:i64<double 1.000000e-09> 0, undef:i64

Legalizing: t15: i64 = Register %1

Legalizing: t11: i64 = Register %0

Legalizing: t9: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Legalizing: t5: i64 = Constant<8>
Legal node: nothing to do

Legalizing: t3: i64 = undef
Legal node: nothing to do

Legalizing: t1: i64 = FrameIndex<0>
Legal node: nothing to do

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t105: f64,ch = load<(load 8 from constant-pool)> t0, ConstantPool:i64<double 1.000000e-09> 0, undef:i64
Legalizing non-extending load operation

Legalizing: t104: i64 = ConstantPool<double 1.000000e-09> 0
Trying custom legalization
Creating new node: t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0
Successfully custom legalized node
 ... replacing: t104: i64 = ConstantPool<double 1.000000e-09> 0
     with:      t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0

Legalizing: t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t102: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t100: i64 = TargetGlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Legalizing: t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t98: i64 = TargetGlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Legalizing: t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t96: i64 = TargetGlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Legalizing: t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t94: i64 = TargetGlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Legalizing: t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0
Legal node: nothing to do

Legalizing: t106: i64 = TargetConstantPool<double 1.000000e-09> 0
Legal node: nothing to do
Legalized selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 97 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
      t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
          t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0
        t105: f64,ch = load<(load 8 from constant-pool)> t0, t107, undef:i64
      t20: f64 = fmul t18, t105, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
      t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
  t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
  t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
    t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
  t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
  t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
    t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1



Legalizing: t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0
Legal node: nothing to do

Combining: t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0

Legalizing: t106: i64 = TargetConstantPool<double 1.000000e-09> 0
Legal node: nothing to do

Combining: t106: i64 = TargetConstantPool<double 1.000000e-09> 0

Legalizing: t105: f64,ch = load<(load 8 from constant-pool)> t0, t107, undef:i64
Legalizing non-extending load operation

Combining: t105: f64,ch = load<(load 8 from constant-pool)> t0, t107, undef:i64

Legalizing: t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t102: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t102: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t100: i64 = TargetGlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t100: i64 = TargetGlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t98: i64 = TargetGlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t98: i64 = TargetGlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t96: i64 = TargetGlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t96: i64 = TargetGlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t94: i64 = TargetGlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t94: i64 = TargetGlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
Legal node: nothing to do

Combining: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1

Legalizing: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Legal node: nothing to do

Combining: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Combining: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Legalizing: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
Legal node: nothing to do

Combining: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55

Legalizing: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55

Combining: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55

Legalizing: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
Legal node: nothing to do

Combining: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55

Legalizing: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
Legal node: nothing to do

Combining: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55

Legalizing: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
Legal node: nothing to do

Combining: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55

Legalizing: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55

Combining: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55

Legalizing: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Legal node: nothing to do

Combining: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Combining: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Legalizing: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
Legal node: nothing to do

Combining: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39

Legalizing: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39

Combining: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39

Legalizing: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
Legal node: nothing to do

Combining: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39

Legalizing: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
Legal node: nothing to do

Combining: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39

Legalizing: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
Legal node: nothing to do

Combining: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39

Legalizing: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39

Combining: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39

Legalizing: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Legal node: nothing to do

Combining: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Combining: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Legalizing: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Combining: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Combining: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Combining: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Combining: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Combining: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Trying custom legalization

Combining: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

Legalizing: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Combining: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t20: f64 = fmul t18, t105, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Combining: t20: f64 = fmul t18, t105, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

Legalizing: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Trying custom legalization

Combining: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

Legalizing: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Trying custom legalization

Combining: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Legalizing: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Combining: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Legalizing: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Combining: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Legalizing: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legalizing non-extending load operation

Combining: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Combining: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Legalizing: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Legal node: nothing to do

Combining: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Legalizing: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legal node: nothing to do

Combining: t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Legalizing non-extending load operation

Combining: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

Legalizing: t92: i32 = TargetConstant<0>

Combining: t92: i32 = TargetConstant<0>

Legalizing: t84: i64 = Constant<2>
Legal node: nothing to do

Combining: t84: i64 = Constant<2>

Legalizing: t76: i32 = Constant<20000000>
Legal node: nothing to do

Combining: t76: i32 = Constant<20000000>

Legalizing: t68: i64 = Constant<5>
Legal node: nothing to do

Combining: t68: i64 = Constant<5>

Legalizing: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39
Legal node: nothing to do

Combining: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39

Legalizing: t61: i32 = Register $esi

Combining: t61: i32 = Register $esi

Legalizing: t58: i32 = Constant<1024>
Legal node: nothing to do

Combining: t58: i32 = Constant<1024>

Legalizing: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Legal node: nothing to do

Combining: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Legalizing: t43: f64 = Register $xmm0

Combining: t43: f64 = Register $xmm0

Legalizing: t38: i64 = Register $rax

Combining: t38: i64 = Register $rax

Legalizing: t35: Untyped = RegisterMask
Legal node: nothing to do

Combining: t35: Untyped = RegisterMask

Legalizing: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Legal node: nothing to do

Combining: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Legalizing: t32: i64 = Register $rdx

Combining: t32: i64 = Register $rdx

Legalizing: t30: i64 = Register $rsi

Combining: t30: i64 = Register $rsi

Legalizing: t28: i64 = Register $rdi

Combining: t28: i64 = Register $rdi

Legalizing: t26: i64 = TargetConstant<0>

Combining: t26: i64 = TargetConstant<0>

Legalizing: t25: i64 = Constant<47>
Legal node: nothing to do

Combining: t25: i64 = Constant<47>

Legalizing: t15: i64 = Register %1

Combining: t15: i64 = Register %1

Legalizing: t11: i64 = Register %0

Combining: t11: i64 = Register %0

Legalizing: t9: i64 = TargetFrameIndex<0>
Legal node: nothing to do

Combining: t9: i64 = TargetFrameIndex<0>

Legalizing: t5: i64 = Constant<8>
Legal node: nothing to do

Combining: t5: i64 = Constant<8>

Legalizing: t3: i64 = undef
Legal node: nothing to do

Combining: t3: i64 = undef

Legalizing: t1: i64 = FrameIndex<0>
Legal node: nothing to do

Combining: t1: i64 = FrameIndex<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 97 nodes:
  t0: ch = EntryToken
  t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t6: i64 = add nuw FrameIndex:i64<0>, Constant:i64<8>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
      t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
          t107: i64 = X86ISD::Wrapper TargetConstantPool:i64<double 1.000000e-09> 0
        t105: f64,ch = load<(load 8 from constant-pool)> t0, t107, undef:i64
      t20: f64 = fmul t18, t105, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
      t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39
  t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
  t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39
    t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55
  t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
  t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55
    t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1


===== Instruction selection begins: %bb.6 '_ZL7gettimev.exit70'

ISEL: Starting selection on root node: t93: ch = X86ISD::RET_FLAG t91:1, TargetConstant:i32<0>, test2.cpp:65:1
ISEL: Starting pattern match
  Initial Opcode index to 124239
  Morphed node: t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1
ISEL: Match complete!

ISEL: Starting selection on root node: t91: i64,ch,glue = CopyFromReg t90, Register:i64 $rax, t90:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

ISEL: Starting selection on root node: t90: ch,glue = callseq_end t89, TargetConstant:i64<0>, TargetConstant:i64<0>, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t89: ch,glue = X86ISD::CALL t88, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t88: ch,glue = CopyToReg t87, Register:i64 $rdx, Constant:i64<2>, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

ISEL: Starting selection on root node: t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

ISEL: Starting selection on root node: t86: ch,glue = CopyToReg t85, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

ISEL: Starting selection on root node: t85: ch,glue = callseq_start t82:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t82: i64,ch,glue = CopyFromReg t81, Register:i64 $rax, t81:1, test2.cpp:64:55

ISEL: Starting selection on root node: t81: ch,glue = callseq_end t80, TargetConstant:i64<0>, TargetConstant:i64<0>, t80:1, test2.cpp:64:55
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55
ISEL: Match complete!

ISEL: Starting selection on root node: t80: ch,glue = X86ISD::CALL t79, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79:1, test2.cpp:64:55
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55
ISEL: Match complete!

ISEL: Starting selection on root node: t79: ch,glue = CopyToReg t78, Register:i32 $esi, Constant:i32<20000000>, t78:1, test2.cpp:64:55

ISEL: Starting selection on root node: t78: ch,glue = CopyToReg t77, Register:i64 $rdi, t66, test2.cpp:64:55

ISEL: Starting selection on root node: t77: ch,glue = callseq_start t75:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:55
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55
ISEL: Match complete!

ISEL: Starting selection on root node: t75: i64,ch,glue = CopyFromReg t74, Register:i64 $rax, t74:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

ISEL: Starting selection on root node: t74: ch,glue = callseq_end t73, TargetConstant:i64<0>, TargetConstant:i64<0>, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t73: ch,glue = X86ISD::CALL t72, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t72: ch,glue = CopyToReg t71, Register:i64 $rdx, Constant:i64<5>, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

ISEL: Starting selection on root node: t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

ISEL: Starting selection on root node: t70: ch,glue = CopyToReg t69, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

ISEL: Starting selection on root node: t69: ch,glue = callseq_start t66:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t66: i64,ch,glue = CopyFromReg t65, Register:i64 $rax, t65:1, test2.cpp:64:39

ISEL: Starting selection on root node: t65: ch,glue = callseq_end t64, TargetConstant:i64<0>, TargetConstant:i64<0>, t64:1, test2.cpp:64:39
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39
ISEL: Match complete!

ISEL: Starting selection on root node: t64: ch,glue = X86ISD::CALL t62, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62:1, test2.cpp:64:39
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39
ISEL: Match complete!

ISEL: Starting selection on root node: t62: ch,glue = CopyToReg t60, Register:i32 $esi, Constant:i32<1024>, t60:1, test2.cpp:64:39

ISEL: Starting selection on root node: t60: ch,glue = CopyToReg t59, Register:i64 $rdi, t48, test2.cpp:64:39

ISEL: Starting selection on root node: t59: ch,glue = callseq_start t56:1, TargetConstant:i64<0>, TargetConstant:i64<0>, test2.cpp:64:39
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39
ISEL: Match complete!

ISEL: Starting selection on root node: t56: i64,ch,glue = CopyFromReg t55, Register:i64 $rax, t55:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

ISEL: Starting selection on root node: t55: ch,glue = callseq_end t54, TargetConstant:i64<0>, TargetConstant:i64<0>, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t54: ch,glue = X86ISD::CALL t53, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t53: ch,glue = CopyToReg t52, Register:i64 $rdx, Constant:i64<8>, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

ISEL: Starting selection on root node: t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

ISEL: Starting selection on root node: t51: ch,glue = CopyToReg t50, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

ISEL: Starting selection on root node: t50: ch,glue = callseq_start t48:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t48: i64,ch,glue = CopyFromReg t47, Register:i64 $rax, t47:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

ISEL: Starting selection on root node: t47: ch,glue = callseq_end t46, TargetConstant:i64<0>, TargetConstant:i64<0>, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t46: ch,glue = X86ISD::CALL t44, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

ISEL: Starting selection on root node: t42: ch,glue = CopyToReg t41, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

ISEL: Starting selection on root node: t41: ch,glue = callseq_start t39:1, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t39: i64,ch,glue = CopyFromReg t37, Register:i64 $rax, t37:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t37: ch,glue = callseq_end t36, TargetConstant:i64<0>, TargetConstant:i64<0>, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t36: ch,glue = X86ISD::CALL t33, TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t33: ch,glue = CopyToReg t31, Register:i64 $rdx, Constant:i64<47>, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t29: ch,glue = CopyToReg t27, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t21: f64 = fadd t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 133668
  Match failed at index 133673
  Continuing at 133820
  Match failed at index 133823
  Continuing at 133972
  Match failed at index 133976
  Continuing at 134268
  Match failed at index 134271
  Continuing at 134572
  Match failed at index 134576
  Continuing at 134712
  Match failed at index 134715
  Continuing at 134852
  TypeSwitch[f64] from 134858 to 134910
  Skipped scope entry (due to false predicate) at index 134912, continuing at 134923
  Skipped scope entry (due to false predicate) at index 134924, continuing at 134934
  Morphed node: t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t27: ch,glue = callseq_start t10, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t20: f64 = fmul t18, t105, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 143521
  OpcodeSwitch from 143526 to 143531
  TypeSwitch[f64] from 143542 to 143566
  Match failed at index 143566
  Continuing at 143586
  Match failed at index 143587
  Continuing at 143660
  Continuing at 143818
  Match failed at index 143821
  Continuing at 144122
  TypeSwitch[f64] from 144138 to 144202
  Skipped scope entry (due to false predicate) at index 144204, continuing at 144222
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t109: i8 = TargetConstant<1>
  Morphed node: t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t18: f64 = sint_to_fp t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 163544
  Match failed at index 163548
  Continuing at 163862
  Skipped scope entry (due to false predicate) at index 163867, continuing at 163967
  TypeSwitch[f64] from 163970 to 164021
  Morphed node: t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t14: f64 = sint_to_fp t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 163544
  Match failed at index 163548
  Continuing at 163862
  Skipped scope entry (due to false predicate) at index 163867, continuing at 163967
  TypeSwitch[f64] from 163970 to 164021
  Morphed node: t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

ISEL: Starting selection on root node: t17: i64 = sub nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 94285
  Match failed at index 94289
  Continuing at 94392
  TypeSwitch[i64] from 94394 to 94435
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Match failed at index 94435
  Continuing at 94450
  Match failed at index 94454
  Continuing at 94585
  Match failed at index 94586
  Continuing at 94631
  Match failed at index 94641
  Continuing at 94757
  Match failed at index 94758
  Continuing at 94769
  Match failed at index 94770
  Continuing at 94781
  Match failed at index 94782
  Continuing at 94793
  Morphed node: t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t13: i64 = sub nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
ISEL: Starting pattern match
  Initial Opcode index to 94285
  Match failed at index 94289
  Continuing at 94392
  TypeSwitch[i64] from 94394 to 94435
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38b0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Match failed at index 94435
  Continuing at 94450
  Match failed at index 94454
  Continuing at 94585
  Match failed at index 94586
  Continuing at 94631
  Match failed at index 94641
  Continuing at 94757
  Match failed at index 94758
  Continuing at 94769
  Match failed at index 94770
  Continuing at 94781
  Match failed at index 94782
  Continuing at 94793
  Morphed node: t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t7: i64,ch = load<(dereferenceable load 8 from %ir.5)> t0, t6, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Base.FrameIndex 0
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
Creating constant: t114: i32 = TargetConstant<8>
  Morphed node: t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t103: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t101: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t99: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t97: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t95: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

ISEL: Starting selection on root node: t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

ISEL: Starting selection on root node: t4: i64,ch = load<(dereferenceable load 8 from %ir..fca.0.gep.i65101)> t0, FrameIndex:i64<0>, undef:i64, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
ISEL: Starting pattern match
  Initial Opcode index to 108948
  Match failed at index 108957
  Continuing at 108974
  Match failed at index 108977
  Continuing at 108994
  Match failed at index 108997
  Continuing at 109014
MatchAddress: X86ISelAddressMode 0x7ffc327b38a0
Base_Reg nul
 Scale 1
IndexReg nul
 Disp 0
GV nul CP nul
ES nul MCSym nul JT-1 Align0
  Morphed node: t4: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t102: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t100: i64 = TargetGlobalAddress<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t98: i64 = TargetGlobalAddress<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

ISEL: Starting selection on root node: t96: i64 = TargetGlobalAddress<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

ISEL: Starting selection on root node: t94: i64 = TargetGlobalAddress<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

ISEL: Starting selection on root node: t92: i32 = TargetConstant<0>

ISEL: Starting selection on root node: t84: i64 = Constant<2>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i64] from 119292 to 119324
  Match failed at index 119328
  Continuing at 119339
Creating constant: t115: i64 = TargetConstant<2>
  Morphed node: t84: i64 = MOV32ri64 TargetConstant:i64<2>
ISEL: Match complete!

ISEL: Starting selection on root node: t76: i32 = Constant<20000000>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Skipped scope entry (due to false predicate) at index 119297, continuing at 119310
Creating constant: t116: i32 = TargetConstant<20000000>
  Morphed node: t76: i32 = MOV32ri TargetConstant:i32<20000000>
ISEL: Match complete!

ISEL: Starting selection on root node: t68: i64 = Constant<5>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i64] from 119292 to 119324
  Match failed at index 119328
  Continuing at 119339
Creating constant: t117: i64 = TargetConstant<5>
  Morphed node: t68: i64 = MOV32ri64 TargetConstant:i64<5>
ISEL: Match complete!

ISEL: Starting selection on root node: t63: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, test2.cpp:64:39

ISEL: Starting selection on root node: t61: i32 = Register $esi

ISEL: Starting selection on root node: t58: i32 = Constant<1024>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i32] from 119292 to 119295
  Skipped scope entry (due to false predicate) at index 119297, continuing at 119310
Creating constant: t118: i32 = TargetConstant<1024>
  Morphed node: t58: i32 = MOV32ri TargetConstant:i32<1024>
ISEL: Match complete!

ISEL: Starting selection on root node: t45: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

ISEL: Starting selection on root node: t43: f64 = Register $xmm0

ISEL: Starting selection on root node: t38: i64 = Register $rax

ISEL: Starting selection on root node: t35: Untyped = RegisterMask

ISEL: Starting selection on root node: t34: i64 = TargetGlobalAddress<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

ISEL: Starting selection on root node: t32: i64 = Register $rdx

ISEL: Starting selection on root node: t30: i64 = Register $rsi

ISEL: Starting selection on root node: t28: i64 = Register $rdi

ISEL: Starting selection on root node: t26: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t25: i64 = Constant<47>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i64] from 119292 to 119324
  Match failed at index 119328
  Continuing at 119339
Creating constant: t119: i64 = TargetConstant<47>
  Morphed node: t25: i64 = MOV32ri64 TargetConstant:i64<47>
ISEL: Match complete!

ISEL: Starting selection on root node: t15: i64 = Register %1

ISEL: Starting selection on root node: t11: i64 = Register %0

ISEL: Starting selection on root node: t9: i64 = TargetFrameIndex<0>

ISEL: Starting selection on root node: t5: i64 = Constant<8>
ISEL: Starting pattern match
  Initial Opcode index to 119126
  Skipped scope entry (due to false predicate) at index 119128, continuing at 119205
  Skipped scope entry (due to false predicate) at index 119206, continuing at 119243
  Skipped scope entry (due to false predicate) at index 119244, continuing at 119290
  TypeSwitch[i64] from 119292 to 119324
  Match failed at index 119328
  Continuing at 119339
Creating constant: t120: i64 = TargetConstant<8>
  Morphed node: t5: i64 = MOV32ri64 TargetConstant:i64<8>
ISEL: Match complete!

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.6 '_Z5test2PfS_S_i:_ZL7gettimev.exit70'
SelectionDAG has 104 nodes:
  t0: ch = EntryToken
  t4: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
        t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
      t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t29: ch,glue = CopyToReg t27:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t25: i64 = MOV32ri64 TargetConstant:i64<47>
  t33: ch,glue = CopyToReg t31, Register:i64 $rdx, t25, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
      t39: i64,ch,glue = CopyFromReg t37:1, Register:i64 $rax, t37:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t42: ch,glue = CopyToReg t41:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
            t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
          t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
        t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
      t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
          t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
        t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
      t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
    t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  t48: i64,ch,glue = CopyFromReg t47:1, Register:i64 $rax, t47:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t51: ch,glue = CopyToReg t50:1, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t5: i64 = MOV32ri64 TargetConstant:i64<8>
  t53: ch,glue = CopyToReg t52, Register:i64 $rdx, t5, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
      t56: i64,ch,glue = CopyFromReg t55:1, Register:i64 $rax, t55:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39
  t60: ch,glue = CopyToReg t59:1, Register:i64 $rdi, t48, test2.cpp:64:39
    t58: i32 = MOV32ri TargetConstant:i32<1024>
  t62: ch,glue = CopyToReg t60, Register:i32 $esi, t58, t60:1, test2.cpp:64:39
  t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39
  t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39
  t66: i64,ch,glue = CopyFromReg t65:1, Register:i64 $rax, t65:2, test2.cpp:64:39
    t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t70: ch,glue = CopyToReg t69:1, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t68: i64 = MOV32ri64 TargetConstant:i64<5>
  t72: ch,glue = CopyToReg t71, Register:i64 $rdx, t68, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
      t75: i64,ch,glue = CopyFromReg t74:1, Register:i64 $rax, t74:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55
  t78: ch,glue = CopyToReg t77:1, Register:i64 $rdi, t66, test2.cpp:64:55
    t76: i32 = MOV32ri TargetConstant:i32<20000000>
  t79: ch,glue = CopyToReg t78, Register:i32 $esi, t76, t78:1, test2.cpp:64:55
  t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55
  t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55
  t82: i64,ch,glue = CopyFromReg t81:1, Register:i64 $rax, t81:2, test2.cpp:64:55
    t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t86: ch,glue = CopyToReg t85:1, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    t84: i64 = MOV32ri64 TargetConstant:i64<2>
  t88: ch,glue = CopyToReg t87, Register:i64 $rdx, t84, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t113: i32 = Register $noreg
    t91: i64,ch,glue = CopyFromReg t90:1, Register:i64 $rax, t90:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1


********** List Scheduling %bb.6 '_ZL7gettimev.exit70' **********
SU(0): t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1

  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 16
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Barrier
SU(1): t91: i64,ch,glue = CopyFromReg t90:1, Register:i64 $rax, t90:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t86: ch,glue = CopyToReg t85:1, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t88: ch,glue = CopyToReg t87, Register:i64 $rdx, t84, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 15
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1
    SU(3): Data Latency=1
    SU(36): Ord  Latency=1 Barrier
    SU(4): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(2): t84: i64 = MOV32ri64 TargetConstant:i64<2>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1
SU(3): t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(1): Data Latency=1
SU(4): t82: i64,ch,glue = CopyFromReg t81:1, Register:i64 $rax, t81:2, test2.cpp:64:55

    t78: ch,glue = CopyToReg t77:1, Register:i64 $rdi, t66, test2.cpp:64:55

    t79: ch,glue = CopyToReg t78, Register:i32 $esi, t76, t78:1, test2.cpp:64:55

    t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55

    t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55

  # preds left       : 3
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 13
  Height             : 3
  Predecessors:
    SU(5): Data Latency=1
    SU(31): Ord  Latency=1 Barrier
    SU(6): Data Latency=1
  Successors:
    SU(1): Data Latency=1
    SU(36): Ord  Latency=1 Barrier
SU(5): t76: i32 = MOV32ri TargetConstant:i32<20000000>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(4): Data Latency=1
SU(6): t66: i64,ch,glue = CopyFromReg t65:1, Register:i64 $rax, t65:2, test2.cpp:64:39

    t60: ch,glue = CopyToReg t59:1, Register:i64 $rdi, t48, test2.cpp:64:39

    t62: ch,glue = CopyToReg t60, Register:i32 $esi, t58, t60:1, test2.cpp:64:39

    t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39

    t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 9
  Height             : 7
  Predecessors:
    SU(7): Data Latency=1
    SU(26): Ord  Latency=1 Barrier
    SU(8): Data Latency=1
  Successors:
    SU(4): Data Latency=1
    SU(32): Data Latency=1
    SU(35): Ord  Latency=1 Barrier
SU(7): t58: i32 = MOV32ri TargetConstant:i32<1024>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 8
  Successors:
    SU(6): Data Latency=1
SU(8): t48: i64,ch,glue = CopyFromReg t47:1, Register:i64 $rax, t47:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t42: ch,glue = CopyToReg t41:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

  # preds left       : 3
  # succs left       : 3
  # rdefs left       : 1
  Latency            : 1
  Depth              : 5
  Height             : 11
  Predecessors:
    SU(9): Data Latency=1
    SU(19): Ord  Latency=1 Barrier
    SU(18): Data Latency=1
  Successors:
    SU(6): Data Latency=1
    SU(27): Data Latency=1
    SU(30): Ord  Latency=1 Barrier
SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(14): Data Latency=1
    SU(10): Data Latency=1
  Successors:
    SU(8): Data Latency=1
SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 13
  Predecessors:
    SU(11): Data Latency=1
  Successors:
    SU(9): Data Latency=1
SU(11): t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 14
  Predecessors:
    SU(13): Data Latency=1
    SU(12): Data Latency=1
  Successors:
    SU(10): Data Latency=1
SU(12): t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 15
  Successors:
    SU(11): Data Latency=1
SU(13): t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 2
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(11): Data Latency=1
    SU(16): Data Latency=1
    SU(25): Ord  Latency=1 Barrier
SU(14): t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 3
  Height             : 13
  Predecessors:
    SU(15): Data Latency=1
  Successors:
    SU(9): Data Latency=1
SU(15): t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 2
  Height             : 14
  Predecessors:
    SU(16): Data Latency=1
  Successors:
    SU(14): Data Latency=1
SU(16): t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(13): Data Latency=1
    SU(17): Data Latency=1
  Successors:
    SU(15): Data Latency=1
SU(17): t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 16
  Successors:
    SU(16): Data Latency=1
SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
    SU(8): Data Latency=1
    SU(20): Data Latency=1
SU(19): t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 12
  Predecessors:
    SU(20): Ord  Latency=1 Barrier
  Successors:
    SU(8): Ord  Latency=1 Barrier
SU(20): t39: i64,ch,glue = CopyFromReg t37:1, Register:i64 $rax, t37:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t29: ch,glue = CopyToReg t27:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t33: ch,glue = CopyToReg t31, Register:i64 $rdx, t25, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 13
  Predecessors:
    SU(21): Data Latency=1
    SU(22): Data Latency=1
    SU(23): Ord  Latency=1 Barrier
    SU(18): Data Latency=1
  Successors:
    SU(19): Ord  Latency=1 Barrier
SU(21): t25: i64 = MOV32ri64 TargetConstant:i64<47>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
    SU(20): Data Latency=1
SU(22): t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 14
  Successors:
    SU(20): Data Latency=1
SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 14
  Predecessors:
    SU(24): Ord  Latency=1 Barrier
  Successors:
    SU(20): Ord  Latency=1 Barrier
SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(25): Ord  Latency=0 Barrier
  Successors:
    SU(23): Ord  Latency=1 Barrier
SU(25): t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 15
  Predecessors:
    SU(13): Ord  Latency=1 Barrier
  Successors:
    SU(24): Ord  Latency=0 Barrier
SU(26): t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 8
  Height             : 8
  Predecessors:
    SU(27): Ord  Latency=1 Barrier
  Successors:
    SU(6): Ord  Latency=1 Barrier
SU(27): t56: i64,ch,glue = CopyFromReg t55:1, Register:i64 $rax, t55:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t51: ch,glue = CopyToReg t50:1, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t53: ch,glue = CopyToReg t52, Register:i64 $rdx, t5, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 9
  Predecessors:
    SU(28): Data Latency=1
    SU(29): Data Latency=1
    SU(30): Ord  Latency=1 Barrier
    SU(8): Data Latency=1
  Successors:
    SU(26): Ord  Latency=1 Barrier
SU(28): t5: i64 = MOV32ri64 TargetConstant:i64<8>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(27): Data Latency=1
SU(29): t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 10
  Successors:
    SU(27): Data Latency=1
SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 10
  Predecessors:
    SU(8): Ord  Latency=1 Barrier
  Successors:
    SU(27): Ord  Latency=1 Barrier
SU(31): t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 12
  Height             : 4
  Predecessors:
    SU(32): Ord  Latency=1 Barrier
  Successors:
    SU(4): Ord  Latency=1 Barrier
SU(32): t75: i64,ch,glue = CopyFromReg t74:1, Register:i64 $rax, t74:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t70: ch,glue = CopyToReg t69:1, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t72: ch,glue = CopyToReg t71, Register:i64 $rdx, t68, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

  # preds left       : 4
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 11
  Height             : 5
  Predecessors:
    SU(33): Data Latency=1
    SU(34): Data Latency=1
    SU(35): Ord  Latency=1 Barrier
    SU(6): Data Latency=1
  Successors:
    SU(31): Ord  Latency=1 Barrier
SU(33): t68: i64 = MOV32ri64 TargetConstant:i64<5>

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(32): Data Latency=1
SU(34): t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 6
  Successors:
    SU(32): Data Latency=1
SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 10
  Height             : 6
  Predecessors:
    SU(6): Ord  Latency=1 Barrier
  Successors:
    SU(32): Ord  Latency=1 Barrier
SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 14
  Height             : 2
  Predecessors:
    SU(4): Ord  Latency=1 Barrier
  Successors:
    SU(1): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1


*** Scheduling [0]: SU(0): t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1


Examining Available:
Height 1: SU(1): t91: i64,ch,glue = CopyFromReg t90:1, Register:i64 $rax, t90:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t86: ch,glue = CopyToReg t85:1, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t88: ch,glue = CopyToReg t87, Register:i64 $rdx, t84, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


*** Scheduling [1]: SU(1): t91: i64,ch,glue = CopyFromReg t90:1, Register:i64 $rax, t90:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t86: ch,glue = CopyToReg t85:1, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t88: ch,glue = CopyToReg t87, Register:i64 $rdx, t84, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


Examining Available:
Height 2: SU(2): t84: i64 = MOV32ri64 TargetConstant:i64<2>

Height 2: SU(3): t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Height 2: SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


*** Scheduling [2]: SU(2): t84: i64 = MOV32ri64 TargetConstant:i64<2>


Examining Available:
Height 2: SU(3): t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

Height 2: SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


*** Scheduling [3]: SU(3): t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


Examining Available:
Height 2: SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


*** Scheduling [4]: SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]


Examining Available:
Height 5: SU(4): t82: i64,ch,glue = CopyFromReg t81:1, Register:i64 $rax, t81:2, test2.cpp:64:55

    t78: ch,glue = CopyToReg t77:1, Register:i64 $rdi, t66, test2.cpp:64:55

    t79: ch,glue = CopyToReg t78, Register:i32 $esi, t76, t78:1, test2.cpp:64:55

    t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55

    t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55


*** Scheduling [5]: SU(4): t82: i64,ch,glue = CopyFromReg t81:1, Register:i64 $rax, t81:2, test2.cpp:64:55

    t78: ch,glue = CopyToReg t77:1, Register:i64 $rdi, t66, test2.cpp:64:55

    t79: ch,glue = CopyToReg t78, Register:i32 $esi, t76, t78:1, test2.cpp:64:55

    t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55

    t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55


Examining Available:
Height 6: SU(5): t76: i32 = MOV32ri TargetConstant:i32<20000000>

Height 6: SU(31): t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55


*** Scheduling [6]: SU(5): t76: i32 = MOV32ri TargetConstant:i32<20000000>


Examining Available:
Height 6: SU(31): t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55


*** Scheduling [7]: SU(31): t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55


Examining Available:
Height 8: SU(32): t75: i64,ch,glue = CopyFromReg t74:1, Register:i64 $rax, t74:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t70: ch,glue = CopyToReg t69:1, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t72: ch,glue = CopyToReg t71, Register:i64 $rdx, t68, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


*** Scheduling [8]: SU(32): t75: i64,ch,glue = CopyFromReg t74:1, Register:i64 $rax, t74:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t70: ch,glue = CopyToReg t69:1, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t72: ch,glue = CopyToReg t71, Register:i64 $rdx, t68, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


Examining Available:
Height 9: SU(33): t68: i64 = MOV32ri64 TargetConstant:i64<5>

Height 9: SU(34): t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Height 9: SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


*** Scheduling [9]: SU(33): t68: i64 = MOV32ri64 TargetConstant:i64<5>


Examining Available:
Height 9: SU(34): t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

Height 9: SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


*** Scheduling [10]: SU(34): t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


Examining Available:
Height 9: SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


*** Scheduling [11]: SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]


Examining Available:
Height 12: SU(6): t66: i64,ch,glue = CopyFromReg t65:1, Register:i64 $rax, t65:2, test2.cpp:64:39

    t60: ch,glue = CopyToReg t59:1, Register:i64 $rdi, t48, test2.cpp:64:39

    t62: ch,glue = CopyToReg t60, Register:i32 $esi, t58, t60:1, test2.cpp:64:39

    t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39

    t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39


*** Scheduling [12]: SU(6): t66: i64,ch,glue = CopyFromReg t65:1, Register:i64 $rax, t65:2, test2.cpp:64:39

    t60: ch,glue = CopyToReg t59:1, Register:i64 $rdi, t48, test2.cpp:64:39

    t62: ch,glue = CopyToReg t60, Register:i32 $esi, t58, t60:1, test2.cpp:64:39

    t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39

    t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39


Examining Available:
Height 13: SU(7): t58: i32 = MOV32ri TargetConstant:i32<1024>

Height 13: SU(26): t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39


*** Scheduling [13]: SU(7): t58: i32 = MOV32ri TargetConstant:i32<1024>


Examining Available:
Height 13: SU(26): t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39


*** Scheduling [14]: SU(26): t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39


Examining Available:
Height 15: SU(27): t56: i64,ch,glue = CopyFromReg t55:1, Register:i64 $rax, t55:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t51: ch,glue = CopyToReg t50:1, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t53: ch,glue = CopyToReg t52, Register:i64 $rdx, t5, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


*** Scheduling [15]: SU(27): t56: i64,ch,glue = CopyFromReg t55:1, Register:i64 $rax, t55:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t51: ch,glue = CopyToReg t50:1, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t53: ch,glue = CopyToReg t52, Register:i64 $rdx, t5, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


Examining Available:
Height 16: SU(28): t5: i64 = MOV32ri64 TargetConstant:i64<8>

Height 16: SU(29): t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Height 16: SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


*** Scheduling [16]: SU(28): t5: i64 = MOV32ri64 TargetConstant:i64<8>


Examining Available:
Height 16: SU(29): t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

Height 16: SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


*** Scheduling [17]: SU(29): t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


Examining Available:
Height 16: SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


*** Scheduling [18]: SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]


Examining Available:
Height 19: SU(8): t48: i64,ch,glue = CopyFromReg t47:1, Register:i64 $rax, t47:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t42: ch,glue = CopyToReg t41:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]


*** Scheduling [19]: SU(8): t48: i64,ch,glue = CopyFromReg t47:1, Register:i64 $rax, t47:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t42: ch,glue = CopyToReg t41:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]


Examining Available:
Height 20: SU(19): t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [20]: SU(19): t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]


Examining Available:
Height 21: SU(20): t39: i64,ch,glue = CopyFromReg t37:1, Register:i64 $rax, t37:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t29: ch,glue = CopyToReg t27:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t33: ch,glue = CopyToReg t31, Register:i64 $rdx, t25, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [21]: SU(20): t39: i64,ch,glue = CopyFromReg t37:1, Register:i64 $rax, t37:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t29: ch,glue = CopyToReg t27:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t33: ch,glue = CopyToReg t31, Register:i64 $rdx, t25, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]


Examining Available:
Height 22: SU(21): t25: i64 = MOV32ri64 TargetConstant:i64<47>

Height 22: SU(22): t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 22: SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 22: SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [22]: SU(21): t25: i64 = MOV32ri64 TargetConstant:i64<47>


Examining Available:
Height 22: SU(22): t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 22: SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 22: SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [23]: SU(22): t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]


Examining Available:
Height 22: SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 22: SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [24]: SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]


Examining Available:
Height 22: SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


*** Scheduling [25]: SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]


Examining Available:
Height 20: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [26]: SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]


Examining Available:
Height 27: SU(14): t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

Height 27: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [27]: SU(14): t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]


Examining Available:
Height 28: SU(15): t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

Height 27: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [28]: SU(15): t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]


Examining Available:
Height 29: SU(16): t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Height 27: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [29]: SU(16): t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]


Examining Available:
Height 30: SU(17): t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

Height 27: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [30]: SU(17): t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]


Examining Available:
Height 27: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [31]: SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]


Examining Available:
Height 32: SU(11): t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [32]: SU(11): t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]


Examining Available:
Height 33: SU(12): t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [33]: SU(12): t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]


Examining Available:
Height 26: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [34]: SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


Examining Available:
Height 34: SU(25): t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [35]: SU(25): t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


Examining Available:
Height 36: SU(13): t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]


*** Scheduling [36]: SU(13): t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

*** Final schedule ***
SU(13): t7: i64,ch = MOV64rm<Mem:(dereferenceable load 8 from %ir.5)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<8>, Register:i16 $noreg, t0, t4:2, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

    t4: i64,ch,glue = MOV64rm<Mem:(dereferenceable load 8 from %ir..fca.0.gep.i65101)> TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

SU(25): t8: ch = TokenFactor t4:1, t7:1, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

SU(24): t10: ch = lifetime.end<0 to 16> t8, TargetFrameIndex:i64<0>, ./fasttime.h:78:1 @[ test2.cpp:60:22 ]

SU(12): t12: i64,ch = CopyFromReg t0, Register:i64 %0, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

SU(11): t13: i64,i32 = SUB64rr nsw t4, t12, ./fasttime.h:83:21 @[ test2.cpp:62:21 ]

SU(10): t14: f64 = CVTSI642SDrr nofpexcept t13, ./fasttime.h:83:10 @[ test2.cpp:62:21 ]

SU(17): t16: i64,ch = CopyFromReg t0, Register:i64 %1, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

SU(16): t17: i64,i32 = SUB64rr nsw t7, t16, ./fasttime.h:83:56 @[ test2.cpp:62:21 ]

SU(15): t18: f64 = CVTSI642SDrr nofpexcept t17, ./fasttime.h:83:43 @[ test2.cpp:62:21 ]

SU(14): t20: f64,ch = MULSDrm nofpexcept<Mem:(load 8 from constant-pool)> t18, Register:i64 $rip, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstantPool:i32<double 1.000000e-09> 0, Register:i16 $noreg, t0, ./fasttime.h:83:42 @[ test2.cpp:62:21 ]

SU(9): t21: f64 = ADDSDrr nofpexcept t20, t14, ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

SU(23): t27: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t10, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

SU(18): t103: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::basic_ostream"* @_ZSt4cout> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

SU(22): t101: i64 = MOV32ri64 TargetGlobalAddress:i64<[48 x i8]* @.str> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

SU(21): t25: i64 = MOV32ri64 TargetConstant:i64<47>

SU(20): t39: i64,ch,glue = CopyFromReg t37:1, Register:i64 $rax, t37:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t29: ch,glue = CopyToReg t27:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t31: ch,glue = CopyToReg t29, Register:i64 $rsi, t101, t29:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t33: ch,glue = CopyToReg t31, Register:i64 $rdx, t25, t31:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t36: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t33, t33:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

    t37: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t36, t36:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

SU(19): t41: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t39:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

SU(8): t48: i64,ch,glue = CopyFromReg t47:1, Register:i64 $rax, t47:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t42: ch,glue = CopyToReg t41:1, Register:i64 $rdi, t103, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t44: ch,glue = CopyToReg t42, Register:f64 $xmm0, t21, t42:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t46: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, double)* @_ZNSo9_M_insertIdEERSoT_> 0, Register:i64 $rdi, Register:f64 $xmm0, RegisterMask:Untyped, t44, t44:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

    t47: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t46, t46:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

SU(30): t50: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t48:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

SU(29): t99: i64 = MOV32ri64 TargetGlobalAddress:i64<[9 x i8]* @.str.1> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

SU(28): t5: i64 = MOV32ri64 TargetConstant:i64<8>

SU(27): t56: i64,ch,glue = CopyFromReg t55:1, Register:i64 $rax, t55:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t51: ch,glue = CopyToReg t50:1, Register:i64 $rdi, t48, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t52: ch,glue = CopyToReg t51, Register:i64 $rsi, t99, t51:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t53: ch,glue = CopyToReg t52, Register:i64 $rdx, t5, t52:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t54: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t53, t53:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

    t55: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t54, t54:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

SU(26): t59: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t56:1, test2.cpp:64:39

SU(7): t58: i32 = MOV32ri TargetConstant:i32<1024>

SU(6): t66: i64,ch,glue = CopyFromReg t65:1, Register:i64 $rax, t65:2, test2.cpp:64:39

    t60: ch,glue = CopyToReg t59:1, Register:i64 $rdi, t48, test2.cpp:64:39

    t62: ch,glue = CopyToReg t60, Register:i32 $esi, t58, t60:1, test2.cpp:64:39

    t64: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t62, t62:1, test2.cpp:64:39

    t65: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t64, t64:1, test2.cpp:64:39

SU(35): t69: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t66:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

SU(34): t97: i64 = MOV32ri64 TargetGlobalAddress:i64<[6 x i8]* @.str.2> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

SU(33): t68: i64 = MOV32ri64 TargetConstant:i64<5>

SU(32): t75: i64,ch,glue = CopyFromReg t74:1, Register:i64 $rax, t74:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t70: ch,glue = CopyToReg t69:1, Register:i64 $rdi, t66, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t71: ch,glue = CopyToReg t70, Register:i64 $rsi, t97, t70:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t72: ch,glue = CopyToReg t71, Register:i64 $rdx, t68, t71:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t73: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t72, t72:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

    t74: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t73, t73:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

SU(31): t77: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t75:1, test2.cpp:64:55

SU(5): t76: i32 = MOV32ri TargetConstant:i32<20000000>

SU(4): t82: i64,ch,glue = CopyFromReg t81:1, Register:i64 $rax, t81:2, test2.cpp:64:55

    t78: ch,glue = CopyToReg t77:1, Register:i64 $rdi, t66, test2.cpp:64:55

    t79: ch,glue = CopyToReg t78, Register:i32 $esi, t76, t78:1, test2.cpp:64:55

    t80: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i32)* @_ZNSolsEi> 0, Register:i64 $rdi, Register:i32 $esi, RegisterMask:Untyped, t79, t79:1, test2.cpp:64:55

    t81: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t80, t80:1, test2.cpp:64:55

SU(36): t85: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t82:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

SU(3): t95: i64 = MOV32ri64 TargetGlobalAddress:i64<[3 x i8]* @.str.3> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

SU(2): t84: i64 = MOV32ri64 TargetConstant:i64<2>

SU(1): t91: i64,ch,glue = CopyFromReg t90:1, Register:i64 $rax, t90:2, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t86: ch,glue = CopyToReg t85:1, Register:i64 $rdi, t82, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t87: ch,glue = CopyToReg t86, Register:i64 $rsi, t95, t86:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t88: ch,glue = CopyToReg t87, Register:i64 $rdx, t84, t87:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t89: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<%"class.std::basic_ostream"* (%"class.std::basic_ostream"*, i8*, i64)* @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l> 0, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t88, t88:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

    t90: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t89, t89:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

SU(0): t93: ch = RET TargetConstant:i32<0>, t91:1, test2.cpp:65:1


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function _Z5test2PfS_S_i: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: size=16, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

bb.0.entry:
  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
  liveins: $rdi, $rsi, $rdx
  %10:gr64 = COPY $rdx
  %9:gr64 = COPY $rsi
  %8:gr64 = COPY $rdi
  LIFETIME_START %stack.1.retval.i, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %12:gr32 = MOV32ri 1
  %13:gr64 = LEA64r %stack.1.retval.i, 1, $noreg, 0, $noreg
  $edi = COPY %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %14:gr32 = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JCC_1 %bb.2, 4, implicit $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.1.cond.false.i:
; predecessors: %bb.0

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %18:gr32 = MOV32ri 75
  $rdi = COPY %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rsi = COPY %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $edx = COPY %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rcx = COPY %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.2._ZL7gettimev.exit:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %0:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  %1:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  LIFETIME_END %stack.1.retval.i, debug-location !18; ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  %19:gr32 = MOV32r0 implicit-def dead $eflags

bb.3.for.cond8.preheader:
; predecessors: %bb.2, %bb.7
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %2:gr32 = PHI %19:gr32, %bb.2, %3:gr32, %bb.7
  %21:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr64 = SUBREG_TO_REG 0, killed %21:gr32, %subreg.sub_32bit
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

bb.4.for.cond.cleanup:
; predecessors: %bb.7
  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

  LIFETIME_START %stack.0.retval.i61, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %28:gr32 = MOV32ri 1
  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  $edi = COPY %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %30:gr32 = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JCC_1 %bb.6, 4, implicit $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.5.cond.false.i64:
; predecessors: %bb.4

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %34:gr32 = MOV32ri 75
  $rdi = COPY %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rsi = COPY %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $edx = COPY %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rcx = COPY %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.6._ZL7gettimev.exit70:
; predecessors: %bb.4

  %35:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %36:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  LIFETIME_END %stack.0.retval.i61, debug-location !24; ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %37:gr64 = nsw SUB64rr %35:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
  %38:fr64 = nofpexcept CVTSI642SDrr killed %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
  %39:gr64 = nsw SUB64rr %36:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
  %40:fr64 = nofpexcept CVTSI642SDrr killed %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
  %41:fr64 = nofpexcept MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  %42:fr64 = nofpexcept ADDSDrr %41:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %45:gr64 = MOV32ri64 47
  $rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rsi = COPY %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rdx = COPY %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %46:gr64 = COPY $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $rdi = COPY %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  %47:gr64 = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %49:gr64 = MOV32ri64 8
  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rsi = COPY %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rdx = COPY %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %50:gr64 = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  %51:gr32 = MOV32ri 1024
  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
  $esi = COPY %51:gr32, debug-location !42; test2.cpp:64:39
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  %52:gr64 = COPY $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %54:gr64 = MOV32ri64 5
  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rsi = COPY %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rdx = COPY %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %55:gr64 = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  %56:gr32 = MOV32ri 20000000
  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
  $esi = COPY %56:gr32, debug-location !45; test2.cpp:64:55
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  %57:gr64 = COPY $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %59:gr64 = MOV32ri64 2
  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rsi = COPY %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rdx = COPY %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %60:gr64 = COPY $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  RET 0, debug-location !48; test2.cpp:65:1

bb.7.for.cond.cleanup10:
; predecessors: %bb.12
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

  %3:gr32 = nuw nsw ADD32ri8 %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
  %27:gr32 = SUB32ri %3:gr32(tied-def 0), 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
  JCC_1 %bb.4, 4, implicit $eflags, debug-location !19; test2.cpp:18:3
  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

bb.8.for.body11:
; predecessors: %bb.3, %bb.12
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %4:gr64_nosp = PHI %20:gr64, %bb.3, %7:gr64, %bb.12
  %22:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %5:fr32, killed %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.10, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

bb.9.if.then:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

bb.10.for.inc:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

  %24:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %6:fr32, killed %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.12, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

bb.11.if.then.1:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

bb.12.for.inc.1:
; predecessors: %bb.10, %bb.11
  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

  %7:gr64 = nuw nsw ADD64ri8 %4:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
  %26:gr64 = SUB64ri32 %7:gr64(tied-def 0), 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
  JCC_1 %bb.7, 4, implicit $eflags, debug-location !20; test2.cpp:22:5
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
***** Machine Function before Domain Reassignment *****
# Machine code for function _Z5test2PfS_S_i: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: size=16, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

bb.0.entry:
  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
  liveins: $rdi, $rsi, $rdx
  %10:gr64 = COPY $rdx
  %9:gr64 = COPY $rsi
  %8:gr64 = COPY $rdi
  LIFETIME_START %stack.1.retval.i, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %12:gr32 = MOV32ri 1
  %13:gr64 = LEA64r %stack.1.retval.i, 1, $noreg, 0, $noreg
  $edi = COPY %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %14:gr32 = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JCC_1 %bb.2, 4, implicit $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.1.cond.false.i:
; predecessors: %bb.0

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  %18:gr32 = MOV32ri 75
  $rdi = COPY %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rsi = COPY %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $edx = COPY %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rcx = COPY %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.2._ZL7gettimev.exit:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %0:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  %1:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  LIFETIME_END %stack.1.retval.i, debug-location !18; ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  %19:gr32 = MOV32r0 implicit-def dead $eflags

bb.3.for.cond8.preheader:
; predecessors: %bb.2, %bb.7
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  %2:gr32 = PHI %19:gr32, %bb.2, %3:gr32, %bb.7
  %21:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr64 = SUBREG_TO_REG 0, killed %21:gr32, %subreg.sub_32bit
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

bb.4.for.cond.cleanup:
; predecessors: %bb.7
  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

  LIFETIME_START %stack.0.retval.i61, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %28:gr32 = MOV32ri 1
  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  $edi = COPY %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %30:gr32 = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JCC_1 %bb.6, 4, implicit $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.5.cond.false.i64:
; predecessors: %bb.4

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  %34:gr32 = MOV32ri 75
  $rdi = COPY %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rsi = COPY %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $edx = COPY %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rcx = COPY %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.6._ZL7gettimev.exit70:
; predecessors: %bb.4

  %35:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %36:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  LIFETIME_END %stack.0.retval.i61, debug-location !24; ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %37:gr64 = nsw SUB64rr %35:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
  %38:fr64 = nofpexcept CVTSI642SDrr killed %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
  %39:gr64 = nsw SUB64rr %36:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
  %40:fr64 = nofpexcept CVTSI642SDrr killed %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
  %41:fr64 = nofpexcept MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  %42:fr64 = nofpexcept ADDSDrr %41:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %45:gr64 = MOV32ri64 47
  $rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rsi = COPY %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rdx = COPY %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  %46:gr64 = COPY $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $rdi = COPY %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  %47:gr64 = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %49:gr64 = MOV32ri64 8
  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rsi = COPY %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rdx = COPY %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  %50:gr64 = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  %51:gr32 = MOV32ri 1024
  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
  $esi = COPY %51:gr32, debug-location !42; test2.cpp:64:39
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  %52:gr64 = COPY $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %54:gr64 = MOV32ri64 5
  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rsi = COPY %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rdx = COPY %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  %55:gr64 = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  %56:gr32 = MOV32ri 20000000
  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
  $esi = COPY %56:gr32, debug-location !45; test2.cpp:64:55
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  %57:gr64 = COPY $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %59:gr64 = MOV32ri64 2
  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rsi = COPY %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rdx = COPY %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  %60:gr64 = COPY $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  RET 0, debug-location !48; test2.cpp:65:1

bb.7.for.cond.cleanup10:
; predecessors: %bb.12
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

  %3:gr32 = nuw nsw ADD32ri8 %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
  %27:gr32 = SUB32ri %3:gr32(tied-def 0), 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
  JCC_1 %bb.4, 4, implicit $eflags, debug-location !19; test2.cpp:18:3
  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

bb.8.for.body11:
; predecessors: %bb.3, %bb.12
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %4:gr64_nosp = PHI %20:gr64, %bb.3, %7:gr64, %bb.12
  %22:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %5:fr32, killed %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.10, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

bb.9.if.then:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

bb.10.for.inc:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

  %24:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %6:fr32, killed %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.12, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

bb.11.if.then.1:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

bb.12.for.inc.1:
; predecessors: %bb.10, %bb.11
  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

  %7:gr64 = nuw nsw ADD64ri8 %4:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
  %26:gr64 = SUB64ri32 %7:gr64(tied-def 0), 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
  JCC_1 %bb.7, 4, implicit $eflags, debug-location !20; test2.cpp:22:5
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

# Machine code for function _Z5test2PfS_S_i: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: size=16, align=8, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  LIFETIME_START %stack.1.retval.i, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
80B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
96B	  %12:gr32 = MOV32ri 1
112B	  %13:gr64 = LEA64r %stack.1.retval.i, 1, $noreg, 0, $noreg
128B	  $edi = COPY %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  %14:gr32 = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
208B	  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JCC_1 %bb.2, 4, implicit $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
240B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

256B	bb.1.cond.false.i:
	; predecessors: %bb.0

272B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
288B	  %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
304B	  %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
320B	  %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
336B	  %18:gr32 = MOV32ri 75
352B	  $rdi = COPY %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
368B	  $rsi = COPY %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $edx = COPY %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  $rcx = COPY %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

448B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

464B	  %0:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  %1:gr64 = MOV64rm %stack.1.retval.i, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
496B	  LIFETIME_END %stack.1.retval.i, debug-location !18; ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
512B	  %19:gr32 = MOV32r0 implicit-def dead $eflags

528B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

544B	  %2:gr32 = PHI %19:gr32, %bb.2, %3:gr32, %bb.7
560B	  %21:gr32 = MOV32r0 implicit-def dead $eflags
576B	  %20:gr64 = SUBREG_TO_REG 0, killed %21:gr32, %subreg.sub_32bit
592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

608B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

624B	  LIFETIME_START %stack.0.retval.i61, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
656B	  %28:gr32 = MOV32ri 1
672B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
688B	  $edi = COPY %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
752B	  %30:gr32 = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
768B	  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
784B	  JCC_1 %bb.6, 4, implicit $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
800B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

816B	bb.5.cond.false.i64:
	; predecessors: %bb.4

832B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
848B	  %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
864B	  %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
880B	  %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  %34:gr32 = MOV32ri 75
912B	  $rdi = COPY %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rsi = COPY %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  $edx = COPY %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  $rcx = COPY %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
976B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
992B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

1008B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

1024B	  %35:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1040B	  %36:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1056B	  LIFETIME_END %stack.0.retval.i61, debug-location !24; ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1072B	  %37:gr64 = nsw SUB64rr %35:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr killed %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %39:gr64 = nsw SUB64rr %36:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1120B	  %40:fr64 = nofpexcept CVTSI642SDrr killed %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1136B	  %41:fr64 = nofpexcept MULSDrm %40:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1152B	  %42:fr64 = nofpexcept ADDSDrr %41:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1168B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1184B	  %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1200B	  %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1216B	  %45:gr64 = MOV32ri64 47
1232B	  $rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1248B	  $rsi = COPY %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rdx = COPY %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  %46:gr64 = COPY $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = COPY %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1440B	  %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1456B	  %49:gr64 = MOV32ri64 8
1472B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = COPY %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = COPY %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  %50:gr64 = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1568B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1584B	  %51:gr32 = MOV32ri 1024
1600B	  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
1616B	  $esi = COPY %51:gr32, debug-location !42; test2.cpp:64:39
1632B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1648B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1664B	  %52:gr64 = COPY $rax, debug-location !42; test2.cpp:64:39
1680B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1696B	  %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1712B	  %54:gr64 = MOV32ri64 5
1728B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rsi = COPY %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  $rdx = COPY %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1808B	  %55:gr64 = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1824B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1840B	  %56:gr32 = MOV32ri 20000000
1856B	  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
1872B	  $esi = COPY %56:gr32, debug-location !45; test2.cpp:64:55
1888B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1920B	  %57:gr64 = COPY $rax, debug-location !45; test2.cpp:64:55
1936B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1952B	  %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  %59:gr64 = MOV32ri64 2
1984B	  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  $rsi = COPY %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  $rdx = COPY %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2048B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2064B	  %60:gr64 = COPY $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2080B	  RET 0, debug-location !48; test2.cpp:65:1

2096B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2112B	  %3:gr32 = nuw nsw ADD32ri8 %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2128B	  %27:gr32 = SUB32ri %3:gr32(tied-def 0), 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2144B	  JCC_1 %bb.4, 4, implicit $eflags, debug-location !19; test2.cpp:18:3
2160B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2176B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2192B	  %4:gr64_nosp = PHI %20:gr64, %bb.3, %7:gr64, %bb.12
2208B	  %22:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2224B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2240B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2256B	  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
2272B	  nofpexcept UCOMISSrr %5:fr32, killed %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2288B	  JCC_1 %bb.10, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
2304B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2320B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2336B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2352B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2368B	  %24:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2384B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2400B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2416B	  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
2432B	  nofpexcept UCOMISSrr %6:fr32, killed %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2448B	  JCC_1 %bb.12, 6, implicit $eflags, debug-location !59; test2.cpp:34:11
2464B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2480B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2496B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2512B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2528B	  %7:gr64 = nuw nsw ADD64ri8 %4:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  %26:gr64 = SUB64ri32 %7:gr64(tied-def 0), 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2560B	  JCC_1 %bb.7, 4, implicit $eflags, debug-location !20; test2.cpp:22:5
2576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

********** Stack Coloring **********
********** Function: _Z5test2PfS_S_i
Found a lifetime start marker for slot #1 with allocation: retval.i
Found a lifetime end marker for slot #1 with allocation: retval.i
Found a lifetime start marker for slot #0 with allocation: retval.i61
Found a lifetime end marker for slot #0 with allocation: retval.i61
Conservative slots : { 0 0 }
Found a use of slot #1 at %bb.0 index 112B with allocation: retval.i
Found a use of slot #1 at %bb.2 index 464B with allocation: retval.i
Found a use of slot #1 at %bb.2 index 480B with allocation: retval.i
Found a use of slot #0 at %bb.4 index 672B with allocation: retval.i61
Found a use of slot #0 at %bb.6 index 1024B with allocation: retval.i61
Found a use of slot #0 at %bb.6 index 1040B with allocation: retval.i61
Found 4 markers and 2 slots
Slot structure:
Slot #0 - 16 bytes.
Slot #1 - 16 bytes.
Total Stack size: 32 bytes

Dataflow iterations: 2
Inspecting block #0 [entry]
BEGIN : { 0 1 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { 0 1 }
Inspecting block #2 [_ZL7gettimev.exit]
BEGIN : { 0 0 }
END : { 0 1 }
LIVE_IN : { 0 1 }
LIVE_OUT : { }
Inspecting block #3 [for.cond8.preheader]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #8 [for.body11]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #9 [if.then]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #10 [for.inc]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #11 [if.then.1]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #12 [for.inc.1]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #7 [for.cond.cleanup10]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { }
Inspecting block #4 [for.cond.cleanup]
BEGIN : { 1 0 }
END : { 0 0 }
LIVE_IN : { }
LIVE_OUT : { 1 0 }
Inspecting block #6 [_ZL7gettimev.exit70]
BEGIN : { 0 0 }
END : { 1 0 }
LIVE_IN : { 1 0 }
LIVE_OUT : { }
Inspecting block #5 [cond.false.i64]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { 1 0 }
LIVE_OUT : { 1 0 }
Inspecting block #1 [cond.false.i]
BEGIN : { 0 0 }
END : { 0 0 }
LIVE_IN : { 0 1 }
LIVE_OUT : { 0 1 }
Interval[0]:
$noreg [672B,1056B:0)  0@0B-phi weight:0.000000e+00
Interval[1]:
$physreg1 [112B,496B:0)  0@0B-phi weight:0.000000e+00
Merging #0 and slots #1 together.
Merge 1 slots. Saved 16 bytes
Fixed 0 machine memory operands.
Fixed 0 debug locations.
Fixed 3 machine instructions.
Removed 4 markers.
DeadMachineInstructionElim: DELETING: %60:gr64 = COPY $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
DeadMachineInstructionElim: DELETING: %55:gr64 = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
DeadMachineInstructionElim: DELETING: %50:gr64 = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
DeadMachineInstructionElim: DELETING: %46:gr64 = COPY $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
********** EARLY IF-CONVERSION **********
********** Function: _Z5test2PfS_S_i
Machine InstCombiner: _Z5test2PfS_S_i
Combining MBB entry
Combining MBB cond.false.i
Combining MBB _ZL7gettimev.exit
Combining MBB for.cond8.preheader
Combining MBB for.cond.cleanup
Combining MBB cond.false.i64
Combining MBB _ZL7gettimev.exit70
Combining MBB for.cond.cleanup10
Combining MBB for.body11
Combining MBB if.then
Combining MBB for.inc
Combining MBB if.then.1
Combining MBB for.inc.1
********** X86 cmov Conversion : _Z5test2PfS_S_i**********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
******** Pre-regalloc Machine LICM: _Z5test2PfS_S_i ********
Entering %bb.3
Hoisting %21:gr32 = MOV32r0 implicit-def dead $eflags
 from %bb.3 to %bb.2
CSEing %21:gr32 = MOV32r0 implicit-def dead $eflags
 with %19:gr32 = MOV32r0 implicit-def dead $eflags
Won't hoist cheap instr with loop PHI use: %20:gr64 = SUBREG_TO_REG 0, %19:gr32, %subreg.sub_32bit
Entering %bb.8
Entering %bb.9
Exiting %bb.9
Entering %bb.10
Entering %bb.11
Exiting %bb.11
Entering %bb.12
Entering %bb.7
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: BB0[entry]
 - 1: BB1[cond.false.i]
 - 2: BB2[_ZL7gettimev.exit]
 - 3: BB3[for.cond8.preheader]
 - 4: BB8[for.body11]
 - 5: BB9[if.then]
 - 6: BB10[for.inc]
 - 7: BB11[if.then.1]
 - 8: BB12[for.inc.1]
 - 9: BB7[for.cond.cleanup10]
 - 10: BB4[for.cond.cleanup]
 - 11: BB5[cond.false.i64]
 - 12: BB6[_ZL7gettimev.exit70]
loop-detection
 - loop = BB3[for.cond8.preheader]
 - loop = BB8[for.body11]
 - loop = BB8[for.body11]: member = BB9[if.then]
 - loop = BB8[for.body11]: member = BB10[for.inc]
 - loop = BB8[for.body11]: member = BB11[if.then.1]
 - loop = BB8[for.body11]: member = BB12[for.inc.1]
 - loop = BB3[for.cond8.preheader]: member = BB7[for.cond.cleanup10]
compute-mass-in-loop: BB8[for.body11]*
 - node: BB8[for.body11]
  => [ local  ] weight = 1073741824, succ = BB9[if.then]
  => [ local  ] weight = 1073741824, succ = BB10[for.inc]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB9[if.then]
  => assign 8000000000000000 (0000000000000000) to BB10[for.inc]
 - node: BB9[if.then]
  => [ local  ] weight = 2147483648, succ = BB10[for.inc]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB10[for.inc]
 - node: BB10[for.inc]
  => [ local  ] weight = 1073741824, succ = BB11[if.then.1]
  => [ local  ] weight = 1073741824, succ = BB12[for.inc.1]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB11[if.then.1]
  => assign 8000000000000000 (0000000000000000) to BB12[for.inc.1]
 - node: BB11[if.then.1]
  => [ local  ] weight = 2147483648, succ = BB12[for.inc.1]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB12[for.inc.1]
 - node: BB12[for.inc.1]
  => [  exit  ] weight = 67108864, succ = BB7[for.cond.cleanup10]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB8[for.body11]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.cond.cleanup10]
compute-loop-scale: BB8[for.body11]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB8[for.body11]*
 - node: BB8[for.body11]
 - node: BB9[if.then]
 - node: BB10[for.inc]
 - node: BB11[if.then.1]
 - node: BB12[for.inc.1]
compute-mass-in-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 2147483648, succ = BB8[for.body11]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.body11]
 - node: BB8[for.body11]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.cond.cleanup10]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.cond.cleanup10]
 - node: BB7[for.cond.cleanup10]
  => [  exit  ] weight = 67108864, succ = BB4[for.cond.cleanup]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.cond8.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.cond.cleanup]
compute-loop-scale: BB3[for.cond8.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
 - node: BB8[for.body11]
 - node: BB7[for.cond.cleanup10]
compute-mass-in-function
 - node: BB0[entry]
  => [ local  ] weight = 2147483647, succ = BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 1, succ = BB1[cond.false.i]
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to BB1[cond.false.i]
  => assign fffffffe00000000 (0000000000000000) to BB2[_ZL7gettimev.exit]
 - node: BB1[cond.false.i]
  => mass:  00000001ffffffff
 - node: BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 2147483648, succ = BB3[for.cond8.preheader]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB3[for.cond8.preheader]
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.cond.cleanup]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB4[for.cond.cleanup]
 - node: BB4[for.cond.cleanup]
  => [ local  ] weight = 2147483647, succ = BB6[_ZL7gettimev.exit70]
  => [ local  ] weight = 1, succ = BB5[cond.false.i64]
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to BB5[cond.false.i64]
  => assign fffffffc00000004 (0000000000000000) to BB6[_ZL7gettimev.exit70]
 - node: BB5[cond.false.i64]
  => mass:  00000001fffffffc
 - node: BB6[_ZL7gettimev.exit70]
  => mass:  fffffffc00000004
unwrap-loop-package: BB3[for.cond8.preheader]*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - BB3[for.cond8.preheader]: 1.0 => 31.99999999
 - BB8[for.body11]: 32.0 => 1024.0
 - BB7[for.cond.cleanup10]: 1.0 => 31.99999999
unwrap-loop-package: BB8[for.body11]*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - BB8[for.body11]: 1.0 => 1024.0
 - BB9[if.then]: 0.5 => 511.9999998
 - BB10[for.inc]: 1.0 => 1024.0
 - BB11[if.then.1]: 0.5 => 511.9999998
 - BB12[for.inc.1]: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - BB0[entry]: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - BB2[_ZL7gettimev.exit]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB9[if.then]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB11[if.then.1]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB7[for.cond.cleanup10]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - BB0[entry]: float = 1.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.00000000046566, int = 8
 - BB2[_ZL7gettimev.exit]: float = 1.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 32.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 1.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.00000000046566, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 1.0, int = 17179869174
 - BB7[for.cond.cleanup10]: float = 32.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, int = 17592186042367
 - BB9[if.then]: float = 512.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, int = 17592186042367
 - BB11[if.then.1]: float = 512.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, int = 17592186042367

Entering: entry
Entering: cond.false.i
Exiting: cond.false.i
Entering: _ZL7gettimev.exit
Entering: for.cond8.preheader
Entering: for.body11
Entering: for.inc
Entering: for.inc.1
Entering: for.cond.cleanup10
Entering: for.cond.cleanup
Examining: %28:gr32 = MOV32ri 1
*** Found a common subexpression: %12:gr32 = MOV32ri 1
*** Not profitable, avoid CSE!
Examining: %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
*** Found a common subexpression: %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
*** Not profitable, avoid CSE!
Entering: cond.false.i64
Exiting: cond.false.i64
Entering: _ZL7gettimev.exit70
Exiting: _ZL7gettimev.exit70
Exiting: for.cond.cleanup
Exiting: for.cond.cleanup10
Exiting: for.inc.1
Entering: if.then.1
Exiting: if.then.1
Exiting: for.inc
Entering: if.then
Exiting: if.then
Exiting: for.body11
Exiting: for.cond8.preheader
Exiting: _ZL7gettimev.exit
Exiting: entry
		Looking for trivial roots
Found a new trivial root: %bb.1
Last visited node: %bb.0
Found a new trivial root: %bb.5
Last visited node: %bb.2
Found a new trivial root: %bb.6
Last visited node: %bb.6
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.1
3: %bb.0
4: %bb.5
5: %bb.4
6: %bb.7
7: %bb.12
8: %bb.11
9: %bb.10
10: %bb.9
11: %bb.8
12: %bb.3
13: %bb.2
14: %bb.6
Found roots: %bb.1 %bb.5 %bb.6 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.6
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: _Z5test2PfS_S_i
Encountered load fold barrier on CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Encountered load fold barrier on CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Optimize recurrence chain from %2:gr32 = PHI %19:gr32, %bb.2, %3:gr32, %bb.7
	Inst: %3:gr32 = nuw nsw ADD32ri8 %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
Encountered load fold barrier on CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Encountered load fold barrier on CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Encountered load fold barrier on CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Encountered load fold barrier on CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Encountered load fold barrier on CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Encountered load fold barrier on CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
Encountered load fold barrier on CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Encountered load fold barrier on CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
Encountered load fold barrier on CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Encountered load fold barrier on MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
Encountered load fold barrier on MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14
Encountered load fold barrier on MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
Encountered load fold barrier on MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14
**** Analysing _Z5test2PfS_S_i
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : _Z5test2PfS_S_i **********
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
********** X86 EFLAGS copy lowering : _Z5test2PfS_S_i **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: _Z5test2PfS_S_i
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
********** REWRITING TWO-ADDR INSTRS **********
********** Function: _Z5test2PfS_S_i
	%37:gr64 = nsw SUB64rr killed %35:gr64(tied-def 0), killed %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
		prepend:	%37:gr64 = COPY %35:gr64, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
		rewrite to:	%37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), killed %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
	%39:gr64 = nsw SUB64rr killed %36:gr64(tied-def 0), killed %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
		prepend:	%39:gr64 = COPY %36:gr64, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
		rewrite to:	%39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), killed %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
	%41:fr64 = nofpexcept MULSDrm killed %40:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
		prepend:	%41:fr64 = COPY %40:fr64, debug-location !31; ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
		rewrite to:	%41:fr64 = nofpexcept MULSDrm %41:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
	%42:fr64 = nofpexcept ADDSDrr killed %41:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
		prepend:	%42:fr64 = COPY %41:fr64, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
		rewrite to:	%42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
	%3:gr32 = nuw nsw ADD32ri8 killed %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
		prepend:	%3:gr32 = COPY %2:gr32, debug-location !49; test2.cpp:18:27
		rewrite to:	%3:gr32 = nuw nsw ADD32ri8 %3:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
	%7:gr64 = nuw nsw ADD64ri8 killed %4:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
		prepend:	%7:gr64 = COPY %4:gr64_nosp, debug-location !64; test2.cpp:22:29
		rewrite to:	%7:gr64_nosp = nuw nsw ADD64ri8 %7:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY killed $rdx
32B	  %9:gr64 = COPY killed $rsi
48B	  %8:gr64 = COPY killed $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
80B	  %12:gr32 = MOV32ri 1
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = COPY killed %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY killed %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr killed %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
272B	  %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
288B	  %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
304B	  %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
320B	  %18:gr32 = MOV32ri 75
336B	  $rdi = COPY killed %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = COPY killed %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
368B	  $edx = COPY killed %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = COPY killed %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
496B	  %61:gr32 = COPY %19:gr32

512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

528B	  %2:gr32 = COPY killed %61:gr32
544B	  %20:gr64 = SUBREG_TO_REG 0, %19:gr32, %subreg.sub_32bit
560B	  %62:gr64_nosp = COPY killed %20:gr64
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
624B	  %28:gr32 = MOV32ri 1
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = COPY killed %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY killed %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit killed $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr killed %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
816B	  %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
832B	  %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
848B	  %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
864B	  %34:gr32 = MOV32ri 75
880B	  $rdi = COPY killed %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = COPY killed %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
912B	  $edx = COPY killed %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = COPY killed %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

992B	  %35:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1008B	  %37:gr64 = COPY killed %35:gr64, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1024B	  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), killed %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %36:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1056B	  %39:gr64 = COPY killed %36:gr64, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1072B	  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), killed %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr killed %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %40:fr64 = nofpexcept CVTSI642SDrr killed %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1120B	  %41:fr64 = COPY killed %40:fr64, debug-location !31; ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1136B	  %41:fr64 = nofpexcept MULSDrm %41:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1152B	  %42:fr64 = COPY killed %41:fr64, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1168B	  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1200B	  %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1216B	  %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1232B	  %45:gr64 = MOV32ri64 47
1248B	  $rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = COPY killed %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = COPY killed %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = COPY killed %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY killed %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1440B	  %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1456B	  %49:gr64 = MOV32ri64 8
1472B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = COPY killed %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = COPY killed %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1568B	  %51:gr32 = MOV32ri 1024
1584B	  $rdi = COPY killed %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = COPY killed %51:gr32, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1680B	  %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1696B	  %54:gr64 = MOV32ri64 5
1712B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = COPY killed %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = COPY killed %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1808B	  %56:gr32 = MOV32ri 20000000
1824B	  $rdi = COPY killed %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = COPY killed %56:gr32, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1920B	  %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1936B	  %59:gr64 = MOV32ri64 2
1952B	  $rdi = COPY killed %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = COPY killed %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = COPY killed %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1

2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2064B	  %3:gr32 = COPY killed %2:gr32, debug-location !49; test2.cpp:18:27
2080B	  %3:gr32 = nuw nsw ADD32ri8 %3:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %3:gr32, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2112B	  %61:gr32 = COPY killed %3:gr32
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2176B	  %4:gr64_nosp = COPY killed %62:gr64_nosp
2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr killed %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, killed %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2320B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, killed %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr killed %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, killed %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2480B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, killed %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2512B	  %7:gr64_nosp = COPY killed %4:gr64_nosp, debug-location !64; test2.cpp:22:29
2528B	  %7:gr64_nosp = nuw nsw ADD64ri8 %7:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %7:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2560B	  %62:gr64_nosp = COPY killed %7:gr64_nosp
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

Computing live-in reg-units in ABI blocks.
0B	%bb.0 DIL#0 DIH#0 HDI#0 SIL#0 SIH#0 HSI#0 DH#0 DL#0 HDX#0
Created 9 new intervals.
********** INTERVALS **********
DH [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
DIL [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
DIH [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
DL [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
HDI [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
HDX [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
SIL [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
SIH [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
HSI [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
%0 [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r weight:0.000000e+00
%1 [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r weight:0.000000e+00
%2 [528r,592B:0)[2048B,2064r:0)[2160B,2608B:0)  0@528r weight:0.000000e+00
%3 [2064r,2080r:0)[2080r,2112r:1)  0@2064r 1@2080r weight:0.000000e+00
%4 [2176r,2512r:0)  0@2176r weight:0.000000e+00
%5 [2224r,2320r:0)  0@2224r weight:0.000000e+00
%6 [2384r,2480r:0)  0@2384r weight:0.000000e+00
%7 [2512r,2528r:0)[2528r,2560r:1)  0@2512r 1@2528r weight:0.000000e+00
%8 [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r weight:0.000000e+00
%9 [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r weight:0.000000e+00
%10 [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r weight:0.000000e+00
%12 [80r,112r:0)  0@80r weight:0.000000e+00
%13 [96r,128r:0)  0@96r weight:0.000000e+00
%14 [176r,192r:0)  0@176r weight:0.000000e+00
%15 [272r,336r:0)  0@272r weight:0.000000e+00
%16 [288r,352r:0)  0@288r weight:0.000000e+00
%17 [304r,384r:0)  0@304r weight:0.000000e+00
%18 [320r,368r:0)  0@320r weight:0.000000e+00
%19 [480r,592B:0)[2048B,2608B:0)  0@480r weight:0.000000e+00
%20 [544r,560r:0)  0@544r weight:0.000000e+00
%22 [2192r,2240r:0)  0@2192r weight:0.000000e+00
%23 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%24 [2352r,2400r:0)  0@2352r weight:0.000000e+00
%25 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%28 [624r,656r:0)  0@624r weight:0.000000e+00
%29 [640r,672r:0)  0@640r weight:0.000000e+00
%30 [720r,736r:0)  0@720r weight:0.000000e+00
%31 [816r,880r:0)  0@816r weight:0.000000e+00
%32 [832r,896r:0)  0@832r weight:0.000000e+00
%33 [848r,928r:0)  0@848r weight:0.000000e+00
%34 [864r,912r:0)  0@864r weight:0.000000e+00
%35 [992r,1008r:0)  0@992r weight:0.000000e+00
%36 [1040r,1056r:0)  0@1040r weight:0.000000e+00
%37 [1008r,1024r:0)[1024r,1088r:1)  0@1008r 1@1024r weight:0.000000e+00
%38 [1088r,1168r:0)  0@1088r weight:0.000000e+00
%39 [1056r,1072r:0)[1072r,1104r:1)  0@1056r 1@1072r weight:0.000000e+00
%40 [1104r,1120r:0)  0@1104r weight:0.000000e+00
%41 [1120r,1136r:0)[1136r,1152r:1)  0@1120r 1@1136r weight:0.000000e+00
%42 [1152r,1168r:0)[1168r,1360r:1)  0@1152r 1@1168r weight:0.000000e+00
%43 [1200r,1344r:0)  0@1200r weight:0.000000e+00
%44 [1216r,1264r:0)  0@1216r weight:0.000000e+00
%45 [1232r,1280r:0)  0@1232r weight:0.000000e+00
%47 [1408r,1584r:0)  0@1408r weight:0.000000e+00
%48 [1440r,1488r:0)  0@1440r weight:0.000000e+00
%49 [1456r,1504r:0)  0@1456r weight:0.000000e+00
%51 [1568r,1600r:0)  0@1568r weight:0.000000e+00
%52 [1648r,1824r:0)  0@1648r weight:0.000000e+00
%53 [1680r,1728r:0)  0@1680r weight:0.000000e+00
%54 [1696r,1744r:0)  0@1696r weight:0.000000e+00
%56 [1808r,1840r:0)  0@1808r weight:0.000000e+00
%57 [1888r,1952r:0)  0@1888r weight:0.000000e+00
%58 [1920r,1968r:0)  0@1920r weight:0.000000e+00
%59 [1936r,1984r:0)  0@1936r weight:0.000000e+00
%61 [496r,512B:0)[512B,528r:2)[2112r,2160B:1)  0@496r 1@2112r 2@512B-phi weight:0.000000e+00
%62 [560r,592B:0)[2160B,2176r:2)[2560r,2608B:1)  0@560r 1@2560r 2@2160B-phi weight:0.000000e+00
RegMasks: 144r 400r 688r 944r 1296r 1376r 1520r 1616r 1760r 1856r 2000r
********** MACHINEINSTRS **********
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
80B	  %12:gr32 = MOV32ri 1
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = COPY %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
272B	  %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
288B	  %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
304B	  %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
320B	  %18:gr32 = MOV32ri 75
336B	  $rdi = COPY %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = COPY %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
368B	  $edx = COPY %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = COPY %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
496B	  %61:gr32 = COPY %19:gr32

512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

528B	  %2:gr32 = COPY %61:gr32
544B	  %20:gr64 = SUBREG_TO_REG 0, %19:gr32, %subreg.sub_32bit
560B	  %62:gr64_nosp = COPY %20:gr64
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
624B	  %28:gr32 = MOV32ri 1
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = COPY %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
816B	  %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
832B	  %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
848B	  %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
864B	  %34:gr32 = MOV32ri 75
880B	  $rdi = COPY %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = COPY %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
912B	  $edx = COPY %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = COPY %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

992B	  %35:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1008B	  %37:gr64 = COPY %35:gr64, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1024B	  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %36:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1056B	  %39:gr64 = COPY %36:gr64, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1072B	  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %40:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1120B	  %41:fr64 = COPY %40:fr64, debug-location !31; ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1136B	  %41:fr64 = nofpexcept MULSDrm %41:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1152B	  %42:fr64 = COPY %41:fr64, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1168B	  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1200B	  %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1216B	  %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1232B	  %45:gr64 = MOV32ri64 47
1248B	  $rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = COPY %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = COPY %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = COPY %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1440B	  %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1456B	  %49:gr64 = MOV32ri64 8
1472B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = COPY %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = COPY %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1568B	  %51:gr32 = MOV32ri 1024
1584B	  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = COPY %51:gr32, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1680B	  %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1696B	  %54:gr64 = MOV32ri64 5
1712B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = COPY %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = COPY %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1808B	  %56:gr32 = MOV32ri 20000000
1824B	  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = COPY %56:gr32, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1920B	  %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1936B	  %59:gr64 = MOV32ri64 2
1952B	  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = COPY %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = COPY %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1

2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2064B	  %3:gr32 = COPY %2:gr32, debug-location !49; test2.cpp:18:27
2080B	  %3:gr32 = nuw nsw ADD32ri8 %3:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %3:gr32, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2112B	  %61:gr32 = COPY %3:gr32
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2176B	  %4:gr64_nosp = COPY %62:gr64_nosp
2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2320B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %4:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2480B	  MOVSSmr %10:gr64, 4, %4:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2512B	  %7:gr64_nosp = COPY %4:gr64_nosp, debug-location !64; test2.cpp:22:29
2528B	  %7:gr64_nosp = nuw nsw ADD64ri8 %7:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %7:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2560B	  %62:gr64_nosp = COPY %7:gr64_nosp
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

********** SIMPLE REGISTER COALESCING **********
********** Function: _Z5test2PfS_S_i
********** JOINING INTERVALS ***********
for.body11:
2176B	%4:gr64_nosp = COPY %62:gr64_nosp
	Considering merging to GR64_NOSP with %4 in %62
		RHS = %4 [2176r,2512r:0)  0@2176r weight:0.000000e+00
		LHS = %62 [560r,592B:0)[2160B,2176r:2)[2560r,2608B:1)  0@560r 1@2560r 2@2160B-phi weight:0.000000e+00
		merge %4:0@2176r into %62:2@2160B --> @2160B
		erased:	2176r	%4:gr64_nosp = COPY %62:gr64_nosp
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
AllocationOrder(GR64_NOSP) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
		updated: 2192B	%22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
		updated: 2208B	MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
		updated: 2224B	%5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
		updated: 2320B	MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14
		updated: 2352B	%24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
		updated: 2368B	MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
		updated: 2384B	%6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
		updated: 2480B	MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14
		updated: 2512B	%7:gr64_nosp = COPY %62:gr64_nosp, debug-location !64; test2.cpp:22:29
	Success: %4 -> %62
	Result = %62 [560r,592B:0)[2160B,2512r:2)[2560r,2608B:1)  0@560r 1@2560r 2@2160B-phi weight:0.000000e+00
for.inc:
for.inc.1:
if.then:
if.then.1:
2512B	%7:gr64_nosp = COPY %62:gr64_nosp, debug-location !64; test2.cpp:22:29
	Considering merging to GR64_NOSP with %7 in %62
		RHS = %7 [2512r,2528r:0)[2528r,2560r:1)  0@2512r 1@2528r weight:0.000000e+00
		LHS = %62 [560r,592B:0)[2160B,2512r:2)[2560r,2608B:1)  0@560r 1@2560r 2@2160B-phi weight:0.000000e+00
		merge %62:1@2560r into %7:1@2528r --> @2528r
		merge %7:0@2512r into %62:2@2160B --> @2160B
		erased:	2560r	%62:gr64_nosp = COPY %7:gr64_nosp
		erased:	2512r	%7:gr64_nosp = COPY %62:gr64_nosp, debug-location !64; test2.cpp:22:29
		updated: 2528B	%62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
		updated: 2544B	CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
	Success: %7 -> %62
	Result = %62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:0.000000e+00
for.cond8.preheader:
528B	%2:gr32 = COPY %61:gr32
	Considering merging to GR32 with %61 in %2
		RHS = %61 [496r,512B:0)[512B,528r:2)[2112r,2160B:1)  0@496r 1@2112r 2@512B-phi weight:0.000000e+00
		LHS = %2 [528r,592B:0)[2048B,2064r:0)[2160B,2608B:0)  0@528r weight:0.000000e+00
		merge %2:0@528r into %61:2@512B --> @512B
		erased:	528r	%2:gr32 = COPY %61:gr32
AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $ebp $r14d $r15d $r12d $r13d ]
		updated: 496B	%2:gr32 = COPY %19:gr32
		updated: 2112B	%2:gr32 = COPY %3:gr32
	Success: %61 -> %2
	Result = %2 [496r,512B:1)[512B,592B:0)[2048B,2064r:0)[2112r,2160B:2)[2160B,2608B:0)  0@512B-phi 1@496r 2@2112r weight:0.000000e+00
544B	%20:gr64 = SUBREG_TO_REG 0, %19:gr32, %subreg.sub_32bit
	Considering merging to GR64_with_sub_8bit with %19 in %20:sub_32bit
		RHS = %19 [480r,592B:0)[2048B,2608B:0)  0@480r weight:0.000000e+00
		LHS = %20 [544r,560r:0)  0@544r weight:0.000000e+00
		merge %20:0@544r into %19:0@480r --> @480r
		erased:	544r	%20:gr64 = SUBREG_TO_REG 0, %19:gr32, %subreg.sub_32bit
AllocationOrder(GR64_with_sub_8bit) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
		updated: 480B	undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
		updated: 496B	%2:gr32 = COPY %20.sub_32bit:gr64_with_sub_8bit
	Success: %19:sub_32bit -> %20
	Result = %20 [480r,592B:0)[2048B,2608B:0)  0@480r weight:0.000000e+00
for.cond.cleanup10:
560B	%62:gr64_nosp = COPY %20:gr64_with_sub_8bit
	Considering merging to GR64_NOSP with %20 in %62
		RHS = %20 [480r,592B:0)[2048B,2608B:0)  0@480r weight:0.000000e+00
		LHS = %62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:0.000000e+00
		merge %62:0@560r into %20:0@480r --> @480r
		interference at %62:1@2528r
		updated: 560B	undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
		updated: 2528B	%62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
		updated: 2192B	%22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
		updated: 2208B	MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
		updated: 2224B	%5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
		updated: 2320B	MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14
		updated: 2352B	%24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
		updated: 2368B	MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
		updated: 2384B	%6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
		updated: 2480B	MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14
		updated: 2544B	CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
Remat: undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
Shrink: %20 [480r,592B:0)[2048B,2608B:0)  0@480r weight:0.000000e+00
Shrunk: %20 [480r,496r:0)  0@480r weight:0.000000e+00
2064B	%3:gr32 = COPY %2:gr32, debug-location !49; test2.cpp:18:27
	Considering merging to GR32 with %3 in %2
		RHS = %3 [2064r,2080r:0)[2080r,2112r:1)  0@2064r 1@2080r weight:0.000000e+00
		LHS = %2 [496r,512B:1)[512B,592B:0)[2048B,2064r:0)[2112r,2160B:2)[2160B,2608B:0)  0@512B-phi 1@496r 2@2112r weight:0.000000e+00
		merge %2:2@2112r into %3:1@2080r --> @2080r
		merge %3:0@2064r into %2:0@512B --> @512B
		erased:	2112r	%2:gr32 = COPY %3:gr32
		erased:	2064r	%3:gr32 = COPY %2:gr32, debug-location !49; test2.cpp:18:27
		updated: 2080B	%2:gr32 = nuw nsw ADD32ri8 %2:gr32(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
		updated: 2096B	CMP32ri %2:gr32, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
	Success: %3 -> %2
	Result = %2 [496r,512B:1)[512B,592B:0)[2048B,2080r:0)[2080r,2160B:2)[2160B,2608B:0)  0@512B-phi 1@496r 2@2080r weight:0.000000e+00
for.cond.cleanup:
656B	$edi = COPY %28:gr32, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
	Considering merging %28 with $edi
	Can only merge into reserved registers.
Remat: $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Shrink: %28 [624r,656r:0)  0@624r weight:0.000000e+00
All defs dead: 624r	dead %28:gr32 = MOV32ri 1
Shrunk: %28 [624r,624d:0)  0@624r weight:0.000000e+00
Deleting dead def 624r	dead %28:gr32 = MOV32ri 1
672B	$rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
	Considering merging %29 with $rsi
	Can only merge into reserved registers.
720B	%30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
	Considering merging %30 with $eax
	Can only merge into reserved registers.
entry:
16B	%10:gr64 = COPY $rdx
	Considering merging %10 with $rdx
	Can only merge into reserved registers.
32B	%9:gr64 = COPY $rsi
	Considering merging %9 with $rsi
	Can only merge into reserved registers.
48B	%8:gr64 = COPY $rdi
	Considering merging %8 with $rdi
	Can only merge into reserved registers.
112B	$edi = COPY %12:gr32, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
	Considering merging %12 with $edi
	Can only merge into reserved registers.
Remat: $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Shrink: %12 [80r,112r:0)  0@80r weight:0.000000e+00
All defs dead: 80r	dead %12:gr32 = MOV32ri 1
Shrunk: %12 [80r,80d:0)  0@80r weight:0.000000e+00
Deleting dead def 80r	dead %12:gr32 = MOV32ri 1
128B	$rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
	Considering merging %13 with $rsi
	Can only merge into reserved registers.
176B	%14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
	Considering merging %14 with $eax
	Can only merge into reserved registers.
_ZL7gettimev.exit:
cond.false.i:
336B	$rdi = COPY %15:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
	Considering merging %15 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrink: %15 [272r,336r:0)  0@272r weight:0.000000e+00
All defs dead: 272r	dead %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrunk: %15 [272r,272d:0)  0@272r weight:0.000000e+00
Deleting dead def 272r	dead %15:gr64 = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	$rsi = COPY %16:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
	Considering merging %16 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrink: %16 [288r,352r:0)  0@288r weight:0.000000e+00
All defs dead: 288r	dead %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrunk: %16 [288r,288d:0)  0@288r weight:0.000000e+00
Deleting dead def 288r	dead %16:gr64 = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
368B	$edx = COPY %18:gr32, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
	Considering merging %18 with $edx
	Can only merge into reserved registers.
Remat: $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrink: %18 [320r,368r:0)  0@320r weight:0.000000e+00
All defs dead: 320r	dead %18:gr32 = MOV32ri 75
Shrunk: %18 [320r,320d:0)  0@320r weight:0.000000e+00
Deleting dead def 320r	dead %18:gr32 = MOV32ri 75
384B	$rcx = COPY %17:gr64, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
	Considering merging %17 with $rcx
	Can only merge into reserved registers.
Remat: $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrink: %17 [304r,384r:0)  0@304r weight:0.000000e+00
All defs dead: 304r	dead %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
Shrunk: %17 [304r,304d:0)  0@304r weight:0.000000e+00
Deleting dead def 304r	dead %17:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
cond.false.i64:
880B	$rdi = COPY %31:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
	Considering merging %31 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrink: %31 [816r,880r:0)  0@816r weight:0.000000e+00
All defs dead: 816r	dead %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrunk: %31 [816r,816d:0)  0@816r weight:0.000000e+00
Deleting dead def 816r	dead %31:gr64 = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	$rsi = COPY %32:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
	Considering merging %32 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrink: %32 [832r,896r:0)  0@832r weight:0.000000e+00
All defs dead: 832r	dead %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrunk: %32 [832r,832d:0)  0@832r weight:0.000000e+00
Deleting dead def 832r	dead %32:gr64 = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
912B	$edx = COPY %34:gr32, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
	Considering merging %34 with $edx
	Can only merge into reserved registers.
Remat: $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrink: %34 [864r,912r:0)  0@864r weight:0.000000e+00
All defs dead: 864r	dead %34:gr32 = MOV32ri 75
Shrunk: %34 [864r,864d:0)  0@864r weight:0.000000e+00
Deleting dead def 864r	dead %34:gr32 = MOV32ri 75
928B	$rcx = COPY %33:gr64, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
	Considering merging %33 with $rcx
	Can only merge into reserved registers.
Remat: $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrink: %33 [848r,928r:0)  0@848r weight:0.000000e+00
All defs dead: 848r	dead %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
Shrunk: %33 [848r,848d:0)  0@848r weight:0.000000e+00
Deleting dead def 848r	dead %33:gr64 = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
_ZL7gettimev.exit70:
1248B	$rdi = COPY %43:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
	Considering merging %43 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Shrink: %43 [1200r,1344r:0)  0@1200r weight:0.000000e+00
Shrunk: %43 [1200r,1344r:0)  0@1200r weight:0.000000e+00
1264B	$rsi = COPY %44:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
	Considering merging %44 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Shrink: %44 [1216r,1264r:0)  0@1216r weight:0.000000e+00
All defs dead: 1216r	dead %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Shrunk: %44 [1216r,1216d:0)  0@1216r weight:0.000000e+00
Deleting dead def 1216r	dead %44:gr64 = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	$rdx = COPY %45:gr64, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
	Considering merging %45 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Shrink: %45 [1232r,1280r:0)  0@1232r weight:0.000000e+00
All defs dead: 1232r	dead %45:gr64 = MOV32ri64 47
Shrunk: %45 [1232r,1232d:0)  0@1232r weight:0.000000e+00
Deleting dead def 1232r	dead %45:gr64 = MOV32ri64 47
1344B	$rdi = COPY %43:gr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
	Considering merging %43 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
Shrink: %43 [1200r,1344r:0)  0@1200r weight:0.000000e+00
All defs dead: 1200r	dead %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
Shrunk: %43 [1200r,1200d:0)  0@1200r weight:0.000000e+00
Deleting dead def 1200r	dead %43:gr64 = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1360B	$xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
	Considering merging %42 with $xmm0
	Can only merge into reserved registers.
1408B	%47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
	Considering merging %47 with $rax
	Can only merge into reserved registers.
1472B	$rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
	Considering merging %47 with $rdi
	Can only merge into reserved registers.
1488B	$rsi = COPY %48:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
	Considering merging %48 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Shrink: %48 [1440r,1488r:0)  0@1440r weight:0.000000e+00
All defs dead: 1440r	dead %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Shrunk: %48 [1440r,1440d:0)  0@1440r weight:0.000000e+00
Deleting dead def 1440r	dead %48:gr64 = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	$rdx = COPY %49:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
	Considering merging %49 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
Shrink: %49 [1456r,1504r:0)  0@1456r weight:0.000000e+00
All defs dead: 1456r	dead %49:gr64 = MOV32ri64 8
Shrunk: %49 [1456r,1456d:0)  0@1456r weight:0.000000e+00
Deleting dead def 1456r	dead %49:gr64 = MOV32ri64 8
1584B	$rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
	Considering merging %47 with $rdi
	Can only merge into reserved registers.
1600B	$esi = COPY %51:gr32, debug-location !42; test2.cpp:64:39
	Considering merging %51 with $esi
	Can only merge into reserved registers.
Remat: $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
Shrink: %51 [1568r,1600r:0)  0@1568r weight:0.000000e+00
All defs dead: 1568r	dead %51:gr32 = MOV32ri 1024
Shrunk: %51 [1568r,1568d:0)  0@1568r weight:0.000000e+00
Deleting dead def 1568r	dead %51:gr32 = MOV32ri 1024
1648B	%52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
	Considering merging %52 with $rax
	Can only merge into reserved registers.
1712B	$rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
	Considering merging %52 with $rdi
	Can only merge into reserved registers.
1728B	$rsi = COPY %53:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
	Considering merging %53 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Shrink: %53 [1680r,1728r:0)  0@1680r weight:0.000000e+00
All defs dead: 1680r	dead %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Shrunk: %53 [1680r,1680d:0)  0@1680r weight:0.000000e+00
Deleting dead def 1680r	dead %53:gr64 = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	$rdx = COPY %54:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
	Considering merging %54 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
Shrink: %54 [1696r,1744r:0)  0@1696r weight:0.000000e+00
All defs dead: 1696r	dead %54:gr64 = MOV32ri64 5
Shrunk: %54 [1696r,1696d:0)  0@1696r weight:0.000000e+00
Deleting dead def 1696r	dead %54:gr64 = MOV32ri64 5
1824B	$rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
	Considering merging %52 with $rdi
	Can only merge into reserved registers.
1840B	$esi = COPY %56:gr32, debug-location !45; test2.cpp:64:55
	Considering merging %56 with $esi
	Can only merge into reserved registers.
Remat: $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
Shrink: %56 [1808r,1840r:0)  0@1808r weight:0.000000e+00
All defs dead: 1808r	dead %56:gr32 = MOV32ri 20000000
Shrunk: %56 [1808r,1808d:0)  0@1808r weight:0.000000e+00
Deleting dead def 1808r	dead %56:gr32 = MOV32ri 20000000
1888B	%57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
	Considering merging %57 with $rax
	Can only merge into reserved registers.
1952B	$rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
	Considering merging %57 with $rdi
	Can only merge into reserved registers.
1968B	$rsi = COPY %58:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
	Considering merging %58 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Shrink: %58 [1920r,1968r:0)  0@1920r weight:0.000000e+00
All defs dead: 1920r	dead %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Shrunk: %58 [1920r,1920d:0)  0@1920r weight:0.000000e+00
Deleting dead def 1920r	dead %58:gr64 = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	$rdx = COPY %59:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
	Considering merging %59 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
Shrink: %59 [1936r,1984r:0)  0@1936r weight:0.000000e+00
All defs dead: 1936r	dead %59:gr64 = MOV32ri64 2
Shrunk: %59 [1936r,1936d:0)  0@1936r weight:0.000000e+00
Deleting dead def 1936r	dead %59:gr64 = MOV32ri64 2
496B	%2:gr32 = COPY %20.sub_32bit:gr64_with_sub_8bit
	Considering merging to GR64_with_sub_8bit with %2 in %20:sub_32bit
		RHS = %2 [496r,512B:1)[512B,592B:0)[2048B,2080r:0)[2080r,2160B:2)[2160B,2608B:0)  0@512B-phi 1@496r 2@2080r weight:0.000000e+00
		LHS = %20 [480r,496r:0)  0@480r weight:0.000000e+00
		merge %2:1@496r into %20:0@480r --> @480r
		erased:	496r	%2:gr32 = COPY %20.sub_32bit:gr64_with_sub_8bit
		updated: 2080B	%20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
		updated: 2096B	CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
	Success: %2:sub_32bit -> %20
	Result = %20 [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r weight:0.000000e+00
1008B	%37:gr64 = COPY %35:gr64, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
	Considering merging to GR64 with %35 in %37
		RHS = %35 [992r,1008r:0)  0@992r weight:0.000000e+00
		LHS = %37 [1008r,1024r:0)[1024r,1088r:1)  0@1008r 1@1024r weight:0.000000e+00
		merge %37:0@1008r into %35:0@992r --> @992r
		erased:	1008r	%37:gr64 = COPY %35:gr64, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
		updated: 992B	%37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
	Success: %35 -> %37
	Result = %37 [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r weight:0.000000e+00
1056B	%39:gr64 = COPY %36:gr64, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
	Considering merging to GR64 with %36 in %39
		RHS = %36 [1040r,1056r:0)  0@1040r weight:0.000000e+00
		LHS = %39 [1056r,1072r:0)[1072r,1104r:1)  0@1056r 1@1072r weight:0.000000e+00
		merge %39:0@1056r into %36:0@1040r --> @1040r
		erased:	1056r	%39:gr64 = COPY %36:gr64, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
		updated: 1040B	%39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
	Success: %36 -> %39
	Result = %39 [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r weight:0.000000e+00
1120B	%41:fr64 = COPY %40:fr64, debug-location !31; ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
	Considering merging to FR64 with %40 in %41
		RHS = %40 [1104r,1120r:0)  0@1104r weight:0.000000e+00
		LHS = %41 [1120r,1136r:0)[1136r,1152r:1)  0@1120r 1@1136r weight:0.000000e+00
		merge %41:0@1120r into %40:0@1104r --> @1104r
		erased:	1120r	%41:fr64 = COPY %40:fr64, debug-location !31; ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
AllocationOrder(FR64) = [ $xmm0 $xmm1 $xmm2 $xmm3 $xmm4 $xmm5 $xmm6 $xmm7 $xmm8 $xmm9 $xmm10 $xmm11 $xmm12 $xmm13 $xmm14 $xmm15 ]
		updated: 1104B	%41:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
	Success: %40 -> %41
	Result = %41 [1104r,1136r:0)[1136r,1152r:1)  0@1104r 1@1136r weight:0.000000e+00
1152B	%42:fr64 = COPY %41:fr64, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
	Considering merging to FR64 with %41 in %42
		RHS = %41 [1104r,1136r:0)[1136r,1152r:1)  0@1104r 1@1136r weight:0.000000e+00
		LHS = %42 [1152r,1168r:0)[1168r,1360r:1)  0@1152r 1@1168r weight:0.000000e+00
		merge %42:0@1152r into %41:1@1136r --> @1136r
		erased:	1152r	%42:fr64 = COPY %41:fr64, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
		updated: 1104B	%42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
		updated: 1136B	%42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
	Success: %41 -> %42
	Result = %42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:0.000000e+00
1472B	$rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
	Considering merging %47 with $rdi
	Can only merge into reserved registers.
1584B	$rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
	Considering merging %47 with $rdi
	Can only merge into reserved registers.
1712B	$rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
	Considering merging %52 with $rdi
	Can only merge into reserved registers.
1824B	$rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
	Considering merging %52 with $rdi
	Can only merge into reserved registers.
1952B	$rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
	Considering merging %57 with $rdi
	Can only merge into reserved registers.
Trying to inflate 0 regs.
********** INTERVALS **********
DH [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
DIL [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
DIH [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
DL [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
HDI [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
HDX [0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
SIL [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
SIH [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
HSI [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
%0 [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r weight:0.000000e+00
%1 [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r weight:0.000000e+00
%5 [2224r,2320r:0)  0@2224r weight:0.000000e+00
%6 [2384r,2480r:0)  0@2384r weight:0.000000e+00
%8 [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r weight:0.000000e+00
%9 [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r weight:0.000000e+00
%10 [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r weight:0.000000e+00
%13 [96r,128r:0)  0@96r weight:0.000000e+00
%14 [176r,192r:0)  0@176r weight:0.000000e+00
%20 [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r weight:0.000000e+00
%22 [2192r,2240r:0)  0@2192r weight:0.000000e+00
%23 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%24 [2352r,2400r:0)  0@2352r weight:0.000000e+00
%25 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%29 [640r,672r:0)  0@640r weight:0.000000e+00
%30 [720r,736r:0)  0@720r weight:0.000000e+00
%37 [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r weight:0.000000e+00
%38 [1088r,1168r:0)  0@1088r weight:0.000000e+00
%39 [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r weight:0.000000e+00
%42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:0.000000e+00
%47 [1408r,1584r:0)  0@1408r weight:0.000000e+00
%52 [1648r,1824r:0)  0@1648r weight:0.000000e+00
%57 [1888r,1952r:0)  0@1888r weight:0.000000e+00
%62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:0.000000e+00
RegMasks: 144r 400r 688r 944r 1296r 1376r 1520r 1616r 1760r 1856r 2000r
********** MACHINEINSTRS **********
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
336B	  $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
368B	  $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags

512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

560B	  undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
880B	  $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
912B	  $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

992B	  %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1024B	  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1072B	  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1136B	  %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1168B	  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1248B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1472B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1584B	  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1712B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1824B	  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1952B	  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1

2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2080B	  %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2320B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2480B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2528B	  %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

Before MISched:
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

bb.0.entry:
  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
  liveins: $rdi, $rsi, $rdx
  %10:gr64 = COPY $rdx
  %9:gr64 = COPY $rsi
  %8:gr64 = COPY $rdi
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.1.cond.false.i:
; predecessors: %bb.0

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

bb.2._ZL7gettimev.exit:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)

  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags

bb.3.for.cond8.preheader:
; predecessors: %bb.2, %bb.7
  successors: %bb.8(0x80000000); %bb.8(100.00%)

  undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

bb.4.for.cond.cleanup:
; predecessors: %bb.7
  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.5.cond.false.i64:
; predecessors: %bb.4

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

bb.6._ZL7gettimev.exit70:
; predecessors: %bb.4

  %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
  %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
  %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
  %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
  %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
  $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
  $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  RET 0, debug-location !48; test2.cpp:65:1

bb.7.for.cond.cleanup10:
; predecessors: %bb.12
  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

  %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
  CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

bb.8.for.body11:
; predecessors: %bb.3, %bb.12
  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

  %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

bb.9.if.then:
; predecessors: %bb.8
  successors: %bb.10(0x80000000); %bb.10(100.00%)

  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

bb.10.for.inc:
; predecessors: %bb.8, %bb.9
  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

  %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
  MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
  nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

bb.11.if.then.1:
; predecessors: %bb.10
  successors: %bb.12(0x80000000); %bb.12(100.00%)

  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

bb.12.for.inc.1:
; predecessors: %bb.10, %bb.11
  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

  %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
  CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.

AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $ebp $r14d $r15d $r12d $r13d ]
AllocationOrder(GR16) = [ $ax $cx $dx $si $di $r8w $r9w $r10w $r11w $bx $bp $r14w $r15w $r12w $r13w ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.0 entry
  From: %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
    To: JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(1) - ExitSU /  TEST32rr - JCC_1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%14
  Single Issue       : false;
SU(1):   TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%14
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
SU(1):   TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.0 entry
  From: %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%13
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%13
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
SU(2):   $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.0 entry
  From: %10:gr64 = COPY $rdx
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %10:gr64 = COPY $rdx
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(1):   %9:gr64 = COPY $rsi
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
SU(2):   %8:gr64 = COPY $rdi
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %8:gr64 = COPY $rdi
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %9:gr64 = COPY $rsi
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %10:gr64 = COPY $rdx
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   %10:gr64 = COPY $rdx
SU(1):   %9:gr64 = COPY $rsi
SU(2):   %8:gr64 = COPY $rdi

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.1 cond.false.i
  From: $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
    To: CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
handleMove 368B -> 392B: $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
     DH:	[0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
     DL:	[0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
     HDX:	[0B,16r:0)[368r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@368r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 3 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.1 ***
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
SU(3):   $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
SU(2):   $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.2 _ZL7gettimev.exit
  From: %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
    To: End RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
SU(1):   %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 4
  Successors:
    ExitSU: Ord  Latency=4 Artificial
  Single Issue       : false;
SU(2):   undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Single Issue       : false;
Critical Path(GS-RR ): 4
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  Ready @4c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 4c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 MOps
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  Ready @4c
  SBPort23 +1x6u
  *** Critical resource SBPort23: 1c
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 2 SBPort23
  ExpectedLatency: 4c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.2 ***
SU(0):   %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
SU(1):   %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
SU(2):   undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.4 for.cond.cleanup
  From: %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
    To: JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(1) - ExitSU /  TEST32rr - JCC_1
SU(0):   %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(1): Data Latency=0 Reg=%30
  Single Issue       : false;
SU(1):   TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 1
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%30
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 0
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
SU(1):   TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.4 for.cond.cleanup
  From: %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
    To: CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Data Latency=1 Reg=%29
  Single Issue       : false;
SU(1):   $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%29
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  Ready @0c
  BotQ.A TopLatency SU(2) 1c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
  Ready @1c
  SBPort01 +1x6u
  *** Critical resource SBPort01: 0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.4 ***
SU(0):   %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
SU(1):   $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
SU(2):   $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.5 cond.false.i64
  From: $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
    To: CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
 RegionInstrs: 4
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(3):   $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=1 Artificial
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 2 1 0 
  Cand SU(3) ORDER                              
  Cand SU(2) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(2) $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
handleMove 912B -> 936B: $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
     DH:	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
     DL:	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
     HDX:	[0B,16r:0)[392r,400r:2)[912r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@912r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
        -->	[0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 0 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 3 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 4 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.5 ***
SU(0):   $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
SU(1):   $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
SU(3):   $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
SU(2):   $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
    To: CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
handleMove 1952B -> 1992B: $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
     DIL:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     DIH:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     HDI:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1952r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1952r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     %57:	[1888r,1952r:0)  0@1888r
        -->	[1888r,1992r:0)  0@1888r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
SU(2):   $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
SU(0):   $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
    To: CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
SU(1):   $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
    To: CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
handleMove 1712B -> 1752B: $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
     DIL:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     DIH:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     HDI:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1712r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1712r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
     %52:	[1648r,1824r:0)  0@1648r
        -->	[1648r,1824r:0)  0@1648r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
SU(2):   $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
SU(0):   $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
    To: CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
  Ready @0c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
SU(1):   $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
    To: CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=0 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
  Cand SU(0) PHYS-REG                           
Pick Bot PHYS-REG  
Scheduling SU(0) $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
handleMove 1472B -> 1512B: $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
     DIL:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
     DIH:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
     HDI:	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1472r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1472r 8@1344r 9@1248r 10@880r 11@336r
        -->	[0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
     %47:	[1408r,1584r:0)  0@1408r
        -->	[1408r,1584r:0)  0@1408r
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(1):   $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
SU(2):   $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
SU(0):   $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
    To: CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 0 
  Cand SU(1) ORDER                              
Pick Bot PHYS-REG  
Scheduling SU(1) $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  Ready @0c
BotQ.A @0c
  Retired: 0
  Executed: 0c
  Critical: 0c, 0 MOps
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
SU(1):   $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
    To: CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 3 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
SU(1):   $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
SU(2):   $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.6 _ZL7gettimev.exit70
  From: %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
    To: ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
 RegionInstrs: 8
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=1 OnlyTopDown=0 OnlyBottomUp=1
Max Pressure: FR32=2
FR32X=2
GR16=6
Live In: %1 %0 
Live Out: %42 
Live Thru: 
  LiveReg: %42
Top Pressure:
GR16=4
Bottom Pressure:
FR32=1
FR32X=1
AllocationOrder(BNDR) = [ $bnd0 $bnd1 $bnd2 $bnd3 ]
AllocationOrder(SEGMENT_REG) = [ ]
AllocationOrder(GR32_BPSP) = [ $ebp ] (sub-class)
AllocationOrder(GR32_BPSP) = [ $ebp ] (sub-class)
AllocationOrder(GR32_BSI) = [ $esi $ebx ] (sub-class)
AllocationOrder(GR32_BSI) = [ $esi $ebx ] (sub-class)
AllocationOrder(GR32_DIBP) = [ $edi $ebp ] (sub-class)
AllocationOrder(GR32_DIBP) = [ $edi $ebp ] (sub-class)
AllocationOrder(RFP32) = [ $fp0 $fp1 $fp2 $fp3 $fp4 $fp5 $fp6 ]
AllocationOrder(GR8_ABCD_H) = [ $ah $ch $dh $bh ] (sub-class)
AllocationOrder(GR8_ABCD_L) = [ $al $cl $dl $bl ] (sub-class)
AllocationOrder(VK1) = [ $k0 $k1 $k2 $k3 $k4 $k5 $k6 $k7 ]
AllocationOrder(VR64) = [ $mm0 $mm1 $mm2 $mm3 $mm4 $mm5 $mm6 $mm7 ]
AllocationOrder(GR8_NOREX) = [ $al $cl $dl $bl ]
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
AllocationOrder(GR64_NOREX_and_GR64_TCW64) = [ $rax $rcx $rdx ] (sub-class)
AllocationOrder(GR64_NOREX_and_GR64_TCW64) = [ $rax $rcx $rdx ] (sub-class)
AllocationOrder(DEBUG_REG) = [ $dr0 $dr1 $dr2 $dr3 $dr4 $dr5 $dr6 $dr7 $dr8 $dr9 $dr10 $dr11 $dr12 $dr13 $dr14 $dr15 ]
AllocationOrder(FR32) = [ $xmm0 $xmm1 $xmm2 $xmm3 $xmm4 $xmm5 $xmm6 $xmm7 $xmm8 $xmm9 $xmm10 $xmm11 $xmm12 $xmm13 $xmm14 $xmm15 ]
AllocationOrder(CONTROL_REG) = [ $cr0 $cr1 $cr2 $cr3 $cr4 $cr5 $cr6 $cr7 $cr8 $cr9 $cr10 $cr11 $cr12 $cr13 $cr14 $cr15 ]
AllocationOrder(GR64_NOREX) = [ $rax $rcx $rdx $rsi $rdi $rbx $rbp ] (sub-class)
AllocationOrder(GR64_TCW64) = [ $rax $rcx $rdx $r8 $r9 $r10 $r11 ] (sub-class)
AllocationOrder(GR64_TCW64) = [ $rax $rcx $rdx $r8 $r9 $r10 $r11 ] (sub-class)
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR64_TC) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r11 ] (sub-class)
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR64_TC) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r11 ] (sub-class)
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(GR8) = [ $al $cl $dl $sil $dil $r8b $r9b $r10b $r11b $bl $bpl $r14b $r15b $r12b $r13b ]
AllocationOrder(FR32X) = [ $xmm0 $xmm1 $xmm2 $xmm3 $xmm4 $xmm5 $xmm6 $xmm7 $xmm8 $xmm9 $xmm10 $xmm11 $xmm12 $xmm13 $xmm14 $xmm15 ]
AllocationOrder(LOW32_ADDR_ACCESS_RBP) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $ebp $r14d $r15d $r12d $r13d $rbp ]
Excess PSets: 
SU(0):   %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 12
  Successors:
    SU(1): Data Latency=5 Reg=%37
    SU(1): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(1):   %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 7
  Predecessors:
    SU(0): Data Latency=5 Reg=%37
    SU(0): Out  Latency=0
  Successors:
    SU(4): Data Latency=1 Reg=%37
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(2):   %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 19
  Successors:
    SU(3): Data Latency=5 Reg=%39
    SU(3): Out  Latency=0
  Pressure Diff      : GR16 -2
  Single Issue       : false;
SU(3):   %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 14
  Predecessors:
    SU(2): Data Latency=5 Reg=%39
    SU(2): Out  Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%39
  Pressure Diff      : GR16 2
  Single Issue       : false;
SU(4):   %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 6
  Predecessors:
    SU(1): Data Latency=1 Reg=%37
  Successors:
    SU(7): Data Latency=4 Reg=%38
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(5):   %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 4
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(3): Data Latency=1 Reg=%39
  Successors:
    SU(6): Data Latency=0 Reg=%42
    SU(6): Out  Latency=0
  Pressure Diff      : FR32 -1    FR32X -1    GR16 2
  Single Issue       : false;
SU(6):   %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 11
  Depth              : 6
  Height             : 13
  Predecessors:
    SU(5): Data Latency=0 Reg=%42
    SU(5): Out  Latency=0
  Successors:
    SU(7): Data Latency=11 Reg=%42
    SU(7): Out  Latency=0
  Pressure Diff      : 
  Single Issue       : false;
SU(7):   %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 3
  Depth              : 17
  Height             : 2
  Predecessors:
    SU(6): Data Latency=11 Reg=%42
    SU(6): Out  Latency=0
    SU(4): Data Latency=4 Reg=%38
  Successors:
    ExitSU: Ord  Latency=2 Artificial
  Pressure Diff      : FR32 1    FR32X 1
  Single Issue       : false;
ExitSU:   ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 19
  Height             : 0
  Predecessors:
    SU(7): Ord  Latency=2 Artificial
Critical Path(GS-RR ): 19
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 7 
Scheduling SU(7) %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %42
  UpdateRegP: SU(7) %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
              to 
  LiveReg: %38
  UpdateRegP: SU(7) %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
              to FR32 -1    FR32X -1
  Ready @2c
  SBPort1 +1x12u
  *** Critical resource SBPort1: 1c
  SBPort01 +1x6u
  SBPort15 +1x6u
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A TopLatency SU(7) 17c
  BotQ.A BotLatency SU(7) 2c
BotQ.A @0c
  Retired: 1
  Executed: 1c
  Critical: 1c, 1 SBPort1
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 6 4 
  Cand SU(6) ORDER                              
Pick Bot ORDER     
Scheduling SU(6) %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
Bottom Pressure:
FR32=2
FR32X=2
  LiveReg: %42
  UpdateRegP: SU(6) %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
              to FR32 -1    FR32X -1
  Ready @13c
  SBPort0 +1x12u
  SBPort01 +1x6u
  SBPort05 +1x6u
  SBPort23 +1x6u
  SBPort015 +1x4u
  SBPortAny +2x2u
  BotQ.A BotLatency SU(6) 13c
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 1 SBPort1
  ExpectedLatency: 13c
  - Latency limited.
  SU(5) uops=2
** ScheduleDAGMILive::schedule picking next node
  SU(4) uops=2
Cycle: 1 BotQ.A
Queue BotQ.P: 
Queue BotQ.A: 5 4 
  Cand SU(5) ORDER                              
Pick Bot ORDER     
Scheduling SU(5) %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
Bottom Pressure:
FR32=1
FR32X=1
GR16=2
  LiveReg: %39
  UpdateRegP: SU(5) %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
              to FR32 -1    FR32X -1
  Ready @13c
  SBPort1 +1x12u
  SBPort5 +1x12u
  SBPort01 +1x6u
  SBPort05 +1x6u
  SBPort15 +2x6u
  SBPort015 +2x4u
  SBPortAny +2x2u
BotQ.A @1c
  Retired: 5
  Executed: 2c
  Critical: 2c, 2 SBPort1
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 4 3 
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
Bottom Pressure:
GR16=4
  LiveReg: %37
  UpdateRegP: SU(4) %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
              to FR32 -1    FR32X -1
  Ready @6c
  SBPort1 +1x12u
  SBPort5 +1x12u
  SBPort01 +1x6u
  SBPort05 +1x6u
  SBPort15 +2x6u
  SBPort015 +2x4u
  SBPortAny +2x2u
  *** Max MOps 4 at cycle 1
Cycle: 2 BotQ.A
BotQ.A @2c
  Retired: 7
  Executed: 3c
  Critical: 3c, 3 SBPort1
  ExpectedLatency: 13c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 3 1 
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
Bottom Pressure:
GR16=6
  LiveReg: %39
  UpdateRegP: SU(3) %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
              to 
  LiveReg: %1
  UpdateRegP: SU(3) %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
              to GR16 -2
  Ready @14c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 14c
BotQ.A @2c
  Retired: 8
  Executed: 3c
  Critical: 3c, 3 SBPort1
  ExpectedLatency: 14c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) REG-MAX                            
Pick Bot REG-MAX   
Scheduling SU(2) %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Bottom Pressure:
GR16=4
  Ready @19c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 19c
BotQ.A @2c
  Retired: 9
  Executed: 3c
  Critical: 3c, 3 SBPort1
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
Bottom Pressure:
GR16=6
  LiveReg: %37
  UpdateRegP: SU(1) %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
              to 
  LiveReg: %0
  UpdateRegP: SU(1) %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
              to GR16 -2
  Ready @7c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @2c
  Retired: 10
  Executed: 3c
  Critical: 3c, 3 SBPort1
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
Bottom Pressure:
GR16=4
  Ready @12c
  SBPort23 +1x6u
  SBPortAny +1x2u
  *** Max MOps 4 at cycle 2
Cycle: 3 BotQ.A
BotQ.A @3c
  Retired: 11
  Executed: 3c
  Critical: 3c, 3 SBPort1
  ExpectedLatency: 19c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.6 ***
SU(0):   %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
SU(1):   %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
SU(2):   %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
SU(3):   %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
SU(4):   %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
SU(5):   %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
SU(6):   %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
SU(7):   %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.7 for.cond.cleanup10
  From: %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
    To: JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(1) - ExitSU /  CMP32ri - JCC_1
SU(0):   %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%20
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
  # preds left       : 2
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%20
    SU(0): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.7 ***
SU(0):   %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
SU(1):   CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.8 for.body11
  From: %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
    To: JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=5 Reg=%22
    SU(1): Data Latency=5 Reg=%22
  Single Issue       : false;
SU(1):   MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(0): Data Latency=5 Reg=%22
  Single Issue       : false;
SU(2):   %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=6 Reg=%5
  Single Issue       : false;
SU(3):   %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(0): Data Latency=5 Reg=%22
  Successors:
    SU(4): Data Latency=1 Reg=%23
  Single Issue       : false;
SU(4):   nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 2
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%23
    SU(2): Data Latency=6 Reg=%5
  Successors:
    ExitSU: Ord  Latency=2 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=2 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  Ready @2c
  SBPort0 +1x12u
  *** Critical resource SBPort0: 1c
  SBPort1 +1x12u
  SBPort01 +2x6u
  SBPort05 +1x6u
  SBPort15 +1x6u
  SBPort015 +2x4u
  SBPortAny +2x2u
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 2c
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
  Ready @3c
  SBPort5 +1x12u
  SBPort05 +1x6u
  SBPort15 +1x6u
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
  Ready @8c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
  Ready @1c
  SBPort4 +1x12u
  SBPort23 +1x6u
  SBPortAny +2x2u
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
  Ready @8c
  SBPort23 +1x6u
  *** Critical resource SBPort23: 1c
  SBPortAny +1x2u
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 3 SBPort23
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.8 ***
SU(0):   %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
SU(1):   MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
SU(2):   %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
SU(3):   %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
SU(4):   nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.10 for.inc
  From: %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
    To: JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
 RegionInstrs: 5
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
SU(0):   %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 5
  Depth              : 0
  Height             : 8
  Successors:
    SU(3): Data Latency=5 Reg=%24
    SU(1): Data Latency=5 Reg=%24
  Single Issue       : false;
SU(1):   MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(0): Data Latency=5 Reg=%24
  Single Issue       : false;
SU(2):   %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 6
  Depth              : 0
  Height             : 8
  Successors:
    SU(4): Data Latency=6 Reg=%6
  Single Issue       : false;
SU(3):   %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 3
  Predecessors:
    SU(0): Data Latency=5 Reg=%24
  Successors:
    SU(4): Data Latency=1 Reg=%25
  Single Issue       : false;
SU(4):   nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 2
  Depth              : 6
  Height             : 2
  Predecessors:
    SU(3): Data Latency=1 Reg=%25
    SU(2): Data Latency=6 Reg=%6
  Successors:
    ExitSU: Ord  Latency=2 Artificial
  Single Issue       : false;
ExitSU:   JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 8
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=2 Artificial
Critical Path(GS-RR ): 8
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 4 
  Cand SU(1) ORDER                              
  Cand SU(4) ORDER                              
Pick Bot ORDER     
Scheduling SU(4) nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
  Ready @2c
  SBPort0 +1x12u
  *** Critical resource SBPort0: 1c
  SBPort1 +1x12u
  SBPort01 +2x6u
  SBPort05 +1x6u
  SBPort15 +1x6u
  SBPort015 +2x4u
  SBPortAny +2x2u
  BotQ.A TopLatency SU(4) 6c
  BotQ.A BotLatency SU(4) 2c
BotQ.A @0c
  Retired: 2
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 2c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 3 2 
  Cand SU(1) ORDER                              
  Cand SU(3) ORDER                              
Pick Bot ORDER     
Scheduling SU(3) %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
  Ready @3c
  SBPort5 +1x12u
  SBPort05 +1x6u
  SBPort15 +1x6u
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(3) 3c
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 3c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 2 
  Cand SU(1) ORDER                              
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
  Ready @8c
  SBPort23 +1x6u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 8c
  *** Max MOps 4 at cycle 0
Cycle: 1 BotQ.A
BotQ.A @1c
  Retired: 4
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
  Ready @1c
  SBPort4 +1x12u
  SBPort23 +1x6u
  SBPortAny +2x2u
BotQ.A @1c
  Retired: 5
  Executed: 1c
  Critical: 1c, 1 SBPort0
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
  Ready @8c
  SBPort23 +1x6u
  *** Critical resource SBPort23: 1c
  SBPortAny +1x2u
BotQ.A @1c
  Retired: 6
  Executed: 1c
  Critical: 1c, 3 SBPort23
  ExpectedLatency: 8c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.10 ***
SU(0):   %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
SU(1):   MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
SU(2):   %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
SU(3):   %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
SU(4):   nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16

********** MI Scheduling **********
_Z5test2PfS_S_i:%bb.12 for.inc.1
  From: %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
    To: JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
 RegionInstrs: 2
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Macro fuse: SU(1) - ExitSU /  CMP64ri32 - JCC_1
SU(0):   %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(1): Data Latency=1 Reg=%62
    SU(1): Out  Latency=0
  Single Issue       : false;
SU(1):   CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
  # preds left       : 2
  # succs left       : 1
  # weak succs left  : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=1 Reg=%62
    SU(0): Out  Latency=0
  Successors:
    ExitSU: Ord  Latency=0 Artificial
    ExitSU: Ord  Latency=0 Cluster
  Single Issue       : false;
ExitSU:   JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
  # preds left       : 1
  # succs left       : 0
  # weak preds left  : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Ord  Latency=0 Artificial
    SU(1): Ord  Latency=0 Cluster
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 1 
Scheduling SU(1) CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
  Ready @0c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A TopLatency SU(1) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 0c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
  BotQ.A BotLatency SU(0) 1c
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.12 ***
SU(0):   %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
SU(1):   CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23

********** INTERVALS **********
DH [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
DIL [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
DIH [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
DL [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
HDI [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
HDX [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
SIL [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
SIH [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
HSI [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
%0 [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r weight:0.000000e+00
%1 [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r weight:0.000000e+00
%5 [2224r,2320r:0)  0@2224r weight:0.000000e+00
%6 [2384r,2480r:0)  0@2384r weight:0.000000e+00
%8 [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r weight:0.000000e+00
%9 [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r weight:0.000000e+00
%10 [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r weight:0.000000e+00
%13 [96r,128r:0)  0@96r weight:0.000000e+00
%14 [176r,192r:0)  0@176r weight:0.000000e+00
%20 [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r weight:0.000000e+00
%22 [2192r,2240r:0)  0@2192r weight:0.000000e+00
%23 [2240r,2256r:0)  0@2240r weight:0.000000e+00
%24 [2352r,2400r:0)  0@2352r weight:0.000000e+00
%25 [2400r,2416r:0)  0@2400r weight:0.000000e+00
%29 [640r,672r:0)  0@640r weight:0.000000e+00
%30 [720r,736r:0)  0@720r weight:0.000000e+00
%37 [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r weight:0.000000e+00
%38 [1088r,1168r:0)  0@1088r weight:0.000000e+00
%39 [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r weight:0.000000e+00
%42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:0.000000e+00
%47 [1408r,1584r:0)  0@1408r weight:0.000000e+00
%52 [1648r,1824r:0)  0@1648r weight:0.000000e+00
%57 [1888r,1992r:0)  0@1888r weight:0.000000e+00
%62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:0.000000e+00
RegMasks: 144r 400r 688r 944r 1296r 1376r 1520r 1616r 1760r 1856r 2000r
********** MACHINEINSTRS **********
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
336B	  $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
392B	  $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags

512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

560B	  undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
880B	  $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
936B	  $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

992B	  %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1024B	  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1072B	  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1136B	  %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1168B	  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1248B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1512B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1584B	  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1752B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1824B	  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1992B	  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1

2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2080B	  %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2320B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2480B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2528B	  %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.


block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: BB0[entry]
 - 1: BB1[cond.false.i]
 - 2: BB2[_ZL7gettimev.exit]
 - 3: BB3[for.cond8.preheader]
 - 4: BB8[for.body11]
 - 5: BB9[if.then]
 - 6: BB10[for.inc]
 - 7: BB11[if.then.1]
 - 8: BB12[for.inc.1]
 - 9: BB7[for.cond.cleanup10]
 - 10: BB4[for.cond.cleanup]
 - 11: BB5[cond.false.i64]
 - 12: BB6[_ZL7gettimev.exit70]
loop-detection
 - loop = BB3[for.cond8.preheader]
 - loop = BB8[for.body11]
 - loop = BB8[for.body11]: member = BB9[if.then]
 - loop = BB8[for.body11]: member = BB10[for.inc]
 - loop = BB8[for.body11]: member = BB11[if.then.1]
 - loop = BB8[for.body11]: member = BB12[for.inc.1]
 - loop = BB3[for.cond8.preheader]: member = BB7[for.cond.cleanup10]
compute-mass-in-loop: BB8[for.body11]*
 - node: BB8[for.body11]
  => [ local  ] weight = 1073741824, succ = BB9[if.then]
  => [ local  ] weight = 1073741824, succ = BB10[for.inc]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB9[if.then]
  => assign 8000000000000000 (0000000000000000) to BB10[for.inc]
 - node: BB9[if.then]
  => [ local  ] weight = 2147483648, succ = BB10[for.inc]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB10[for.inc]
 - node: BB10[for.inc]
  => [ local  ] weight = 1073741824, succ = BB11[if.then.1]
  => [ local  ] weight = 1073741824, succ = BB12[for.inc.1]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB11[if.then.1]
  => assign 8000000000000000 (0000000000000000) to BB12[for.inc.1]
 - node: BB11[if.then.1]
  => [ local  ] weight = 2147483648, succ = BB12[for.inc.1]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB12[for.inc.1]
 - node: BB12[for.inc.1]
  => [  exit  ] weight = 67108864, succ = BB7[for.cond.cleanup10]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB8[for.body11]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.cond.cleanup10]
compute-loop-scale: BB8[for.body11]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB8[for.body11]*
 - node: BB8[for.body11]
 - node: BB9[if.then]
 - node: BB10[for.inc]
 - node: BB11[if.then.1]
 - node: BB12[for.inc.1]
compute-mass-in-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 2147483648, succ = BB8[for.body11]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.body11]
 - node: BB8[for.body11]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.cond.cleanup10]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.cond.cleanup10]
 - node: BB7[for.cond.cleanup10]
  => [  exit  ] weight = 67108864, succ = BB4[for.cond.cleanup]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.cond8.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.cond.cleanup]
compute-loop-scale: BB3[for.cond8.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
 - node: BB8[for.body11]
 - node: BB7[for.cond.cleanup10]
compute-mass-in-function
 - node: BB0[entry]
  => [ local  ] weight = 2147483647, succ = BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 1, succ = BB1[cond.false.i]
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to BB1[cond.false.i]
  => assign fffffffe00000000 (0000000000000000) to BB2[_ZL7gettimev.exit]
 - node: BB1[cond.false.i]
  => mass:  00000001ffffffff
 - node: BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 2147483648, succ = BB3[for.cond8.preheader]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB3[for.cond8.preheader]
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.cond.cleanup]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB4[for.cond.cleanup]
 - node: BB4[for.cond.cleanup]
  => [ local  ] weight = 2147483647, succ = BB6[_ZL7gettimev.exit70]
  => [ local  ] weight = 1, succ = BB5[cond.false.i64]
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to BB5[cond.false.i64]
  => assign fffffffc00000004 (0000000000000000) to BB6[_ZL7gettimev.exit70]
 - node: BB5[cond.false.i64]
  => mass:  00000001fffffffc
 - node: BB6[_ZL7gettimev.exit70]
  => mass:  fffffffc00000004
unwrap-loop-package: BB3[for.cond8.preheader]*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - BB3[for.cond8.preheader]: 1.0 => 31.99999999
 - BB8[for.body11]: 32.0 => 1024.0
 - BB7[for.cond.cleanup10]: 1.0 => 31.99999999
unwrap-loop-package: BB8[for.body11]*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - BB8[for.body11]: 1.0 => 1024.0
 - BB9[if.then]: 0.5 => 511.9999998
 - BB10[for.inc]: 1.0 => 1024.0
 - BB11[if.then.1]: 0.5 => 511.9999998
 - BB12[for.inc.1]: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - BB0[entry]: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - BB2[_ZL7gettimev.exit]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB9[if.then]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB11[if.then.1]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB7[for.cond.cleanup10]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - BB0[entry]: float = 1.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.00000000046566, int = 8
 - BB2[_ZL7gettimev.exit]: float = 1.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 32.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 1.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.00000000046566, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 1.0, int = 17179869174
 - BB7[for.cond.cleanup10]: float = 32.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, int = 17592186042367
 - BB9[if.then]: float = 512.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, int = 17592186042367
 - BB11[if.then.1]: float = 512.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, int = 17592186042367

********** COMPUTING LIVE DEBUG VARIABLES: _Z5test2PfS_S_i **********
********** DEBUG VARIABLES **********
********** DEBUG LABELS **********
********** GREEDY REGISTER ALLOCATION **********
********** Function: _Z5test2PfS_S_i
********** Compute Spill Weights **********
********** Function: _Z5test2PfS_S_i
********** INTERVALS **********
DH [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
DIL [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
DIH [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
DL [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
HDI [0B,48r:0)[112r,144r:2)[336r,400r:11)[656r,688r:1)[880r,944r:10)[1248r,1296r:9)[1344r,1376r:8)[1512r,1520r:7)[1584r,1616r:6)[1752r,1760r:5)[1824r,1856r:4)[1992r,2000r:3)  0@0B-phi 1@656r 2@112r 3@1992r 4@1824r 5@1752r 6@1584r 7@1512r 8@1344r 9@1248r 10@880r 11@336r
HDX [0B,16r:0)[392r,400r:2)[936r,944r:1)[1280r,1296r:6)[1504r,1520r:5)[1744r,1760r:4)[1984r,2000r:3)  0@0B-phi 1@936r 2@392r 3@1984r 4@1744r 5@1504r 6@1280r
SIL [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
SIH [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
HSI [0B,32r:0)[128r,144r:10)[352r,400r:9)[672r,688r:8)[896r,944r:7)[1264r,1296r:6)[1488r,1520r:5)[1600r,1616r:2)[1728r,1760r:4)[1840r,1856r:1)[1968r,2000r:3)  0@0B-phi 1@1840r 2@1600r 3@1968r 4@1728r 5@1488r 6@1264r 7@896r 8@672r 9@352r 10@128r
%0 [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r weight:1.488095e-03
%1 [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r weight:1.453488e-03
%5 [2224r,2320r:0)  0@2224r weight:5.161290e+00
%6 [2384r,2480r:0)  0@2384r weight:5.161290e+00
%8 [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r weight:1.579763e+00
%9 [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r weight:1.560701e+00
%10 [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r weight:2.312764e+00
%13 [96r,128r:0)  0@96r weight:2.337963e-03
%14 [176r,192r:0)  0@176r weight:INF
%20 [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r weight:2.102804e-01
%22 [2192r,2240r:0)  0@2192r weight:6.857143e+00
%23 [2240r,2256r:0)  0@2240r weight:INF
%24 [2352r,2400r:0)  0@2352r weight:6.857143e+00
%25 [2400r,2416r:0)  0@2400r weight:INF
%29 [640r,672r:0)  0@640r weight:2.337963e-03
%30 [720r,736r:0)  0@720r weight:INF
%37 [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r weight:8.064516e-03
%38 [1088r,1168r:0)  0@1088r weight:4.166667e-03
%39 [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r weight:8.620690e-03
%42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:9.237804e-03
%47 [1408r,1584r:0)  0@1408r weight:5.260417e-03
%52 [1648r,1824r:0)  0@1648r weight:5.260417e-03
%57 [1888r,1992r:0)  0@1888r weight:4.007936e-03
%62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:1.636446e+01
RegMasks: 144r 400r 688r 944r 1296r 1376r 1520r 1616r 1760r 1856r 2000r
********** MACHINEINSTRS **********
# Machine code for function _Z5test2PfS_S_i: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=16, align=8, at location [SP+8]
  fi#1: dead
Constant Pool:
  cp#0: 1.000000e-09, align=8
Function Live Ins: $rdi in %8, $rsi in %9, $rdx in %10

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rsi, $rdx
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY killed $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
336B	  $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
392B	  $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]

432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)

448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags

512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)

560B	  undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)

608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY killed $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
880B	  $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
936B	  $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit killed $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]

976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4

992B	  %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1024B	  %37:gr64 = nsw SUB64rr %37:gr64(tied-def 0), %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1072B	  %39:gr64 = nsw SUB64rr %39:gr64(tied-def 0), %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %42:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1136B	  %42:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1168B	  %42:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1248B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = COPY %42:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit killed $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY killed $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1512B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1584B	  $rdi = COPY %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY killed $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1752B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1824B	  $rdi = COPY %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY killed $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1992B	  $rdi = COPY %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1

2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)

2080B	  %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3

2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)

2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11

2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)

2320B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14

2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)

2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11

2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)

2480B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14

2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)

2528B	  %62:gr64_nosp = nuw nsw ADD64ri8 %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5

# End machine code for function _Z5test2PfS_S_i.


selectOrSplit GR64:%10 [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r weight:2.312764e+00 w=2.312764e+00
AllocationOrder(GR64) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
hints: $rdx
missed hint $rdx
assigning %10 to $rbx: BH [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r BL [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r HBX [16r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@16r

selectOrSplit GR64:%9 [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r weight:1.560701e+00 w=1.560701e+00
hints: $rsi
missed hint $rsi
$r14 is available at cost 1
$rbp would clobber CSR $rbp
assigning %9 to $r14: R14B [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r R14BH [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r R14WH [32r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@32r

selectOrSplit GR64:%8 [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r weight:1.579763e+00 w=1.579763e+00
hints: $rdi
missed hint $rdi
$r15 is available at cost 1
$rbp would clobber CSR $rbp
assigning %8 to $r15: R15B [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r R15BH [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r R15WH [48r,240B:0)[432B,592B:0)[2048B,2608B:0)  0@48r

selectOrSplit GR64:%13 [96r,128r:0)  0@96r weight:2.337963e-03 w=2.337963e-03
hints: $rsi
assigning %13 to $rsi: SIL [96r,128r:0)  0@96r SIH [96r,128r:0)  0@96r HSI [96r,128r:0)  0@96r

selectOrSplit GR32:%14 [176r,192r:0)  0@176r weight:INF w=INF
AllocationOrder(GR32) = [ $eax $ecx $edx $esi $edi $r8d $r9d $r10d $r11d $ebx $ebp $r14d $r15d $r12d $r13d ]
hints: $eax
assigning %14 to $eax: AH [176r,192r:0)  0@176r AL [176r,192r:0)  0@176r HAX [176r,192r:0)  0@176r

selectOrSplit GR64:%29 [640r,672r:0)  0@640r weight:2.337963e-03 w=2.337963e-03
hints: $rsi
assigning %29 to $rsi: SIL [640r,672r:0)  0@640r SIH [640r,672r:0)  0@640r HSI [640r,672r:0)  0@640r

selectOrSplit GR32:%30 [720r,736r:0)  0@720r weight:INF w=INF
hints: $eax
assigning %30 to $eax: AH [720r,736r:0)  0@720r AL [720r,736r:0)  0@720r HAX [720r,736r:0)  0@720r

selectOrSplit FR64:%42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:9.237804e-03 w=9.237804e-03
AllocationOrder(FR64) = [ $xmm0 $xmm1 $xmm2 $xmm3 $xmm4 $xmm5 $xmm6 $xmm7 $xmm8 $xmm9 $xmm10 $xmm11 $xmm12 $xmm13 $xmm14 $xmm15 ]
hints: $xmm0
RS_Assign Cascade 0
wait for second round
queuing new interval: %42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:9.237804e-03

selectOrSplit GR64:%47 [1408r,1584r:0)  0@1408r weight:5.260417e-03 w=5.260417e-03
hints: $rdi $rax
missed hint $rdi
assigning %47 to $rbx: BH [1408r,1584r:0)  0@1408r BL [1408r,1584r:0)  0@1408r HBX [1408r,1584r:0)  0@1408r

selectOrSplit GR64:%52 [1648r,1824r:0)  0@1648r weight:5.260417e-03 w=5.260417e-03
hints: $rdi $rax
missed hint $rdi
assigning %52 to $rbx: BH [1648r,1824r:0)  0@1648r BL [1648r,1824r:0)  0@1648r HBX [1648r,1824r:0)  0@1648r

selectOrSplit GR64:%57 [1888r,1992r:0)  0@1888r weight:4.007936e-03 w=4.007936e-03
hints: $rax $rdi
assigning %57 to $rax: AH [1888r,1992r:0)  0@1888r AL [1888r,1992r:0)  0@1888r HAX [1888r,1992r:0)  0@1888r

selectOrSplit GR64:%1 [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r weight:1.453488e-03 w=1.453488e-03
$r12 is available at cost 1
$rbp would clobber CSR $rbp
assigning %1 to $r12: R12B [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r R12BH [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r R12WH [464r,784B:0)[976B,1072r:0)[2048B,2608B:0)  0@464r

selectOrSplit GR64:%0 [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r weight:1.488095e-03 w=1.488095e-03
$r13 is available at cost 1
$rbp would clobber CSR $rbp
assigning %0 to $r13: R13B [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r R13BH [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r R13WH [448r,784B:0)[976B,1024r:0)[2048B,2608B:0)  0@448r

selectOrSplit GR64_with_sub_8bit:%20 [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r weight:2.102804e-01 w=2.102804e-01
AllocationOrder(GR64_with_sub_8bit) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
assigning %20 to $rax: AH [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r AL [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r HAX [480r,512B:0)[512B,592B:1)[2048B,2080r:1)[2080r,2160B:2)[2160B,2608B:1)  0@480r 1@512B-phi 2@2080r

selectOrSplit GR64_NOSP:%62 [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi weight:1.636446e+01 w=1.636446e+01
AllocationOrder(GR64_NOSP) = [ $rax $rcx $rdx $rsi $rdi $r8 $r9 $r10 $r11 $rbx $r14 $r15 $r12 $r13 $rbp ]
assigning %62 to $rcx: CH [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi CL [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi HCX [560r,592B:0)[2160B,2528r:2)[2528r,2608B:1)  0@560r 1@2528r 2@2160B-phi

selectOrSplit FR32:%5 [2224r,2320r:0)  0@2224r weight:5.161290e+00 w=5.161290e+00
AllocationOrder(FR32) = [ $xmm0 $xmm1 $xmm2 $xmm3 $xmm4 $xmm5 $xmm6 $xmm7 $xmm8 $xmm9 $xmm10 $xmm11 $xmm12 $xmm13 $xmm14 $xmm15 ]
assigning %5 to $xmm0: XMM0 [2224r,2320r:0)  0@2224r

selectOrSplit FR32:%6 [2384r,2480r:0)  0@2384r weight:5.161290e+00 w=5.161290e+00
assigning %6 to $xmm0: XMM0 [2384r,2480r:0)  0@2384r

selectOrSplit GR64:%37 [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r weight:8.064516e-03 w=8.064516e-03
assigning %37 to $rax: AH [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r AL [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r HAX [992r,1024r:0)[1024r,1088r:1)  0@992r 1@1024r

selectOrSplit GR64:%39 [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r weight:8.620690e-03 w=8.620690e-03
assigning %39 to $rcx: CH [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r CL [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r HCX [1040r,1072r:0)[1072r,1104r:1)  0@1040r 1@1072r

selectOrSplit FR64:%38 [1088r,1168r:0)  0@1088r weight:4.166667e-03 w=4.166667e-03
assigning %38 to $xmm0: XMM0 [1088r,1168r:0)  0@1088r

selectOrSplit GR32:%22 [2192r,2240r:0)  0@2192r weight:6.857143e+00 w=6.857143e+00
assigning %22 to $edx: DH [2192r,2240r:0)  0@2192r DL [2192r,2240r:0)  0@2192r HDX [2192r,2240r:0)  0@2192r

selectOrSplit FR32:%23 [2240r,2256r:0)  0@2240r weight:INF w=INF
assigning %23 to $xmm1: XMM1 [2240r,2256r:0)  0@2240r

selectOrSplit GR32:%24 [2352r,2400r:0)  0@2352r weight:6.857143e+00 w=6.857143e+00
assigning %24 to $edx: DH [2352r,2400r:0)  0@2352r DL [2352r,2400r:0)  0@2352r HDX [2352r,2400r:0)  0@2352r

selectOrSplit FR32:%25 [2400r,2416r:0)  0@2400r weight:INF w=INF
assigning %25 to $xmm1: XMM1 [2400r,2416r:0)  0@2400r

selectOrSplit FR64:%42 [1104r,1136r:2)[1136r,1168r:0)[1168r,1360r:1)  0@1136r 1@1168r 2@1104r weight:9.237804e-03 w=9.237804e-03
hints: $xmm0
RS_Split Cascade 0
Analyze counted 4 instrs in 1 blocks, through 0 blocks.
tryLocalSplit:  1104r 1136r 1168r 1360r
7 regmasks in block: 1296r:1168r-1360r
$xmm0 1104r-1136r i=4.166667e-03 w=6.696429e-03 (best) extend
$xmm0 1104r-1168r i=4.166667e-03 w=8.333334e-03 (best) extend
$xmm0 1104r-1360r i=INF all
$xmm1 1104r-1136r i=0.000000e+00 w=6.696429e-03 (best) extend
$xmm1 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm1 1104r-1360r i=INF all
$xmm2 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm2 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm2 1104r-1360r i=INF all
$xmm3 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm3 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm3 1104r-1360r i=INF all
$xmm4 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm4 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm4 1104r-1360r i=INF all
$xmm5 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm5 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm5 1104r-1360r i=INF all
$xmm6 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm6 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm6 1104r-1360r i=INF all
$xmm7 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm7 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm7 1104r-1360r i=INF all
$xmm8 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm8 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm8 1104r-1360r i=INF all
$xmm9 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm9 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm9 1104r-1360r i=INF all
$xmm10 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm10 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm10 1104r-1360r i=INF all
$xmm11 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm11 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm11 1104r-1360r i=INF all
$xmm12 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm12 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm12 1104r-1360r i=INF all
$xmm13 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm13 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm13 1104r-1360r i=INF all
$xmm14 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm14 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm14 1104r-1360r i=INF all
$xmm15 1104r-1136r i=0.000000e+00 w=6.696429e-03 extend
$xmm15 1104r-1168r i=0.000000e+00 w=8.333334e-03 (best) extend
$xmm15 1104r-1360r i=INF all
Best local split range: 1104r-1168r, 8.166504e-03, 3 instrs
    enterIntvBefore 1104r: not live
    leaveIntvAfter 1168r: valno 1
    useIntv [1104B;1176r): [1104B;1176r):1
  blit [1104r,1136r:2): [1104r;1136r)=1(%64):2
  blit [1136r,1168r:0): [1136r;1168r)=1(%64):0
  blit [1168r,1360r:1): [1168r;1176r)=1(%64):1 [1176r;1360r)=0(%63):0
  rewr %bb.6	1136r:1	%64:fr64 = nofpexcept MULSDrm %42:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  rewr %bb.6	1104r:1	%64:fr64 = nofpexcept CVTSI642SDrr %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
  rewr %bb.6	1168r:1	%64:fr64 = nofpexcept ADDSDrr %42:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  rewr %bb.6	1360B:0	$xmm0 = COPY %63:fr64, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
  rewr %bb.6	1168B:1	%64:fr64 = nofpexcept ADDSDrr %64:fr64(tied-def 0), %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
  rewr %bb.6	1136B:1	%64:fr64 = nofpexcept MULSDrm %64:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
  rewr %bb.6	1176B:1	%63:fr64 = COPY %64:fr64
Tagging non-progress ranges: %64
queuing new interval: %63 [1176r,1360r:0)  0@1176r weight:3.458904e-03
queuing new interval: %64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1176r:2)  0@1104r 1@1136r 2@1168r weight:INF

selectOrSplit FR64:%63 [1176r,1360r:0)  0@1176r weight:3.458904e-03 w=3.458904e-03
hints: $xmm0
RS_Assign Cascade 0
wait for second round
queuing new interval: %63 [1176r,1360r:0)  0@1176r weight:3.458904e-03

selectOrSplit FR64:%64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1176r:2)  0@1104r 1@1136r 2@1168r weight:INF w=INF
assigning %64 to $xmm1: XMM1 [1104r,1136r:0)[1136r,1168r:1)[1168r,1176r:2)  0@1104r 1@1136r 2@1168r

selectOrSplit FR64:%63 [1176r,1360r:0)  0@1176r weight:3.458904e-03 w=3.458904e-03
hints: $xmm0 $xmm1
RS_Split Cascade 0
Analyze counted 2 instrs in 1 blocks, through 0 blocks.
Inline spilling FR64:%63 [1176r,1360r:0)  0@1176r weight:3.458904e-03
From original %42
Merged spilled regs: SS#2 [1176r,1360r:0)  0@x weight:0.000000e+00
spillAroundUses %63
	merged orig valno 1: SS#2 [1168r,1360r:0)  0@x weight:0.000000e+00
Checking redundant spills for 2@1168r in %64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1176r:2)  0@1104r 1@1136r 2@1168r weight:INF
Merged to stack int: SS#2 [1168r,1360r:0)  0@x weight:0.000000e+00
Checking redundant spills for 0@1176r in %63 [1176r,1360r:0)  0@1176r weight:3.458904e-03
	hoisted: 1168r	MOVSDmr %stack.2, 1, $noreg, 0, $noreg, %64:fr64 :: (store 8 into %stack.2)
	folded:   1360r	$xmm0 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load 8 from %stack.2)
Eliminating 1 dead defs
Deleting dead def 1176r	dead %63:fr64 = COPY %64:fr64
unassigning %64 from $xmm1: XMM1
Shrink: %64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1176r:2)  0@1104r 1@1136r 2@1168r weight:INF
Shrunk: %64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1172r:2)  0@1104r 1@1136r 2@1168r weight:INF

selectOrSplit FR64:%64 [1104r,1136r:0)[1136r,1168r:1)[1168r,1172r:2)  0@1104r 1@1136r 2@1168r weight:INF w=INF
assigning %64 to $xmm1: XMM1 [1104r,1136r:0)[1136r,1168r:1)[1168r,1172r:2)  0@1104r 1@1136r 2@1168r
Trying to reconcile hints for: %10($rbx)
%10($rbx) is recolorable.
Trying to reconcile hints for: %9($r14)
%9($r14) is recolorable.
Trying to reconcile hints for: %8($r15)
%8($r15) is recolorable.
Trying to reconcile hints for: %47($rbx)
%47($rbx) is recolorable.
Trying to reconcile hints for: %52($rbx)
%52($rbx) is recolorable.

For Slot2 and VN1:
Equal spills in BB: 6 
Orders size is 1
BB6,
Finally inserted spills in BB: 
Finally removed spills in BB: 
********** REWRITE VIRTUAL REGISTERS **********
********** Function: _Z5test2PfS_S_i
********** REGISTER MAP **********
[%0 -> $r13] GR64
[%1 -> $r12] GR64
[%5 -> $xmm0] FR32
[%6 -> $xmm0] FR32
[%8 -> $r15] GR64
[%9 -> $r14] GR64
[%10 -> $rbx] GR64
[%13 -> $rsi] GR64
[%14 -> $eax] GR32
[%20 -> $rax] GR64_with_sub_8bit
[%22 -> $edx] GR32
[%23 -> $xmm1] FR32
[%24 -> $edx] GR32
[%25 -> $xmm1] FR32
[%29 -> $rsi] GR64
[%30 -> $eax] GR32
[%37 -> $rax] GR64
[%38 -> $xmm0] FR64
[%39 -> $rcx] GR64
[%47 -> $rbx] GR64
[%52 -> $rbx] GR64
[%57 -> $rax] GR64
[%62 -> $rcx] GR64_NOSP
[%64 -> $xmm1] FR64
[%42 -> fi#2] FR64
[%63 -> fi#2] FR64

0B	bb.0.entry:
	  successors: %bb.2(0x7fffffff), %bb.1(0x00000001); %bb.2(100.00%), %bb.1(0.00%)
	  liveins: $rdi, $rdx, $rsi
16B	  %10:gr64 = COPY $rdx
32B	  %9:gr64 = COPY $rsi
48B	  %8:gr64 = COPY $rdi
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
96B	  %13:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
112B	  $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
128B	  $rsi = COPY killed %13:gr64, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
144B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
176B	  %14:gr32 = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
192B	  TEST32rr killed %14:gr32, %14:gr32, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
208B	  JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
224B	  JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> renamable $rbx = COPY $rdx
> renamable $r14 = COPY $rsi
> renamable $r15 = COPY $rdi
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
> renamable $rsi = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
> $edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
> $rsi = COPY killed renamable $rsi, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Identity copy: $rsi = COPY killed renamable $rsi, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  deleted.
> CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
> renamable $eax = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
Identity copy: renamable $eax = COPY $eax, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
  deleted.
> TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> JCC_1 %bb.2, 4, implicit killed $eflags, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> JMP_1 %bb.1, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
240B	bb.1.cond.false.i:
	; predecessors: %bb.0

256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
336B	  $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
352B	  $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
384B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
392B	  $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
400B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
416B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> $rdi = MOV32ri64 @.str.4, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> $rsi = MOV32ri64 @.str.5, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> $edx = MOV32ri 75, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !17; ./fasttime.h:75:3 @[ test2.cpp:17:22 ]
432B	bb.2._ZL7gettimev.exit:
	; predecessors: %bb.0
	  successors: %bb.3(0x80000000); %bb.3(100.00%)
	  liveins: $rbx, $r14, $r15
448B	  %0:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
464B	  %1:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
480B	  undef %20.sub_32bit:gr64_with_sub_8bit = MOV32r0 implicit-def dead $eflags
> renamable $r13 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
> renamable $r12 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
> renamable $eax = MOV32r0 implicit-def dead $eflags, implicit-def $rax
512B	bb.3.for.cond8.preheader:
	; predecessors: %bb.2, %bb.7
	  successors: %bb.8(0x80000000); %bb.8(100.00%)
	  liveins: $rax, $rbx, $r12, $r13, $r14, $r15
560B	  undef %62.sub_32bit:gr64_nosp = MOV32r0 implicit-def dead $eflags
576B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5
> renamable $ecx = MOV32r0 implicit-def dead $eflags, implicit-def $rcx
> JMP_1 %bb.8, debug-location !20; test2.cpp:22:5
592B	bb.4.for.cond.cleanup:
	; predecessors: %bb.7
	  successors: %bb.6(0x7fffffff), %bb.5(0x00000001); %bb.6(100.00%), %bb.5(0.00%)
	  liveins: $r12, $r13
608B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
640B	  %29:gr64 = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
656B	  $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
672B	  $rsi = COPY killed %29:gr64, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
688B	  CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
704B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
720B	  %30:gr32 = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
736B	  TEST32rr killed %30:gr32, %30:gr32, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
752B	  JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
768B	  JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
> renamable $rsi = LEA64r %stack.0.retval.i61, 1, $noreg, 0, $noreg
> $edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
> $rsi = COPY killed renamable $rsi, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Identity copy: $rsi = COPY killed renamable $rsi, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  deleted.
> CALL64pcrel32 @clock_gettime, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit $rsi, implicit-def $rsp, implicit-def $ssp, implicit-def $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
> renamable $eax = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
Identity copy: renamable $eax = COPY $eax, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
  deleted.
> TEST32rr killed renamable $eax, renamable $eax, implicit-def $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> JCC_1 %bb.6, 4, implicit killed $eflags, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> JMP_1 %bb.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
784B	bb.5.cond.false.i64:
	; predecessors: %bb.4

800B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
880B	  $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
896B	  $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
928B	  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
936B	  $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
944B	  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
960B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> $rdi = MOV32ri64 @.str.4, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> $rsi = MOV32ri64 @.str.5, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> $edx = MOV32ri 75, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !23; ./fasttime.h:75:3 @[ test2.cpp:60:22 ]
976B	bb.6._ZL7gettimev.exit70:
	; predecessors: %bb.4
	  liveins: $r12, $r13
992B	  %37:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1024B	  %37:gr64 = nsw SUB64rr killed %37:gr64(tied-def 0), killed %0:gr64, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
1040B	  %39:gr64 = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
1072B	  %39:gr64 = nsw SUB64rr killed %39:gr64(tied-def 0), killed %1:gr64, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
1088B	  %38:fr64 = nofpexcept CVTSI642SDrr killed %37:gr64, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
1104B	  %64:fr64 = nofpexcept CVTSI642SDrr killed %39:gr64, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
1136B	  %64:fr64 = nofpexcept MULSDrm killed %64:fr64(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
1168B	  %64:fr64 = nofpexcept ADDSDrr killed %64:fr64(tied-def 0), killed %38:fr64, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
1172B	  MOVSDmr %stack.2, 1, $noreg, 0, $noreg, killed %64:fr64 :: (store 8 into %stack.2)
1184B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1248B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1264B	  $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1280B	  $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1296B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1312B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
1328B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1344B	  $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1360B	  $xmm0 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load 8 from %stack.2)
1376B	  CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1392B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1408B	  %47:gr64 = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
1424B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1488B	  $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1504B	  $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1512B	  $rdi = COPY %47:gr64, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1520B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1536B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
1552B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1584B	  $rdi = COPY killed %47:gr64, debug-location !42; test2.cpp:64:39
1600B	  $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
1616B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
1632B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
1648B	  %52:gr64 = COPY $rax, debug-location !42; test2.cpp:64:39
1664B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1728B	  $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1744B	  $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1752B	  $rdi = COPY %52:gr64, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1760B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1776B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
1792B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1824B	  $rdi = COPY killed %52:gr64, debug-location !45; test2.cpp:64:55
1840B	  $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
1856B	  CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
1872B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
1888B	  %57:gr64 = COPY $rax, debug-location !45; test2.cpp:64:55
1904B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1968B	  $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1984B	  $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
1992B	  $rdi = COPY killed %57:gr64, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2000B	  CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2016B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
2032B	  RET 0, debug-location !48; test2.cpp:65:1
> renamable $rax = MOV64rm %stack.0.retval.i61, 1, $noreg, 0, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
> renamable $rax = nsw SUB64rr killed renamable $rax(tied-def 0), killed renamable $r13, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
> renamable $rcx = MOV64rm %stack.0.retval.i61, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
> renamable $rcx = nsw SUB64rr killed renamable $rcx(tied-def 0), killed renamable $r12, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
> renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
> renamable $xmm1 = nofpexcept CVTSI642SDrr killed renamable $rcx, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
> renamable $xmm1 = nofpexcept MULSDrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
> renamable $xmm1 = nofpexcept ADDSDrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
> MOVSDmr %stack.2, 1, $noreg, 0, $noreg, killed renamable $xmm1 :: (store 8 into %stack.2)
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> $rdi = MOV32ri64 @_ZSt4cout, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> $rsi = MOV32ri64 @.str, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> $rdx = MOV32ri64 47, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
> $rdi = MOV32ri64 @_ZSt4cout, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
> $xmm0 = MOVSDrm_alt %stack.2, 1, $noreg, 0, $noreg :: (load 8 from %stack.2)
> CALL64pcrel32 @_ZNSo9_M_insertIdEERSoT_, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $xmm0, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
> renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> $rsi = MOV32ri64 @.str.1, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> $rdx = MOV32ri64 8, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> $rdi = COPY renamable $rbx, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
> $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
> $esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
> CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !42; test2.cpp:64:39
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !42; test2.cpp:64:39
> renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> $rsi = MOV32ri64 @.str.2, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> $rdx = MOV32ri64 5, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> $rdi = COPY renamable $rbx, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
> $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
> $esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
> CALL64pcrel32 @_ZNSolsEi, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit-def $rsp, implicit-def $ssp, implicit-def $rax, debug-location !45; test2.cpp:64:55
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !45; test2.cpp:64:55
> renamable $rax = COPY $rax, debug-location !45; test2.cpp:64:55
Identity copy: renamable $rax = COPY $rax, debug-location !45; test2.cpp:64:55
  deleted.
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> $rsi = MOV32ri64 @.str.3, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> $rdx = MOV32ri64 2, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> CALL64pcrel32 @_ZSt16__ostream_insertIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_PKS3_l, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
> RET 0, debug-location !48; test2.cpp:65:1
2048B	bb.7.for.cond.cleanup10:
	; predecessors: %bb.12
	  successors: %bb.4(0x04000000), %bb.3(0x7c000000); %bb.4(3.12%), %bb.3(96.88%)
	  liveins: $rax, $rbx, $r12, $r13, $r14, $r15
2080B	  %20.sub_32bit:gr64_with_sub_8bit = nuw nsw ADD32ri8 killed %20.sub_32bit:gr64_with_sub_8bit(tied-def 0), 1, implicit-def dead $eflags, debug-location !49; test2.cpp:18:27
2096B	  CMP32ri %20.sub_32bit:gr64_with_sub_8bit, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
2128B	  JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
2144B	  JMP_1 %bb.3, debug-location !19; test2.cpp:18:3
> renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
> CMP32ri renamable $eax, 20000000, implicit-def $eflags, debug-location !50; test2.cpp:18:21
> JCC_1 %bb.4, 4, implicit killed $eflags, debug-location !19; test2.cpp:18:3
> JMP_1 %bb.3, debug-location !19; test2.cpp:18:3
2160B	bb.8.for.body11:
	; predecessors: %bb.3, %bb.12
	  successors: %bb.9(0x40000000), %bb.10(0x40000000); %bb.9(50.00%), %bb.10(50.00%)
	  liveins: $rax, $rbx, $rcx, $r12, $r13, $r14, $r15
2192B	  %22:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
2208B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, %22:gr32, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
2224B	  %5:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
2240B	  %23:fr32 = MOVDI2SSrr killed %22:gr32, debug-location !60; test2.cpp:34:18
2256B	  nofpexcept UCOMISSrr %5:fr32, killed %23:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2272B	  JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2288B	  JMP_1 %bb.9, debug-location !59; test2.cpp:34:11
> renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
> MOV32mr renamable $rbx, 4, renamable $rcx, 0, $noreg, renamable $edx, debug-location !58 :: (store 4 into %ir.10, align 8, !tbaa !54); test2.cpp:32:12
> renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
> renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
> nofpexcept UCOMISSrr renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
> JCC_1 %bb.10, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
> JMP_1 %bb.9, debug-location !59; test2.cpp:34:11
2304B	bb.9.if.then:
	; predecessors: %bb.8
	  successors: %bb.10(0x80000000); %bb.10(100.00%)
	  liveins: $rax, $rbx, $rcx, $r12, $r13, $r14, $r15, $xmm0
2320B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 0, $noreg, killed %5:fr32, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14
> MOVSSmr renamable $rbx, 4, renamable $rcx, 0, $noreg, killed renamable $xmm0, debug-location !62 :: (store 4 into %ir.15, align 8, !tbaa !54); test2.cpp:35:14
2336B	bb.10.for.inc:
	; predecessors: %bb.8, %bb.9
	  successors: %bb.11(0x40000000), %bb.12(0x40000000); %bb.11(50.00%), %bb.12(50.00%)
	  liveins: $rax, $rbx, $rcx, $r12, $r13, $r14, $r15
2352B	  %24:gr32 = MOV32rm %8:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
2368B	  MOV32mr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, %24:gr32, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
2384B	  %6:fr32 = MOVSSrm_alt %9:gr64, 4, %62:gr64_nosp, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
2400B	  %25:fr32 = MOVDI2SSrr killed %24:gr32, debug-location !60; test2.cpp:34:18
2416B	  nofpexcept UCOMISSrr %6:fr32, killed %25:fr32, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
2432B	  JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
2448B	  JMP_1 %bb.11, debug-location !59; test2.cpp:34:11
> renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
> MOV32mr renamable $rbx, 4, renamable $rcx, 4, $noreg, renamable $edx, debug-location !58 :: (store 4 into %ir.20, !tbaa !54); test2.cpp:32:12
> renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
> renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
> nofpexcept UCOMISSrr renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr, debug-location !61; test2.cpp:34:16
> JCC_1 %bb.12, 6, implicit killed $eflags, debug-location !59; test2.cpp:34:11
> JMP_1 %bb.11, debug-location !59; test2.cpp:34:11
2464B	bb.11.if.then.1:
	; predecessors: %bb.10
	  successors: %bb.12(0x80000000); %bb.12(100.00%)
	  liveins: $rax, $rbx, $rcx, $r12, $r13, $r14, $r15, $xmm0
2480B	  MOVSSmr %10:gr64, 4, %62:gr64_nosp, 4, $noreg, killed %6:fr32, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14
> MOVSSmr renamable $rbx, 4, renamable $rcx, 4, $noreg, killed renamable $xmm0, debug-location !62 :: (store 4 into %ir.25, !tbaa !54); test2.cpp:35:14
2496B	bb.12.for.inc.1:
	; predecessors: %bb.10, %bb.11
	  successors: %bb.7(0x04000000), %bb.8(0x7c000000); %bb.7(3.12%), %bb.8(96.88%)
	  liveins: $rax, $rbx, $rcx, $r12, $r13, $r14, $r15
2528B	  %62:gr64_nosp = nuw nsw ADD64ri8 killed %62:gr64_nosp(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
2544B	  CMP64ri32 %62:gr64_nosp, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
2576B	  JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
2592B	  JMP_1 %bb.8, debug-location !20; test2.cpp:22:5
> renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
> CMP64ri32 renamable $rcx, 1024, implicit-def $eflags, debug-location !65; test2.cpp:22:23
> JCC_1 %bb.7, 4, implicit killed $eflags, debug-location !20; test2.cpp:22:5
> JMP_1 %bb.8, debug-location !20; test2.cpp:22:5
********** EMITTING LIVE DEBUG VARIABLES **********
********** EMITTING LIVE DEBUG LABELS **********
********** Stack Slot Coloring **********
********** Function: _Z5test2PfS_S_i
Spill slot intervals:
SS#2 [1168r,1360r:0)  0@x weight:2.000000e+00

Color spill slot intervals:
Assigning fi#2 to fi#2

Spill slots after coloring:
SS#2 [1168r,1360r:0)  0@x weight:2.000000e+00

MCP: BackwardCopyPropagateBlock entry
MCP: ForwardCopyPropagateBlock entry
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rdx
MCP: Copy is a deletion candidate:   renamable $r14 = COPY $rsi
MCP: Copy is a deletion candidate:   renamable $r15 = COPY $rdi
MCP: BackwardCopyPropagateBlock cond.false.i
MCP: ForwardCopyPropagateBlock cond.false.i
MCP: BackwardCopyPropagateBlock _ZL7gettimev.exit
MCP: ForwardCopyPropagateBlock _ZL7gettimev.exit
MCP: BackwardCopyPropagateBlock for.cond8.preheader
MCP: ForwardCopyPropagateBlock for.cond8.preheader
MCP: BackwardCopyPropagateBlock for.cond.cleanup
MCP: ForwardCopyPropagateBlock for.cond.cleanup
MCP: BackwardCopyPropagateBlock cond.false.i64
MCP: ForwardCopyPropagateBlock cond.false.i64
MCP: BackwardCopyPropagateBlock _ZL7gettimev.exit70
MCP: ForwardCopyPropagateBlock _ZL7gettimev.exit70
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Replacing $rbx
     with $rax
     in $rdi = COPY renamable $rbx, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
     from renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: After replacement: $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]

MCP: Copy is a deletion candidate:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Replacing $rbx
     with $rax
     in $rdi = COPY renamable $rbx, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
     from renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: After replacement: $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]

MCP: Copy is a deletion candidate:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: BackwardCopyPropagateBlock for.cond.cleanup10
MCP: ForwardCopyPropagateBlock for.cond.cleanup10
MCP: BackwardCopyPropagateBlock for.body11
MCP: ForwardCopyPropagateBlock for.body11
MCP: BackwardCopyPropagateBlock if.then
MCP: ForwardCopyPropagateBlock if.then
MCP: BackwardCopyPropagateBlock for.inc
MCP: ForwardCopyPropagateBlock for.inc
MCP: BackwardCopyPropagateBlock if.then.1
MCP: ForwardCopyPropagateBlock if.then.1
MCP: BackwardCopyPropagateBlock for.inc.1
MCP: ForwardCopyPropagateBlock for.inc.1
******** Post-regalloc Machine LICM: _Z5test2PfS_S_i ********

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: BB0[entry]
 - 1: BB1[cond.false.i]
 - 2: BB2[_ZL7gettimev.exit]
 - 3: BB3[for.cond8.preheader]
 - 4: BB8[for.body11]
 - 5: BB9[if.then]
 - 6: BB10[for.inc]
 - 7: BB11[if.then.1]
 - 8: BB12[for.inc.1]
 - 9: BB7[for.cond.cleanup10]
 - 10: BB4[for.cond.cleanup]
 - 11: BB5[cond.false.i64]
 - 12: BB6[_ZL7gettimev.exit70]
loop-detection
 - loop = BB3[for.cond8.preheader]
 - loop = BB8[for.body11]
 - loop = BB8[for.body11]: member = BB9[if.then]
 - loop = BB8[for.body11]: member = BB10[for.inc]
 - loop = BB8[for.body11]: member = BB11[if.then.1]
 - loop = BB8[for.body11]: member = BB12[for.inc.1]
 - loop = BB3[for.cond8.preheader]: member = BB7[for.cond.cleanup10]
compute-mass-in-loop: BB8[for.body11]*
 - node: BB8[for.body11]
  => [ local  ] weight = 1073741824, succ = BB9[if.then]
  => [ local  ] weight = 1073741824, succ = BB10[for.inc]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB9[if.then]
  => assign 8000000000000000 (0000000000000000) to BB10[for.inc]
 - node: BB9[if.then]
  => [ local  ] weight = 2147483648, succ = BB10[for.inc]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB10[for.inc]
 - node: BB10[for.inc]
  => [ local  ] weight = 1073741824, succ = BB11[if.then.1]
  => [ local  ] weight = 1073741824, succ = BB12[for.inc.1]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB11[if.then.1]
  => assign 8000000000000000 (0000000000000000) to BB12[for.inc.1]
 - node: BB11[if.then.1]
  => [ local  ] weight = 2147483648, succ = BB12[for.inc.1]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB12[for.inc.1]
 - node: BB12[for.inc.1]
  => [  exit  ] weight = 67108864, succ = BB7[for.cond.cleanup10]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB8[for.body11]
  => assign 0800000000000000 (0000000000000000) [exit] to BB7[for.cond.cleanup10]
compute-loop-scale: BB8[for.body11]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB8[for.body11]*
 - node: BB8[for.body11]
 - node: BB9[if.then]
 - node: BB10[for.inc]
 - node: BB11[if.then.1]
 - node: BB12[for.inc.1]
compute-mass-in-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 2147483648, succ = BB8[for.body11]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.body11]
 - node: BB8[for.body11]
  => [ local  ] weight = 576460752303423488, succ = BB7[for.cond.cleanup10]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB7[for.cond.cleanup10]
 - node: BB7[for.cond.cleanup10]
  => [  exit  ] weight = 67108864, succ = BB4[for.cond.cleanup]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.cond8.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB4[for.cond.cleanup]
compute-loop-scale: BB3[for.cond8.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.cond8.preheader]*
 - node: BB3[for.cond8.preheader]
 - node: BB8[for.body11]
 - node: BB7[for.cond.cleanup10]
compute-mass-in-function
 - node: BB0[entry]
  => [ local  ] weight = 2147483647, succ = BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 1, succ = BB1[cond.false.i]
  => mass:  ffffffffffffffff
  => assign 00000001ffffffff (fffffffe00000000) to BB1[cond.false.i]
  => assign fffffffe00000000 (0000000000000000) to BB2[_ZL7gettimev.exit]
 - node: BB1[cond.false.i]
  => mass:  00000001ffffffff
 - node: BB2[_ZL7gettimev.exit]
  => [ local  ] weight = 2147483648, succ = BB3[for.cond8.preheader]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB3[for.cond8.preheader]
 - node: BB3[for.cond8.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB4[for.cond.cleanup]
  => mass:  fffffffe00000000
  => assign fffffffe00000000 (0000000000000000) to BB4[for.cond.cleanup]
 - node: BB4[for.cond.cleanup]
  => [ local  ] weight = 2147483647, succ = BB6[_ZL7gettimev.exit70]
  => [ local  ] weight = 1, succ = BB5[cond.false.i64]
  => mass:  fffffffe00000000
  => assign 00000001fffffffc (fffffffc00000004) to BB5[cond.false.i64]
  => assign fffffffc00000004 (0000000000000000) to BB6[_ZL7gettimev.exit70]
 - node: BB5[cond.false.i64]
  => mass:  00000001fffffffc
 - node: BB6[_ZL7gettimev.exit70]
  => mass:  fffffffc00000004
unwrap-loop-package: BB3[for.cond8.preheader]*: mass = fffffffe00000000, scale = 32.0
  => combined-scale = 31.99999999
 - BB3[for.cond8.preheader]: 1.0 => 31.99999999
 - BB8[for.body11]: 32.0 => 1024.0
 - BB7[for.cond.cleanup10]: 1.0 => 31.99999999
unwrap-loop-package: BB8[for.body11]*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - BB8[for.body11]: 1.0 => 1024.0
 - BB9[if.then]: 0.5 => 511.9999998
 - BB10[for.inc]: 1.0 => 1024.0
 - BB11[if.then.1]: 0.5 => 511.9999998
 - BB12[for.inc.1]: 1.0 => 1024.0
float-to-int: min = 0.0000000004656612871, max = 1024.0, factor = 17179869190.0
 - BB0[entry]: float = 1.0, scaled = 17179869190.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.0000000004656612873, scaled = 8.000000003, int = 8
 - BB2[_ZL7gettimev.exit]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB9[if.then]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB11[if.then.1]: float = 511.9999998, scaled = 8796093021184.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, scaled = 17592186042368.0, int = 17592186042367
 - BB7[for.cond.cleanup10]: float = 31.99999999, scaled = 549755813824.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 0.9999999995, scaled = 17179869182.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.0000000004656612871, scaled = 8.0, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 0.9999999991, scaled = 17179869174.0, int = 17179869174
block-frequency-info: _Z5test2PfS_S_i
 - BB0[entry]: float = 1.0, int = 17179869190
 - BB1[cond.false.i]: float = 0.00000000046566, int = 8
 - BB2[_ZL7gettimev.exit]: float = 1.0, int = 17179869182
 - BB3[for.cond8.preheader]: float = 32.0, int = 549755813823
 - BB4[for.cond.cleanup]: float = 1.0, int = 17179869182
 - BB5[cond.false.i64]: float = 0.00000000046566, int = 8
 - BB6[_ZL7gettimev.exit70]: float = 1.0, int = 17179869174
 - BB7[for.cond.cleanup10]: float = 32.0, int = 549755813823
 - BB8[for.body11]: float = 1024.0, int = 17592186042367
 - BB9[if.then]: float = 512.0, int = 8796093021183
 - BB10[for.inc]: float = 1024.0, int = 17592186042367
 - BB11[if.then.1]: float = 512.0, int = 8796093021183
 - BB12[for.inc.1]: float = 1024.0, int = 17592186042367

	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.1
		Looking for trivial roots
Found a new trivial root: %bb.1
Last visited node: %bb.0
Found a new trivial root: %bb.5
Last visited node: %bb.2
Found a new trivial root: %bb.6
Last visited node: %bb.6
		Looking for non-trivial roots
Total: 13, Num: 14
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.1
3: %bb.0
4: %bb.5
5: %bb.4
6: %bb.7
7: %bb.12
8: %bb.11
9: %bb.10
10: %bb.9
11: %bb.8
12: %bb.3
13: %bb.2
14: %bb.6
Found roots: %bb.1 %bb.5 %bb.6 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.12
	discovered a new reachable node %bb.11
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.6
alloc FI(2) at SP[-56]
alloc FI(0) at SP[-72]

TryTailMergeBlocks: %bb.1, %bb.5, %bb.6
Looking for common tails of at least 3 instructions
Common tail length of %bb.5 and %bb.1 is 5

Using common tail in %bb.1 for %bb.5, 

TryTailMergeBlocks: %bb.0, %bb.5
  with successor %bb.1
  which has fall-through from %bb.0
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.2, %bb.7
  with successor %bb.3
  which has fall-through from %bb.2
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.3, %bb.12
  with successor %bb.8
  which has fall-through from %bb.7
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.8, %bb.9
  with successor %bb.10
  which has fall-through from %bb.9
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.10, %bb.11
  with successor %bb.12
  which has fall-through from %bb.11
Looking for common tails of at least 3 instructions

Moving MBB: bb.1.cond.false.i:
; predecessors: %bb.0, %bb.5

  $rdi = MOV32ri64 @.str.4, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
  $rsi = MOV32ri64 @.str.5, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
  $rcx = MOV32ri64 @__PRETTY_FUNCTION__._ZL7gettimev, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
  $edx = MOV32ri 75, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
  CALL64pcrel32 @__assert_fail, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $edx, implicit $rcx, implicit-def $rsp, implicit-def $ssp, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
To make fallthrough to: bb.2._ZL7gettimev.exit:
; predecessors: %bb.0
  successors: %bb.3(0x80000000); %bb.3(100.00%)
  liveins: $rbx, $r14, $r15
  renamable $r13 = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  renamable $r12 = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
  renamable $eax = MOV32r0 implicit-def dead $eflags, implicit-def $rax


Removing MBB: bb.5.cond.false.i64:
  successors: %bb.1(0x80000000); %bb.1(100.00%)


TryTailMergeBlocks: %bb.6, %bb.1
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.2, %bb.7
  with successor %bb.3
  which has fall-through from %bb.2
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.3, %bb.12
  with successor %bb.8
  which has fall-through from %bb.3
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.8, %bb.9
  with successor %bb.10
  which has fall-through from %bb.9
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.10, %bb.11
  with successor %bb.12
  which has fall-through from %bb.11
Looking for common tails of at least 3 instructions

TryTailMergeBlocks: %bb.0, %bb.4
  with successor %bb.1
  which has fall-through from %bb.6
Looking for common tails of at least 3 instructions
MCP: BackwardCopyPropagateBlock entry
MCP: ForwardCopyPropagateBlock entry
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rdx
MCP: Copy is a deletion candidate:   renamable $r14 = COPY $rsi
MCP: Copy is a deletion candidate:   renamable $r15 = COPY $rdi
MCP: BackwardCopyPropagateBlock _ZL7gettimev.exit
MCP: ForwardCopyPropagateBlock _ZL7gettimev.exit
MCP: BackwardCopyPropagateBlock for.cond8.preheader
MCP: ForwardCopyPropagateBlock for.cond8.preheader
MCP: BackwardCopyPropagateBlock for.body11
MCP: ForwardCopyPropagateBlock for.body11
MCP: BackwardCopyPropagateBlock if.then
MCP: ForwardCopyPropagateBlock if.then
MCP: BackwardCopyPropagateBlock for.inc
MCP: ForwardCopyPropagateBlock for.inc
MCP: BackwardCopyPropagateBlock if.then.1
MCP: ForwardCopyPropagateBlock if.then.1
MCP: BackwardCopyPropagateBlock for.inc.1
MCP: ForwardCopyPropagateBlock for.inc.1
MCP: BackwardCopyPropagateBlock for.cond.cleanup10
MCP: ForwardCopyPropagateBlock for.cond.cleanup10
MCP: BackwardCopyPropagateBlock for.cond.cleanup
MCP: ForwardCopyPropagateBlock for.cond.cleanup
MCP: BackwardCopyPropagateBlock _ZL7gettimev.exit70
MCP: ForwardCopyPropagateBlock _ZL7gettimev.exit70
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is a deletion candidate:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
MCP: Copy is a deletion candidate:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is a deletion candidate:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is used - not dead:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
MCP: Copy is a deletion candidate:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: Copy is used - not dead:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
MCP: BackwardCopyPropagateBlock cond.false.i
MCP: ForwardCopyPropagateBlock cond.false.i
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: _Z5test2PfS_S_i
real copy:   renamable $rbx = COPY $rdx
replaced by: $rbx = MOV64rr $rdx
real copy:   renamable $r14 = COPY $rsi
replaced by: $r14 = MOV64rr $rsi
real copy:   renamable $r15 = COPY $rdi
replaced by: $r15 = MOV64rr $rdi
real copy:   renamable $rbx = COPY $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
replaced by: $rbx = MOV64rr $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
real copy:   $rdi = COPY $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
replaced by: $rdi = MOV64rr $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
real copy:   $rdi = COPY killed renamable $rbx, debug-location !42; test2.cpp:64:39
replaced by: $rdi = MOV64rr killed $rbx, debug-location !42; test2.cpp:64:39
real copy:   renamable $rbx = COPY $rax, debug-location !42; test2.cpp:64:39
replaced by: $rbx = MOV64rr $rax, debug-location !42; test2.cpp:64:39
real copy:   $rdi = COPY $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
replaced by: $rdi = MOV64rr $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
real copy:   $rdi = COPY killed renamable $rbx, debug-location !45; test2.cpp:64:55
replaced by: $rdi = MOV64rr killed $rbx, debug-location !45; test2.cpp:64:55
real copy:   $rdi = COPY killed renamable $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
replaced by: $rdi = MOV64rr killed $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11

block-frequency: _Z5test2PfS_S_i
================================
reverse-post-order-traversal
 - 0: BB0[entry]
 - 1: BB1[_ZL7gettimev.exit]
 - 2: BB2[for.cond8.preheader]
 - 3: BB3[for.body11]
 - 4: BB4[if.then]
 - 5: BB5[for.inc]
 - 6: BB6[if.then.1]
 - 7: BB7[for.inc.1]
 - 8: BB8[for.cond.cleanup10]
 - 9: BB9[for.cond.cleanup]
 - 10: BB11[cond.false.i]
 - 11: BB10[_ZL7gettimev.exit70]
loop-detection
 - loop = BB2[for.cond8.preheader]
 - loop = BB3[for.body11]
 - loop = BB3[for.body11]: member = BB4[if.then]
 - loop = BB3[for.body11]: member = BB5[for.inc]
 - loop = BB3[for.body11]: member = BB6[if.then.1]
 - loop = BB3[for.body11]: member = BB7[for.inc.1]
 - loop = BB2[for.cond8.preheader]: member = BB8[for.cond.cleanup10]
compute-mass-in-loop: BB3[for.body11]*
 - node: BB3[for.body11]
  => [ local  ] weight = 1073741824, succ = BB4[if.then]
  => [ local  ] weight = 1073741824, succ = BB5[for.inc]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB4[if.then]
  => assign 8000000000000000 (0000000000000000) to BB5[for.inc]
 - node: BB4[if.then]
  => [ local  ] weight = 2147483648, succ = BB5[for.inc]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB5[for.inc]
 - node: BB5[for.inc]
  => [ local  ] weight = 1073741824, succ = BB6[if.then.1]
  => [ local  ] weight = 1073741824, succ = BB7[for.inc.1]
  => mass:  ffffffffffffffff
  => assign 7fffffffffffffff (8000000000000000) to BB6[if.then.1]
  => assign 8000000000000000 (0000000000000000) to BB7[for.inc.1]
 - node: BB6[if.then.1]
  => [ local  ] weight = 2147483648, succ = BB7[for.inc.1]
  => mass:  7fffffffffffffff
  => assign 7fffffffffffffff (0000000000000000) to BB7[for.inc.1]
 - node: BB7[for.inc.1]
  => [  exit  ] weight = 67108864, succ = BB8[for.cond.cleanup10]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB3[for.body11]
  => assign 0800000000000000 (0000000000000000) [exit] to BB8[for.cond.cleanup10]
compute-loop-scale: BB3[for.body11]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB3[for.body11]*
 - node: BB3[for.body11]
 - node: BB4[if.then]
 - node: BB5[for.inc]
 - node: BB6[if.then.1]
 - node: BB7[for.inc.1]
compute-mass-in-loop: BB2[for.cond8.preheader]*
 - node: BB2[for.cond8.preheader]
  => [ local  ] weight = 2147483648, succ = BB3[for.body11]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB3[for.body11]
 - node: BB3[for.body11]
  => [ local  ] weight = 576460752303423488, succ = BB8[for.cond.cleanup10]
  => mass:  ffffffffffffffff
  => assign ffffffffffffffff (0000000000000000) to BB8[for.cond.cleanup10]
 - node: BB8[for.cond.cleanup10]
  => [  exit  ] weight = 67108864, succ = BB9[for.cond.cleanup]
  => [backedge] weight = 2080374784
  => mass:  ffffffffffffffff
  => assign f7ffffffffffffff (0800000000000000) [back] to BB2[for.cond8.preheader]
  => assign 0800000000000000 (0000000000000000) [exit] to BB9[for.cond.cleanup]
compute-loop-scale: BB2[for.cond8.preheader]*
 - exit-mass = 0800000000000000 (ffffffffffffffff - f7ffffffffffffff)
 - scale = 32.0
packaging-loop: BB2[for.cond8.preheader]*
 - node: BB2[for.cond8.preheader]
 - node: BB3[for.body11]
 - node: BB8[for.cond.cleanup10]
compute-mass-in-function
 - node: BB0[entry]
  => [ local  ] weight = 2147483647, succ = BB1[_ZL7gettimev.exit]
  => [ local  ] weight = 1, succ = BB11[cond.false.i]
  => mass:  ffffffffffffffff
  => assign fffffffdffffffff (0000000200000000) to BB1[_ZL7gettimev.exit]
  => assign 0000000200000000 (0000000000000000) to BB11[cond.false.i]
 - node: BB1[_ZL7gettimev.exit]
  => [ local  ] weight = 2147483648, succ = BB2[for.cond8.preheader]
  => mass:  fffffffdffffffff
  => assign fffffffdffffffff (0000000000000000) to BB2[for.cond8.preheader]
 - node: BB2[for.cond8.preheader]
  => [ local  ] weight = 576460752303423488, succ = BB9[for.cond.cleanup]
  => mass:  fffffffdffffffff
  => assign fffffffdffffffff (0000000000000000) to BB9[for.cond.cleanup]
 - node: BB9[for.cond.cleanup]
  => [ local  ] weight = 2147483647, succ = BB10[_ZL7gettimev.exit70]
  => [ local  ] weight = 1, succ = BB11[cond.false.i]
  => mass:  fffffffdffffffff
  => assign 00000001fffffffb (fffffffc00000004) to BB11[cond.false.i]
  => assign fffffffc00000004 (0000000000000000) to BB10[_ZL7gettimev.exit70]
 - node: BB11[cond.false.i]
  => mass:  00000003fffffffb
 - node: BB10[_ZL7gettimev.exit70]
  => mass:  fffffffc00000004
unwrap-loop-package: BB2[for.cond8.preheader]*: mass = fffffffdffffffff, scale = 32.0
  => combined-scale = 31.99999999
 - BB2[for.cond8.preheader]: 1.0 => 31.99999999
 - BB3[for.body11]: 32.0 => 1024.0
 - BB8[for.cond.cleanup10]: 1.0 => 31.99999999
unwrap-loop-package: BB3[for.body11]*: mass = ffffffffffffffff, scale = 1024.0
  => combined-scale = 1024.0
 - BB3[for.body11]: 1.0 => 1024.0
 - BB4[if.then]: 0.5 => 511.9999998
 - BB5[for.inc]: 1.0 => 1024.0
 - BB6[if.then.1]: 0.5 => 511.9999998
 - BB7[for.inc.1]: 1.0 => 1024.0
float-to-int: min = 0.0000000009313225744, max = 1024.0, factor = 8589934594.0
 - BB0[entry]: float = 1.0, scaled = 8589934594.0, int = 8589934594
 - BB1[_ZL7gettimev.exit]: float = 0.9999999995, scaled = 8589934590.0, int = 8589934590
 - BB2[for.cond8.preheader]: float = 31.99999999, scaled = 274877906880.0, int = 274877906879
 - BB3[for.body11]: float = 1024.0, scaled = 8796093020160.0, int = 8796093020159
 - BB4[if.then]: float = 511.9999998, scaled = 4398046510080.0, int = 4398046510079
 - BB5[for.inc]: float = 1024.0, scaled = 8796093020160.0, int = 8796093020159
 - BB6[if.then.1]: float = 511.9999998, scaled = 4398046510080.0, int = 4398046510079
 - BB7[for.inc.1]: float = 1024.0, scaled = 8796093020160.0, int = 8796093020159
 - BB8[for.cond.cleanup10]: float = 31.99999999, scaled = 274877906880.0, int = 274877906879
 - BB9[for.cond.cleanup]: float = 0.9999999995, scaled = 8589934590.0, int = 8589934590
 - BB11[cond.false.i]: float = 0.0000000009313225744, scaled = 8.0, int = 8
 - BB10[_ZL7gettimev.exit70]: float = 0.9999999991, scaled = 8589934586.0, int = 8589934586
block-frequency-info: _Z5test2PfS_S_i
 - BB0[entry]: float = 1.0, int = 8589934594
 - BB1[_ZL7gettimev.exit]: float = 1.0, int = 8589934590
 - BB2[for.cond8.preheader]: float = 32.0, int = 274877906879
 - BB3[for.body11]: float = 1024.0, int = 8796093020159
 - BB4[if.then]: float = 512.0, int = 4398046510079
 - BB5[for.inc]: float = 1024.0, int = 8796093020159
 - BB6[if.then.1]: float = 512.0, int = 4398046510079
 - BB7[for.inc.1]: float = 1024.0, int = 8796093020159
 - BB8[for.cond.cleanup10]: float = 32.0, int = 274877906879
 - BB9[for.cond.cleanup]: float = 1.0, int = 8589934590
 - BB10[_ZL7gettimev.exit70]: float = 1.0, int = 8589934586
 - BB11[cond.false.i]: float = 0.00000000093132, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.10
Last visited node: %bb.0
Found a new trivial root: %bb.11
Last visited node: %bb.11
		Looking for non-trivial roots
Total: 12, Num: 13
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.10
3: %bb.9
4: %bb.8
5: %bb.7
6: %bb.6
7: %bb.5
8: %bb.4
9: %bb.3
10: %bb.2
11: %bb.1
12: %bb.0
13: %bb.11
Found roots: %bb.10 %bb.11 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.11
Pre-computing triangle chains.
Finding best loop top for: %bb.3 ('for.body11')
   old top pred: %bb.7 ('for.inc.1'), has 2 successors, 1024.0 freq
    final top: %bb.7 ('for.inc.1')
Finding best loop top for: %bb.7 ('for.inc.1')
   old top pred: %bb.5 ('for.inc'), has 2 successors, 1024.0 freq
   old top pred: %bb.6 ('if.then.1'), has 1 successors, 511.9999998 freq
    final top unchanged
Selecting best successor for: %bb.7 ('for.inc.1')
Merging from %bb.7 ('for.inc.1') to %bb.3 ('for.body11')
Selecting best successor for: %bb.3 ('for.body11')
    Candidate: %bb.4 ('if.then'), probability: 0x40000000 / 0x80000000 = 50.00%
    Setting it as best candidate
    Not a candidate: %bb.5 ('for.inc') -> 0x40000000 / 0x80000000 = 50.00% (prob) (non-cold CFG conflict)
    Selected: %bb.4 ('if.then')
Merging from %bb.3 ('for.body11') to %bb.4 ('if.then')
Selecting best successor for: %bb.4 ('if.then')
    Candidate: %bb.5 ('for.inc'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: %bb.5 ('for.inc')
Merging from %bb.4 ('if.then') to %bb.5 ('for.inc')
Selecting best successor for: %bb.5 ('for.inc')
    Candidate: %bb.6 ('if.then.1'), probability: 0x80000000 / 0x80000000 = 100.00%
    Setting it as best candidate
    Selected: %bb.6 ('if.then.1')
Merging from %bb.5 ('for.inc') to %bb.6 ('if.then.1')
Selecting best successor for: %bb.6 ('if.then.1')
Finished forming chain for header block %bb.7 ('for.inc.1')
          ... %bb.7 ('for.inc.1')
          ... %bb.3 ('for.body11')
          ... %bb.4 ('if.then')
          ... %bb.5 ('for.inc')
          ... %bb.6 ('if.then.1')
Finding best loop top for: %bb.2 ('for.cond8.preheader')
   old top pred: %bb.8 ('for.cond.cleanup10'), has 2 successors, 31.99999998 freq
    final top: %bb.8 ('for.cond.cleanup10')
Finding best loop top for: %bb.8 ('for.cond.cleanup10')
   old top pred: %bb.7 ('for.inc.1'), has 2 successors, 1024.0 freq
    final top unchanged
Selecting best successor for: %bb.8 ('for.cond.cleanup10')
Merging from %bb.8 ('for.cond.cleanup10') to %bb.2 ('for.cond8.preheader')
    %bb.3 ('for.body11') -> Mid chain!
Selecting best successor for: %bb.2 ('for.cond8.preheader')
    %bb.7 ('for.inc.1') -> 1024.0 (freq)
Merging from %bb.2 ('for.cond8.preheader') to %bb.7 ('for.inc.1')
Selecting best successor for: %bb.6 ('if.then.1')
Finished forming chain for header block %bb.8 ('for.cond.cleanup10')
          ... %bb.8 ('for.cond.cleanup10')
          ... %bb.2 ('for.cond8.preheader')
          ... %bb.7 ('for.inc.1')
          ... %bb.3 ('for.body11')
          ... %bb.4 ('if.then')
          ... %bb.5 ('for.inc')
          ... %bb.6 ('if.then.1')
Selecting best successor for: %bb.0 ('entry')
    Candidate: %bb.1 ('_ZL7gettimev.exit'), probability: 0x7fffffff / 0x80000000 = 100.00%
    Setting it as best candidate
    Not a candidate: %bb.11 ('cond.false.i') -> 0x00000001 / 0x80000000 = 0.00% (prob) (non-cold CFG conflict)
    Selected: %bb.1 ('_ZL7gettimev.exit')
Merging from %bb.0 ('entry') to %bb.1 ('_ZL7gettimev.exit')
    %bb.2 ('for.cond8.preheader') -> Mid chain!
Selecting best successor for: %bb.1 ('_ZL7gettimev.exit')
    %bb.8 ('for.cond.cleanup10') -> 31.99999998 (freq)
Merging from %bb.1 ('_ZL7gettimev.exit') to %bb.8 ('for.cond.cleanup10')
Selecting best successor for: %bb.6 ('if.then.1')
    %bb.9 ('for.cond.cleanup') -> 0.9999999995 (freq)
Merging from %bb.6 ('if.then.1') to %bb.9 ('for.cond.cleanup')
Selecting best successor for: %bb.9 ('for.cond.cleanup')
    Candidate: %bb.10 ('_ZL7gettimev.exit70'), probability: 0x7fffffff / 0x80000000 = 100.00%
    Setting it as best candidate
    Candidate: %bb.11 ('cond.false.i'), probability: 0x00000001 / 0x80000000 = 0.00%
    Not the best candidate, continuing
    Selected: %bb.10 ('_ZL7gettimev.exit70')
Merging from %bb.9 ('for.cond.cleanup') to %bb.10 ('_ZL7gettimev.exit70')
Selecting best successor for: %bb.10 ('_ZL7gettimev.exit70')
    %bb.11 ('cond.false.i') -> 0.0000000009313225744 (freq)
Merging from %bb.10 ('_ZL7gettimev.exit70') to %bb.11 ('cond.false.i')
Selecting best successor for: %bb.11 ('cond.false.i')
Finished forming chain for header block %bb.0 ('entry')
[MBP] Function: _Z5test2PfS_S_i
Placing chain %bb.0 ('entry')
          ... %bb.1 ('_ZL7gettimev.exit')
          ... %bb.8 ('for.cond.cleanup10')
          ... %bb.2 ('for.cond8.preheader')
          ... %bb.7 ('for.inc.1')
          ... %bb.3 ('for.body11')
          ... %bb.4 ('if.then')
          ... %bb.5 ('for.inc')
          ... %bb.6 ('if.then.1')
          ... %bb.9 ('for.cond.cleanup')
          ... %bb.10 ('_ZL7gettimev.exit70')
          ... %bb.11 ('cond.false.i')

TryTailMergeBlocks: %bb.10, %bb.11
Looking for common tails of at least 5 instructions

TryTailMergeBlocks: %bb.5, %bb.6
  with successor %bb.7
  which has fall-through from %bb.2
Looking for common tails of at least 5 instructions

TryTailMergeBlocks: %bb.3, %bb.4
  with successor %bb.5
  which has fall-through from %bb.4
Looking for common tails of at least 5 instructions

TryTailMergeBlocks: %bb.0, %bb.9
  with successor %bb.11
  which has fall-through from %bb.10
Looking for common tails of at least 5 instructions
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$rsp:	10	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
$rsp:	10	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
$rsp:	10	$rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
$rbx:	17	$rbx = MOV64rr $rdx
$rbx:	17	$rbx = MOV64rr $rdx
$rbx:	17	$rbx = MOV64rr $rdx
$r14:	18	$r14 = MOV64rr $rsi
$r14:	18	$r14 = MOV64rr $rsi
$r14:	18	$r14 = MOV64rr $rsi
$r15:	19	$r15 = MOV64rr $rdi
$r15:	19	$r15 = MOV64rr $rdi
$r15:	19	$r15 = MOV64rr $rdi
$rsi:	20	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$rsi:	20	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$rsi:	20	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$edi:	21	$edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
$edi:	21	$edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
$edi:	21	$edi = MOV32ri 1, debug-location !13; ./fasttime.h:74:11 @[ test2.cpp:17:22 ]
%bb.1: all preds known
$r13:	0	renamable $r13 = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$r13:	0	renamable $r13 = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$r13:	0	renamable $r13 = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir..fca.0.gep.i100); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$r12:	1	renamable $r12 = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$r12:	1	renamable $r12 = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$r12:	1	renamable $r12 = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !18 :: (dereferenceable load 8 from %ir.2); ./fasttime.h:78:1 @[ test2.cpp:17:22 ]
$eax:	2	renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $rax
$eax:	2	renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $rax
$eax:	2	renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $rax
%bb.2: incomplete
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
%bb.3: incomplete
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$xmm0:	2	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
$xmm1:	3	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.4: incomplete
%bb.5: incomplete
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$xmm0:	2	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
$xmm1:	3	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.6: incomplete
%bb.7: incomplete
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
%bb.8: incomplete
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
%bb.2: all preds known
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
$ecx:	0	renamable $ecx = XOR32rr undef $ecx(tied-def 0), undef $ecx, implicit-def dead $eflags, implicit-def $rcx
%bb.3: all preds known
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 0, $noreg, debug-location !53 :: (load 4 from %ir.7, align 8, !tbaa !54); test2.cpp:32:21
$xmm0:	2	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
$xmm1:	3	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.4: all preds known
%bb.5: all preds known
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$edx:	0	renamable $edx = MOV32rm renamable $r15, 4, renamable $rcx, 4, $noreg, debug-location !53 :: (load 4 from %ir.17, !tbaa !54); test2.cpp:32:21
$xmm0:	2	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
$xmm1:	3	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.6: all preds known
%bb.7: all preds known
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
$rcx:	0	renamable $rcx = nuw nsw ADD64ri8 killed renamable $rcx(tied-def 0), 2, implicit-def dead $eflags, debug-location !64; test2.cpp:22:29
%bb.8: all preds known
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
$eax:	0	renamable $eax = nuw nsw ADD32ri8 renamable $eax(tied-def 0), 1, implicit-def dead $eflags, implicit killed $rax, implicit-def $rax, debug-location !49; test2.cpp:18:27
%bb.9: all preds known
$rsi:	0	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$rsi:	0	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$rsi:	0	renamable $rsi = LEA64r $rsp, 1, $noreg, 8, $noreg
$edi:	1	$edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
$edi:	1	$edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
$edi:	1	$edi = MOV32ri 1, debug-location !21; ./fasttime.h:74:11 @[ test2.cpp:60:22 ]
%bb.11: all preds known
$edi:	0	$edi = MOV32ri @.str.4, implicit-def $rdi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$edi:	0	$edi = MOV32ri @.str.4, implicit-def $rdi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$edi:	0	$edi = MOV32ri @.str.4, implicit-def $rdi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$esi:	1	$esi = MOV32ri @.str.5, implicit-def $rsi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$esi:	1	$esi = MOV32ri @.str.5, implicit-def $rsi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$esi:	1	$esi = MOV32ri @.str.5, implicit-def $rsi, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$ecx:	2	$ecx = MOV32ri @__PRETTY_FUNCTION__._ZL7gettimev, implicit-def $rcx, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$ecx:	2	$ecx = MOV32ri @__PRETTY_FUNCTION__._ZL7gettimev, implicit-def $rcx, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$ecx:	2	$ecx = MOV32ri @__PRETTY_FUNCTION__._ZL7gettimev, implicit-def $rcx, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$edx:	3	$edx = MOV32ri 75, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$edx:	3	$edx = MOV32ri 75, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
$edx:	3	$edx = MOV32ri 75, debug-location !DILocation(line: 0, scope: !6); test2.cpp:0
%bb.10: all preds known
$rax:	0	renamable $rax = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rax:	0	renamable $rax = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rax:	0	renamable $rax = MOV64rm $rsp, 1, $noreg, 8, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir..fca.0.gep.i65101); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rax:	1	renamable $rax = nsw SUB64rr killed renamable $rax(tied-def 0), killed renamable $r13, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
$rax:	1	renamable $rax = nsw SUB64rr killed renamable $rax(tied-def 0), killed renamable $r13, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
$rax:	1	renamable $rax = nsw SUB64rr killed renamable $rax(tied-def 0), killed renamable $r13, implicit-def dead $eflags, debug-location !25; ./fasttime.h:83:21 @[ test2.cpp:62:21 ]
$rcx:	2	renamable $rcx = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rcx:	2	renamable $rcx = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rcx:	2	renamable $rcx = MOV64rm $rsp, 1, $noreg, 16, $noreg, debug-location !24 :: (dereferenceable load 8 from %ir.5); ./fasttime.h:78:1 @[ test2.cpp:60:22 ]
$rcx:	3	renamable $rcx = nsw SUB64rr killed renamable $rcx(tied-def 0), killed renamable $r12, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
$rcx:	3	renamable $rcx = nsw SUB64rr killed renamable $rcx(tied-def 0), killed renamable $r12, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
$rcx:	3	renamable $rcx = nsw SUB64rr killed renamable $rcx(tied-def 0), killed renamable $r12, implicit-def dead $eflags, debug-location !29; ./fasttime.h:83:56 @[ test2.cpp:62:21 ]
$xmm0:	4	renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
$xmm1:	5	renamable $xmm1 = nofpexcept CVTSI642SDrr killed renamable $rcx, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
$xmm1:	6	renamable $xmm1 = nofpexcept MULSDrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
$xmm1:	7	renamable $xmm1 = nofpexcept ADDSDrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
$edi:	9	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edi:	9	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edi:	9	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$esi:	10	$esi = MOV32ri @.str, implicit-def $rsi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$esi:	10	$esi = MOV32ri @.str, implicit-def $rsi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$esi:	10	$esi = MOV32ri @.str, implicit-def $rsi, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edx:	11	$edx = MOV32ri 47, implicit-def $rdx, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edx:	11	$edx = MOV32ri 47, implicit-def $rdx, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edx:	11	$edx = MOV32ri 47, implicit-def $rdx, debug-location !33; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:63:13 ]
$edi:	13	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$edi:	13	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$edi:	13	$edi = MOV32ri @_ZSt4cout, implicit-def $rdi, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$xmm0:	14	$xmm0 = MOVSDrm_alt $rsp, 1, $noreg, 24, $noreg :: (load 8 from %stack.2)
$rbx:	16	$rbx = MOV64rr $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$rbx:	16	$rbx = MOV64rr $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$rbx:	16	$rbx = MOV64rr $rax, debug-location !37; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:221:16 @[ test2.cpp:64:13 ]
$esi:	17	$esi = MOV32ri @.str.1, implicit-def $rsi, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$esi:	17	$esi = MOV32ri @.str.1, implicit-def $rsi, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$esi:	17	$esi = MOV32ri @.str.1, implicit-def $rsi, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$edx:	18	$edx = MOV32ri 8, implicit-def $rdx, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$edx:	18	$edx = MOV32ri 8, implicit-def $rdx, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$edx:	18	$edx = MOV32ri 8, implicit-def $rdx, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$rdi:	19	$rdi = MOV64rr $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$rdi:	19	$rdi = MOV64rr $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$rdi:	19	$rdi = MOV64rr $rax, debug-location !40; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:25 ]
$rdi:	21	$rdi = MOV64rr killed $rbx, debug-location !42; test2.cpp:64:39
$rdi:	21	$rdi = MOV64rr killed $rbx, debug-location !42; test2.cpp:64:39
$rdi:	21	$rdi = MOV64rr killed $rbx, debug-location !42; test2.cpp:64:39
$esi:	22	$esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
$esi:	22	$esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
$esi:	22	$esi = MOV32ri 1024, debug-location !42; test2.cpp:64:39
$rbx:	24	$rbx = MOV64rr $rax, debug-location !42; test2.cpp:64:39
$rbx:	24	$rbx = MOV64rr $rax, debug-location !42; test2.cpp:64:39
$rbx:	24	$rbx = MOV64rr $rax, debug-location !42; test2.cpp:64:39
$esi:	25	$esi = MOV32ri @.str.2, implicit-def $rsi, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$esi:	25	$esi = MOV32ri @.str.2, implicit-def $rsi, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$esi:	25	$esi = MOV32ri @.str.2, implicit-def $rsi, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$edx:	26	$edx = MOV32ri 5, implicit-def $rdx, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$edx:	26	$edx = MOV32ri 5, implicit-def $rdx, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$edx:	26	$edx = MOV32ri 5, implicit-def $rdx, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$rdi:	27	$rdi = MOV64rr $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$rdi:	27	$rdi = MOV64rr $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$rdi:	27	$rdi = MOV64rr $rax, debug-location !43; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:44 ]
$rdi:	29	$rdi = MOV64rr killed $rbx, debug-location !45; test2.cpp:64:55
$rdi:	29	$rdi = MOV64rr killed $rbx, debug-location !45; test2.cpp:64:55
$rdi:	29	$rdi = MOV64rr killed $rbx, debug-location !45; test2.cpp:64:55
$esi:	30	$esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
$esi:	30	$esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
$esi:	30	$esi = MOV32ri 20000000, debug-location !45; test2.cpp:64:55
$esi:	32	$esi = MOV32ri @.str.3, implicit-def $rsi, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$esi:	32	$esi = MOV32ri @.str.3, implicit-def $rsi, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$esi:	32	$esi = MOV32ri @.str.3, implicit-def $rsi, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$edx:	33	$edx = MOV32ri 2, implicit-def $rdx, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$edx:	33	$edx = MOV32ri 2, implicit-def $rdx, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$edx:	33	$edx = MOV32ri 2, implicit-def $rdx, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$rdi:	34	$rdi = MOV64rr killed $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$rdi:	34	$rdi = MOV64rr killed $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$rdi:	34	$rdi = MOV64rr killed $rax, debug-location !46; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/ostream:570:2 @[ test2.cpp:64:60 ]
$rsp:	36	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags, debug-location !48; test2.cpp:65:1
$rsp:	36	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags, debug-location !48; test2.cpp:65:1
$rsp:	36	$rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags, debug-location !48; test2.cpp:65:1
$rbx:	38	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$rbx:	38	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$rbx:	38	$rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r12:	40	$r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r12:	40	$r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r12:	40	$r12 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r13:	42	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r13:	42	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r13:	42	$r13 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r14:	44	$r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r14:	44	$r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r14:	44	$r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r15:	46	$r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r15:	46	$r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
$r15:	46	$r15 = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !48; test2.cpp:65:1
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
%bb.1: all preds known
%bb.2: incomplete
%bb.3: incomplete
$xmm0:	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
$xmm1:	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.4: incomplete
%bb.5: incomplete
$xmm0:	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
$xmm1:	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.6: incomplete
%bb.7: incomplete
%bb.8: incomplete
%bb.2: all preds known
%bb.3: all preds known
$xmm0:	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 0, $noreg, debug-location !59 :: (load 4 from %ir.12, align 8, !tbaa !54); test2.cpp:34:11
$xmm1:	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.4: all preds known
%bb.5: all preds known
$xmm0:	renamable $xmm0 = MOVSSrm_alt renamable $r14, 4, renamable $rcx, 4, $noreg, debug-location !59 :: (load 4 from %ir.22, !tbaa !54); test2.cpp:34:11
$xmm1:	renamable $xmm1 = MOVDI2SSrr killed renamable $edx, debug-location !60; test2.cpp:34:18
%bb.6: all preds known
%bb.7: all preds known
%bb.8: all preds known
%bb.9: all preds known
%bb.11: all preds known
%bb.10: all preds known
$xmm0:	renamable $xmm0 = nofpexcept CVTSI642SDrr killed renamable $rax, implicit $mxcsr, debug-location !28; ./fasttime.h:83:10 @[ test2.cpp:62:21 ]
$xmm1:	renamable $xmm1 = nofpexcept CVTSI642SDrr killed renamable $rcx, implicit $mxcsr, debug-location !30; ./fasttime.h:83:43 @[ test2.cpp:62:21 ]
$xmm1:	renamable $xmm1 = nofpexcept MULSDrm killed renamable $xmm1(tied-def 0), $rip, 1, $noreg, %const.0, $noreg, implicit $mxcsr, debug-location !31 :: (load 8 from constant-pool); ./fasttime.h:83:42 @[ test2.cpp:62:21 ]
$xmm1:	renamable $xmm1 = nofpexcept ADDSDrr killed renamable $xmm1(tied-def 0), killed renamable $xmm0, implicit $mxcsr, debug-location !32; ./fasttime.h:83:36 @[ test2.cpp:62:21 ]
$xmm0:	$xmm0 = MOVSDrm_alt $rsp, 1, $noreg, 24, $noreg :: (load 8 from %stack.2)
********** BREAK FALSE DEPENDENCIES **********
Clearance: 19, want 64: Break dependency.
Clearance: 19, want 64: Break dependency.
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: _Z5test2PfS_S_i **********
X86 Retpoline Thunks
	discovered a new reachable node %bb.0
	discovered a new reachable node %bb.1
	discovered a new reachable node %bb.2
	discovered a new reachable node %bb.3
	discovered a new reachable node %bb.4
	discovered a new reachable node %bb.5
	discovered a new reachable node %bb.6
	discovered a new reachable node %bb.7
	discovered a new reachable node %bb.8
	discovered a new reachable node %bb.9
	discovered a new reachable node %bb.10
	discovered a new reachable node %bb.11
	discovered a new reachable node %entry
[SafeStack] Function: _GLOBAL__sub_I_test2.cpp
[SafeStack]     safestack is not requested for this function
	discovered a new reachable node %entry
	discovered a new reachable node %entry
---- Branch Probability Info : _GLOBAL__sub_I_test2.cpp ----

		Looking for trivial roots
Found a new trivial root: %entry
Last visited node: %entry
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %entry
Found roots: %entry 
	discovered a new reachable node nullptr
	discovered a new reachable node %entry
Computing probabilities for entry



=== _GLOBAL__sub_I_test2.cpp
Creating constant: t3: i64 = TargetConstant<0>
Creating new node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating new node: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Creating constant: t20: i32 = Constant<0>
Creating new node: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Initial selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 22 nodes:
  t1: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t11: i64 = GlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]



Combining: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t20: i32 = Constant<0>

Combining: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t17: i64 = Register $rdx

Combining: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t15: i64 = Register $rsi

Combining: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t8: Untyped = RegisterMask

Combining: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t5: i64 = Register $rdi

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t3: i64 = TargetConstant<0>

Combining: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t0: ch = EntryToken
Optimized lowered selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 20 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Legalizing node: t20: i32 = Constant<0>
Analyzing result type: i32
Legal result type
Legally typed node: t20: i32 = Constant<0>

Legalizing node: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: i64
Legal result type
Legally typed node: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t17: i64 = Register $rdx
Ignoring node results
Legally typed node: t17: i64 = Register $rdx

Legalizing node: t15: i64 = Register $rsi
Ignoring node results
Legally typed node: t15: i64 = Register $rsi

Legalizing node: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: i64
Legal result type
Legally typed node: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: i64
Legal result type
Legally typed node: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t8: Untyped = RegisterMask
Analyzing result type: Untyped
Legal result type
Legally typed node: t8: Untyped = RegisterMask

Legalizing node: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: i64
Legal result type
Legally typed node: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t5: i64 = Register $rdi
Ignoring node results
Legally typed node: t5: i64 = Register $rdi

Legalizing node: t3: i64 = TargetConstant<0>
Ignoring node results
Legally typed node: t3: i64 = TargetConstant<0>

Legalizing node: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: i64
Legal result type
Legally typed node: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t0: ch = EntryToken
Analyzing result type: ch
Legal result type
Legally typed node: t0: ch = EntryToken

Legalizing node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t0: ch = EntryToken
Legal operand
Legally typed node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Analyzing result type: ch
Legal result type
Analyzing result type: glue
Legal result type
Analyzing operand: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Analyzing operand: t20: i32 = Constant<0>
Legal operand
Analyzing operand: t8: Untyped = RegisterMask
Legal operand
Analyzing operand: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing node: t65535: ch = handlenode t21
Analyzing result type: ch
Legal result type
Analyzing operand: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal operand
Legally typed node: t65535: ch = handlenode t21

Type-legalized selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 20 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]



Legalizing: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, GlobalAddress:i64<i8* @__dso_handle> 0, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, GlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, GlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t20: i32 = Constant<0>
Legal node: nothing to do

Legalizing: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t17: i64 = Register $rdx

Legalizing: t15: i64 = Register $rsi

Legalizing: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Trying custom legalization
Creating new node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Successfully custom legalized node
 ... replacing: t13: i64 = GlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
     with:      t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Trying custom legalization
Creating new node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Successfully custom legalized node
 ... replacing: t12: i64 = GlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
     with:      t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Legalizing: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Legalizing: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Trying custom legalization
Creating new node: t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Successfully custom legalized node
 ... replacing: t2: i64 = GlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
     with:      t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Legalizing: t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t26: i64 = TargetGlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t24: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Legalizing: t22: i64 = TargetGlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do
Legalized selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]



Legalizing: t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t26: i64 = TargetGlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t26: i64 = TargetGlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t24: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t24: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t22: i64 = TargetGlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t22: i64 = TargetGlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Combining: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t20: i32 = Constant<0>
Legal node: nothing to do

Combining: t20: i32 = Constant<0>

Legalizing: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t17: i64 = Register $rdx

Combining: t17: i64 = Register $rdx

Legalizing: t15: i64 = Register $rsi

Combining: t15: i64 = Register $rsi

Legalizing: t8: Untyped = RegisterMask
Legal node: nothing to do

Combining: t8: Untyped = RegisterMask

Legalizing: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Legal node: nothing to do

Combining: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Legalizing: t5: i64 = Register $rdi

Combining: t5: i64 = Register $rdi

Legalizing: t3: i64 = TargetConstant<0>

Combining: t3: i64 = TargetConstant<0>

Legalizing: t0: ch = EntryToken
Legal node: nothing to do

Combining: t0: ch = EntryToken
Optimized legalized selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 23 nodes:
      t0: ch = EntryToken
    t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


===== Instruction selection begins: %bb.0 'entry'

ISEL: Starting selection on root node: t21: ch,glue = X86ISD::TC_RETURN t18, TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, Constant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 40005
  Match failed at index 40010
  Continuing at 40078
  OpcodeSwitch from 40084 to 40088
  TypeSwitch[i64] from 40088 to 40112
Creating constant: t28: i32 = TargetConstant<0>
  Morphed node: t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t14: ch,glue = CopyToReg t10, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t10: ch,glue = callseq_end t9, TargetConstant:i64<0>, TargetConstant:i64<0>, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 123593
  Skipped scope entry (due to false predicate) at index 123609, continuing at 123620
  Morphed node: t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t9: ch,glue = X86ISD::CALL t6, TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 84898
  Match failed at index 84903
  Continuing at 84986
  OpcodeSwitch from 84992 to 84996
  TypeSwitch[i64] from 84996 to 84999
  Morphed node: t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t6: ch,glue = CopyToReg t4, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t27: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t25: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t23: i64 = X86ISD::Wrapper TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 124560
  Morphed node: t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t4: ch,glue = callseq_start t0, TargetConstant:i64<0>, TargetConstant:i64<0>, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Starting pattern match
  Initial Opcode index to 123636
  Skipped scope entry (due to false predicate) at index 123651, continuing at 123666
  Morphed node: t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
ISEL: Match complete!

ISEL: Starting selection on root node: t26: i64 = TargetGlobalAddress<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t24: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t22: i64 = TargetGlobalAddress<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t19: i64 = TargetGlobalAddress<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t17: i64 = Register $rdx

ISEL: Starting selection on root node: t15: i64 = Register $rsi

ISEL: Starting selection on root node: t8: Untyped = RegisterMask

ISEL: Starting selection on root node: t7: i64 = TargetGlobalAddress<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

ISEL: Starting selection on root node: t5: i64 = Register $rdi

ISEL: Starting selection on root node: t3: i64 = TargetConstant<0>

ISEL: Starting selection on root node: t0: ch = EntryToken

===== Instruction selection ends:
Selected selection DAG: %bb.0 '_GLOBAL__sub_I_test2.cpp:entry'
SelectionDAG has 23 nodes:
  t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
      t0: ch = EntryToken
    t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t14: ch,glue = CopyToReg t10:1, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


********** List Scheduling %bb.0 'entry' **********
SU(0): t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t14: ch,glue = CopyToReg t10:1, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(1): Data Latency=1
    SU(2): Data Latency=1
    SU(4): Ord  Latency=1 Barrier
    SU(3): Data Latency=1
SU(1): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(2): t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(0): Data Latency=1
    SU(4): Data Latency=1
SU(3): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 1
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(0): Data Latency=1
SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(5): Ord  Latency=1 Barrier
    SU(2): Data Latency=1
  Successors:
    SU(0): Ord  Latency=1 Barrier
SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Ord  Latency=1 Barrier

Examining Available:
Height 0: SU(0): t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t14: ch,glue = CopyToReg t10:1, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [0]: SU(0): t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t14: ch,glue = CopyToReg t10:1, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Examining Available:
Height 1: SU(1): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Height 1: SU(3): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Height 1: SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [1]: SU(1): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Examining Available:
Height 1: SU(3): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Height 1: SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [2]: SU(3): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Examining Available:
Height 1: SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [3]: SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Examining Available:
Height 4: SU(2): t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

Height 4: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [4]: SU(2): t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Examining Available:
Height 4: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


*** Scheduling [5]: SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

*** Final schedule ***
SU(5): t4: i64,ch,glue = ADJCALLSTACKDOWN64 TargetConstant:i64<0>, TargetConstant:i64<0>, TargetConstant:i32<0>, t0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

SU(2): t27: i64 = MOV32ri64 TargetGlobalAddress:i64<%"class.std::ios_base::Init"* @_ZStL8__ioinit> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

SU(4): t10: i64,ch,glue = ADJCALLSTACKUP64 TargetConstant:i64<0>, TargetConstant:i64<0>, t9, t9:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t6: ch,glue = CopyToReg t4:1, Register:i64 $rdi, t27, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t9: ch,glue = CALL64pcrel32 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitC1Ev> 0, Register:i64 $rdi, RegisterMask:Untyped, t6, t6:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

SU(3): t25: i64 = MOV32ri64 TargetGlobalAddress:i64<void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

SU(1): t23: i64 = MOV32ri64 TargetGlobalAddress:i64<i8* @__dso_handle> 0, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

SU(0): t21: ch = TCRETURNdi64 TargetGlobalAddress:i64<i32 (void (i8*)*, i8*, i8*)* @__cxa_atexit> 0, TargetConstant:i32<0>, Register:i64 $rdi, Register:i64 $rsi, Register:i64 $rdx, RegisterMask:Untyped, t18, t18:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t14: ch,glue = CopyToReg t10:1, Register:i64 $rdi, t25, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t16: ch,glue = CopyToReg t14, Register:i64 $rsi, t27, t14:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

    t18: ch,glue = CopyToReg t16, Register:i64 $rdx, t23, t16:1, /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]


Total amount of phi nodes to update: 0
*** MachineFunction at end of ISel ***
# Machine code for function _GLOBAL__sub_I_test2.cpp: IsSSA, TracksLiveness

bb.0.entry:
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = COPY %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rsi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdx = COPY %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

	discovered a new reachable node %bb.0
***** Machine Function before Domain Reassignment *****
# Machine code for function _GLOBAL__sub_I_test2.cpp: IsSSA, TracksLiveness

bb.0.entry:
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = COPY %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rsi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdx = COPY %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

# Machine code for function _GLOBAL__sub_I_test2.cpp: IsSSA, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
32B	  %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
96B	  %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
112B	  %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = COPY %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = COPY %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

********** Stack Coloring **********
********** Function: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %bb.0
********** EARLY IF-CONVERSION **********
********** Function: _GLOBAL__sub_I_test2.cpp
Machine InstCombiner: _GLOBAL__sub_I_test2.cpp
Combining MBB entry
********** X86 cmov Conversion : _GLOBAL__sub_I_test2.cpp**********
	discovered a new reachable node %bb.0
******** Pre-regalloc Machine LICM: _GLOBAL__sub_I_test2.cpp ********
	discovered a new reachable node %bb.0

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - BB0[entry]: float = 1.0, int = 8

Entering: entry
Exiting: entry
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
******** Machine Sinking ********
********** PEEPHOLE OPTIMIZER **********
********** Function: _GLOBAL__sub_I_test2.cpp
Encountered load fold barrier on CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Encountered load fold barrier on TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
**** Analysing _GLOBAL__sub_I_test2.cpp
Start X86AvoidStoreForwardBlocks
End X86AvoidStoreForwardBlocks
********** X86 speculative load hardening : _GLOBAL__sub_I_test2.cpp **********
	discovered a new reachable node %bb.0
********** X86 EFLAGS copy lowering : _GLOBAL__sub_I_test2.cpp **********
Skipping Detect dead lanes pass
********** PROCESS IMPLICIT DEFS **********
********** Function: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %bb.0
********** REWRITING TWO-ADDR INSTRS **********
********** Function: _GLOBAL__sub_I_test2.cpp
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
32B	  %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
96B	  %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
112B	  %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = COPY killed %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = COPY killed %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = COPY killed %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

Computing live-in reg-units in ABI blocks.
Created 0 new intervals.
********** INTERVALS **********
%0 [32r,144r:0)  0@32r weight:0.000000e+00
%1 [96r,128r:0)  0@96r weight:0.000000e+00
%2 [112r,160r:0)  0@112r weight:0.000000e+00
RegMasks: 64r 176r
********** MACHINEINSTRS **********
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
32B	  %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
96B	  %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
112B	  %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = COPY %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = COPY %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

********** SIMPLE REGISTER COALESCING **********
********** Function: _GLOBAL__sub_I_test2.cpp
********** JOINING INTERVALS ***********
entry:
48B	$rdi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
	Considering merging %0 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrink: %0 [32r,144r:0)  0@32r weight:0.000000e+00
Shrunk: %0 [32r,144r:0)  0@32r weight:0.000000e+00
128B	$rdi = COPY %1:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
	Considering merging %1 with $rdi
	Can only merge into reserved registers.
Remat: $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrink: %1 [96r,128r:0)  0@96r weight:0.000000e+00
All defs dead: 96r	dead %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrunk: %1 [96r,96d:0)  0@96r weight:0.000000e+00
Deleting dead def 96r	dead %1:gr64 = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	$rsi = COPY %0:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
	Considering merging %0 with $rsi
	Can only merge into reserved registers.
Remat: $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrink: %0 [32r,144r:0)  0@32r weight:0.000000e+00
All defs dead: 32r	dead %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrunk: %0 [32r,32d:0)  0@32r weight:0.000000e+00
Deleting dead def 32r	dead %0:gr64 = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	$rdx = COPY %2:gr64, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
	Considering merging %2 with $rdx
	Can only merge into reserved registers.
Remat: $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrink: %2 [112r,160r:0)  0@112r weight:0.000000e+00
All defs dead: 112r	dead %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Shrunk: %2 [112r,112d:0)  0@112r weight:0.000000e+00
Deleting dead def 112r	dead %2:gr64 = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
Trying to inflate 0 regs.
********** INTERVALS **********
RegMasks: 64r 176r
********** MACHINEINSTRS **********
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

Before MISched:
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

bb.0.entry:
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

********** MI Scheduling **********
_GLOBAL__sub_I_test2.cpp:%bb.0 entry
  From: $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
    To: TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
 RegionInstrs: 3
ScheduleDAGMILive::schedule starting
GenericScheduler RegionPolicy:  ShouldTrackPressure=0 OnlyTopDown=0 OnlyBottomUp=1
Disabled scoreboard hazard recognizer
Disabled scoreboard hazard recognizer
SU(0):   $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(1):   $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
SU(2):   $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    ExitSU: Ord  Latency=1 Artificial
  Single Issue       : false;
ExitSU:   TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Ord  Latency=1 Artificial
    SU(1): Ord  Latency=1 Artificial
    SU(0): Ord  Latency=1 Artificial
Critical Path(GS-RR ): 1
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 2 1 0 
  Cand SU(2) ORDER                              
Pick Bot ORDER     
Scheduling SU(2) $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  Ready @1c
  SBPort015 +1x4u
  *** Critical resource SBPort015: 0c
  SBPortAny +1x2u
  BotQ.A BotLatency SU(2) 1c
BotQ.A @0c
  Retired: 1
  Executed: 0c
  Critical: 0c, 1 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 1 
  Cand SU(0) ORDER                              
  Cand SU(1) ORDER                              
Pick Bot ORDER     
Scheduling SU(1) $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 2
  Executed: 0c
  Critical: 0c, 2 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
Queue BotQ.P: 
Queue BotQ.A: 0 
Scheduling SU(0) $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
  Ready @1c
  SBPort015 +1x4u
  SBPortAny +1x2u
BotQ.A @0c
  Retired: 3
  Executed: 1c
  Critical: 1c, 3 SBPort015
  ExpectedLatency: 1c
  - Latency limited.
** ScheduleDAGMILive::schedule picking next node
*** Final schedule for %bb.0 ***
SU(0):   $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
SU(1):   $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
SU(2):   $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

********** INTERVALS **********
RegMasks: 64r 176r
********** MACHINEINSTRS **********
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.


block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - BB0[entry]: float = 1.0, int = 8

********** COMPUTING LIVE DEBUG VARIABLES: _GLOBAL__sub_I_test2.cpp **********
********** DEBUG VARIABLES **********
********** DEBUG LABELS **********
********** GREEDY REGISTER ALLOCATION **********
********** Function: _GLOBAL__sub_I_test2.cpp
********** Compute Spill Weights **********
********** Function: _GLOBAL__sub_I_test2.cpp
********** INTERVALS **********
RegMasks: 64r 176r
********** MACHINEINSTRS **********
# Machine code for function _GLOBAL__sub_I_test2.cpp: NoPHIs, TracksLiveness

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]

# End machine code for function _GLOBAL__sub_I_test2.cpp.

********** REWRITE VIRTUAL REGISTERS **********
********** Function: _GLOBAL__sub_I_test2.cpp
********** REGISTER MAP **********

0B	bb.0.entry:
16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
48B	  $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
64B	  CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
80B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
128B	  $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
144B	  $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
160B	  $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
176B	  TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> $rdi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> CALL64pcrel32 @_ZNSt8ios_base4InitC1Ev, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit-def $rsp, implicit-def $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> $rdi = MOV32ri64 @_ZNSt8ios_base4InitD1Ev, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> $rsi = MOV32ri64 @_ZStL8__ioinit, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> $rdx = MOV32ri64 @__dso_handle, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
> TCRETURNdi64 @__cxa_atexit, 0, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
********** EMITTING LIVE DEBUG VARIABLES **********
********** EMITTING LIVE DEBUG LABELS **********
********** Stack Slot Coloring **********
********** Function: _GLOBAL__sub_I_test2.cpp
MCP: BackwardCopyPropagateBlock entry
MCP: ForwardCopyPropagateBlock entry
******** Post-regalloc Machine LICM: _GLOBAL__sub_I_test2.cpp ********

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - BB0[entry]: float = 1.0, int = 8

	discovered a new reachable node %bb.0
		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
MCP: BackwardCopyPropagateBlock entry
MCP: ForwardCopyPropagateBlock entry
Machine Function
********** EXPANDING POST-RA PSEUDO INSTRS **********
********** Function: _GLOBAL__sub_I_test2.cpp
	discovered a new reachable node %bb.0

block-frequency: _GLOBAL__sub_I_test2.cpp
=========================================
reverse-post-order-traversal
 - 0: BB0[entry]
loop-detection
compute-mass-in-function
 - node: BB0[entry]
  => mass:  ffffffffffffffff
float-to-int: min = 1.0, max = 1.0, factor = 8.0
 - BB0[entry]: float = 1.0, scaled = 8.0, int = 8
block-frequency-info: _GLOBAL__sub_I_test2.cpp
 - BB0[entry]: float = 1.0, int = 8

		Looking for trivial roots
Found a new trivial root: %bb.0
Last visited node: %bb.0
		Looking for non-trivial roots
Total: 1, Num: 2
Discovered CFG nodes:
0: nullptr
1: nullptr
2: %bb.0
Found roots: %bb.0 
	discovered a new reachable node nullptr
	discovered a new reachable node %bb.0
********** REACHING DEFINITION ANALYSIS **********
%bb.0: entry
$edi:	2	$edi = MOV32ri @_ZStL8__ioinit, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edi:	2	$edi = MOV32ri @_ZStL8__ioinit, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edi:	2	$edi = MOV32ri @_ZStL8__ioinit, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edi:	4	$edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edi:	4	$edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edi:	4	$edi = MOV32ri @_ZNSt8ios_base4InitD1Ev, implicit-def $rdi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$esi:	5	$esi = MOV32ri @_ZStL8__ioinit, implicit-def $rsi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$esi:	5	$esi = MOV32ri @_ZStL8__ioinit, implicit-def $rsi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$esi:	5	$esi = MOV32ri @_ZStL8__ioinit, implicit-def $rsi, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edx:	6	$edx = MOV32ri @__dso_handle, implicit-def $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edx:	6	$edx = MOV32ri @__dso_handle, implicit-def $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$edx:	6	$edx = MOV32ri @__dso_handle, implicit-def $rdx, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$rax:	7	$rax = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$rax:	7	$rax = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
$rax:	7	$rax = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !69; /usr/lib/gcc/x86_64-linux-gnu/9/../../../../include/c++/9/iostream:74:25 @[ test2.cpp:0 ]
********** FIX EXECUTION DOMAIN: VR128X **********
%bb.0: entry
********** BREAK FALSE DEPENDENCIES **********
	discovered a new reachable node %bb.0
Start X86FixupBWInsts
End X86FixupBWInsts
Start X86FixupLEAs
End X86FixupLEAs
********** COMPUTING STACKMAP LIVENESS: _GLOBAL__sub_I_test2.cpp **********
X86 Retpoline Thunks
	discovered a new reachable node %bb.0
1 warning generated.
